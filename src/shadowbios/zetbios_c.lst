Module: C:\Dev1\DOS\Zet\rtl\src\ZetBios\zetbios_c.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT PARA USE16 000028DA bytes
0000                          _inb:
0000    56                        push        si 
0001    57                        push        di 
0002    55                        push        bp 
0003    89 E5                     mov         bp,sp 
0005    52                        push        dx 
0006    8B 96 08 00               mov         dx,word ptr 0x8[bp] 
000A    EC                        in          al,dx 
000B    5A                        pop         dx 
000C    89 EC                     mov         sp,bp 
000E    5D                        pop         bp 
000F    5F                        pop         di 
0010    5E                        pop         si 
0011    C3                        ret         

Routine Size: 18 bytes,    Routine Base: _TEXT + 0000

0012                          _outb:
0012    56                        push        si 
0013    57                        push        di 
0014    55                        push        bp 
0015    89 E5                     mov         bp,sp 
0017    50                        push        ax 
0018    52                        push        dx 
0019    8B 96 08 00               mov         dx,word ptr 0x8[bp] 
001D    8A 86 0A 00               mov         al,byte ptr 0xa[bp] 
0021    EE                        out         dx,al 
0022    5A                        pop         dx 
0023    58                        pop         ax 
0024    89 EC                     mov         sp,bp 
0026    5D                        pop         bp 
0027    5F                        pop         di 
0028    5E                        pop         si 
0029    C3                        ret         

Routine Size: 24 bytes,    Routine Base: _TEXT + 0012

002A                          _inw:
002A    56                        push        si 
002B    57                        push        di 
002C    55                        push        bp 
002D    89 E5                     mov         bp,sp 
002F    52                        push        dx 
0030    8B 96 08 00               mov         dx,word ptr 0x8[bp] 
0034    ED                        in          ax,dx 
0035    5A                        pop         dx 
0036    89 EC                     mov         sp,bp 
0038    5D                        pop         bp 
0039    5F                        pop         di 
003A    5E                        pop         si 
003B    C3                        ret         

Routine Size: 18 bytes,    Routine Base: _TEXT + 002A

003C                          _outw:
003C    56                        push        si 
003D    57                        push        di 
003E    55                        push        bp 
003F    89 E5                     mov         bp,sp 
0041    50                        push        ax 
0042    52                        push        dx 
0043    8B 96 08 00               mov         dx,word ptr 0x8[bp] 
0047    8B 86 0A 00               mov         ax,word ptr 0xa[bp] 
004B    EF                        out         dx,ax 
004C    5A                        pop         dx 
004D    58                        pop         ax 
004E    89 EC                     mov         sp,bp 
0050    5D                        pop         bp 
0051    5F                        pop         di 
0052    5E                        pop         si 
0053    C3                        ret         

Routine Size: 24 bytes,    Routine Base: _TEXT + 003C

0054                          _read_byte:
0054    56                        push        si 
0055    57                        push        di 
0056    55                        push        bp 
0057    89 E5                     mov         bp,sp 
0059    53                        push        bx 
005A    1E                        push        ds 
005B    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
005F    8E D8                     mov         ds,ax 
0061    8B 9E 0A 00               mov         bx,word ptr 0xa[bp] 
0065    8A 07                     mov         al,byte ptr [bx] 
0067    1F                        pop         ds 
0068    5B                        pop         bx 
0069    89 EC                     mov         sp,bp 
006B    5D                        pop         bp 
006C    5F                        pop         di 
006D    5E                        pop         si 
006E    C3                        ret         
006F    FC                        cld         

Routine Size: 28 bytes,    Routine Base: _TEXT + 0054

0070                          _read_word:
0070    56                        push        si 
0071    57                        push        di 
0072    55                        push        bp 
0073    89 E5                     mov         bp,sp 
0075    53                        push        bx 
0076    1E                        push        ds 
0077    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
007B    8E D8                     mov         ds,ax 
007D    8B 9E 0A 00               mov         bx,word ptr 0xa[bp] 
0081    8B 07                     mov         ax,word ptr [bx] 
0083    1F                        pop         ds 
0084    5B                        pop         bx 
0085    89 EC                     mov         sp,bp 
0087    5D                        pop         bp 
0088    5F                        pop         di 
0089    5E                        pop         si 
008A    C3                        ret         
008B    FC                        cld         

Routine Size: 28 bytes,    Routine Base: _TEXT + 0070

008C                          _write_byte:
008C    56                        push        si 
008D    57                        push        di 
008E    55                        push        bp 
008F    89 E5                     mov         bp,sp 
0091    50                        push        ax 
0092    53                        push        bx 
0093    1E                        push        ds 
0094    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
0098    8E D8                     mov         ds,ax 
009A    8B 9E 0A 00               mov         bx,word ptr 0xa[bp] 
009E    8A 86 0C 00               mov         al,byte ptr 0xc[bp] 
00A2    88 07                     mov         byte ptr [bx],al 
00A4    1F                        pop         ds 
00A5    5B                        pop         bx 
00A6    58                        pop         ax 
00A7    89 EC                     mov         sp,bp 
00A9    5D                        pop         bp 
00AA    5F                        pop         di 
00AB    5E                        pop         si 
00AC    C3                        ret         
00AD    FC                        cld         

Routine Size: 34 bytes,    Routine Base: _TEXT + 008C

00AE                          _write_word:
00AE    56                        push        si 
00AF    57                        push        di 
00B0    55                        push        bp 
00B1    89 E5                     mov         bp,sp 
00B3    50                        push        ax 
00B4    53                        push        bx 
00B5    1E                        push        ds 
00B6    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
00BA    8E D8                     mov         ds,ax 
00BC    8B 9E 0A 00               mov         bx,word ptr 0xa[bp] 
00C0    8B 86 0C 00               mov         ax,word ptr 0xc[bp] 
00C4    89 07                     mov         word ptr [bx],ax 
00C6    1F                        pop         ds 
00C7    5B                        pop         bx 
00C8    58                        pop         ax 
00C9    89 EC                     mov         sp,bp 
00CB    5D                        pop         bp 
00CC    5F                        pop         di 
00CD    5E                        pop         si 
00CE    C3                        ret         
00CF    FC                        cld         
00D0                          _get_CS:
00D0    56                        push        si 
00D1    57                        push        di 
00D2    8C C8                     mov         ax,cs 
00D4    5F                        pop         di 
00D5    5E                        pop         si 
00D6    C3                        ret         
00D7    FC                        cld         
00D8                          _get_SS:
00D8    56                        push        si 
00D9    57                        push        di 
00DA    8C D0                     mov         ax,ss 
00DC    5F                        pop         di 
00DD    5E                        pop         si 
00DE    C3                        ret         
00DF    FC                        cld         
00E0                          _memsetb:
00E0    56                        push        si 
00E1    57                        push        di 
00E2    55                        push        bp 
00E3    89 E5                     mov         bp,sp 
00E5    50                        push        ax 
00E6    51                        push        cx 
00E7    06                        push        es 
00E8    57                        push        di 
00E9    8B 8E 0E 00               mov         cx,word ptr 0xe[bp] 
00ED    85 C9                     test        cx,cx 
00EF    74 13                     je          L$1 
00F1    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
00F5    8E C0                     mov         es,ax 
00F7    8B 86 0A 00               mov         ax,word ptr 0xa[bp] 
00FB    8B F8                     mov         di,ax 
00FD    8A 86 0C 00               mov         al,byte ptr 0xc[bp] 
0101    FC                        cld         
0102    F3 AA                     rep stosb   
0104                          L$1:
0104    5F                        pop         di 
0105    07                        pop         es 
0106    59                        pop         cx 
0107    58                        pop         ax 
0108    89 EC                     mov         sp,bp 
010A    5D                        pop         bp 
010B    5F                        pop         di 
010C    5E                        pop         si 
010D    C3                        ret         
010E                          _memcpyb:
010E    56                        push        si 
010F    57                        push        di 
0110    55                        push        bp 
0111    89 E5                     mov         bp,sp 
0113    50                        push        ax 
0114    51                        push        cx 
0115    06                        push        es 
0116    57                        push        di 
0117    1E                        push        ds 
0118    56                        push        si 
0119    8B 8E 10 00               mov         cx,word ptr 0x10[bp] 
011D    85 C9                     test        cx,cx 
011F    74 1B                     je          L$2 
0121    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
0125    8E C0                     mov         es,ax 
0127    8B 86 0A 00               mov         ax,word ptr 0xa[bp] 
012B    8B F8                     mov         di,ax 
012D    8B 86 0C 00               mov         ax,word ptr 0xc[bp] 
0131    8E D8                     mov         ds,ax 
0133    8B 86 0E 00               mov         ax,word ptr 0xe[bp] 
0137    8B F0                     mov         si,ax 
0139    FC                        cld         
013A    F3 A4                     rep movsb   
013C                          L$2:
013C    5E                        pop         si 
013D    1F                        pop         ds 
013E    5F                        pop         di 
013F    07                        pop         es 
0140    59                        pop         cx 
0141    58                        pop         ax 
0142    89 EC                     mov         sp,bp 
0144    5D                        pop         bp 
0145    5F                        pop         di 
0146    5E                        pop         si 
0147    C3                        ret         
0148                          _wrch:
0148    56                        push        si 
0149    57                        push        di 
014A    55                        push        bp 
014B    89 E5                     mov         bp,sp 
014D    53                        push        bx 
014E    B4 0E                     mov         ah,0x0e 
0150    8A 86 08 00               mov         al,byte ptr 0x8[bp] 
0154    33 DB                     xor         bx,bx 
0156    CD 10                     int         0x10 
0158    5B                        pop         bx 
0159    89 EC                     mov         sp,bp 
015B    5D                        pop         bp 
015C    5F                        pop         di 
015D    5E                        pop         si 
015E    C3                        ret         
015F    FC                        cld         
0160                          _send:
0160    55                        push        bp 
0161    89 E5                     mov         bp,sp 
0163    F6 46 04 02               test        byte ptr 0x4[bp],0x02 
0167    74 1C                     je          L$4 
0169    80 7E 06 0A               cmp         byte ptr 0x6[bp],0x0a 
016D    75 0A                     jne         L$3 
016F    B8 0D 00                  mov         ax,0x000d 
0172    50                        push        ax 
0173    E8 00 00                  call        _wrch 
0176    83 C4 02                  add         sp,0x0002 
0179                          L$3:
0179    8A 46 06                  mov         al,byte ptr 0x6[bp] 
017C    30 E4                     xor         ah,ah 
017E    50                        push        ax 
017F    E8 00 00                  call        _wrch 
0182    83 C4 02                  add         sp,0x0002 
0185                          L$4:
0185    5D                        pop         bp 
0186    C3                        ret         
0187    FC                        cld         
0188                          _put_int:
0188    56                        push        si 
0189    57                        push        di 
018A    55                        push        bp 
018B    89 E5                     mov         bp,sp 
018D    83 EC 02                  sub         sp,0x0002 
0190    8B 7E 08                  mov         di,word ptr 0x8[bp] 
0193    8B 76 0C                  mov         si,word ptr 0xc[bp] 
0196    BB 0A 00                  mov         bx,0x000a 
0199    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
019C    99                        cwd         
019D    F7 FB                     idiv        bx 
019F    89 46 FE                  mov         word ptr -0x2[bp],ax 
01A2    85 C0                     test        ax,ax 
01A4    74 0F                     je          L$5 
01A6    FF 76 0E                  push        word ptr 0xe[bp] 
01A9    4E                        dec         si 
01AA    56                        push        si 
01AB    50                        push        ax 
01AC    57                        push        di 
01AD    E8 00 00                  call        _put_int 
01B0    83 C4 08                  add         sp,0x0008 
01B3    EB 23                     jmp         L$7 
01B5                          L$5:
01B5    4E                        dec         si 
01B6    85 F6                     test        si,si 
01B8    7E 0D                     jle         L$6 
01BA    BB 20 00                  mov         bx,0x0020 
01BD    53                        push        bx 
01BE    57                        push        di 
01BF    E8 00 00                  call        _send 
01C2    83 C4 04                  add         sp,0x0004 
01C5    EB EE                     jmp         L$5 
01C7                          L$6:
01C7    83 7E 0E 00               cmp         word ptr 0xe[bp],0x0000 
01CB    74 0B                     je          L$7 
01CD    BB 2D 00                  mov         bx,0x002d 
01D0    53                        push        bx 
01D1    57                        push        di 
01D2    E8 00 00                  call        _send 
01D5    83 C4 04                  add         sp,0x0004 
01D8                          L$7:
01D8    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
01DB    B3 0A                     mov         bl,0x0a 
01DD    F6 E3                     mul         bl 
01DF    8A 5E 0A                  mov         bl,byte ptr 0xa[bp] 
01E2    28 C3                     sub         bl,al 
01E4    80 C3 30                  add         bl,0x30 
01E7    30 FF                     xor         bh,bh 
01E9    53                        push        bx 
01EA    57                        push        di 
01EB    E8 00 00                  call        _send 
01EE    83 C4 04                  add         sp,0x0004 
01F1    89 EC                     mov         sp,bp 
01F3    5D                        pop         bp 
01F4    5F                        pop         di 
01F5    5E                        pop         si 
01F6    C3                        ret         
01F7    FC                        cld         
01F8                          _put_uint:
01F8    56                        push        si 
01F9    57                        push        di 
01FA    55                        push        bp 
01FB    89 E5                     mov         bp,sp 
01FD    83 EC 02                  sub         sp,0x0002 
0200    8B 7E 08                  mov         di,word ptr 0x8[bp] 
0203    8B 76 0C                  mov         si,word ptr 0xc[bp] 
0206    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
0209    31 D2                     xor         dx,dx 
020B    BB 0A 00                  mov         bx,0x000a 
020E    F7 F3                     div         bx 
0210    89 46 FE                  mov         word ptr -0x2[bp],ax 
0213    85 C0                     test        ax,ax 
0215    74 0F                     je          L$8 
0217    FF 76 0E                  push        word ptr 0xe[bp] 
021A    4E                        dec         si 
021B    56                        push        si 
021C    50                        push        ax 
021D    57                        push        di 
021E    E8 00 00                  call        _put_uint 
0221    83 C4 08                  add         sp,0x0008 
0224    EB 23                     jmp         L$10 
0226                          L$8:
0226    4E                        dec         si 
0227    85 F6                     test        si,si 
0229    7E 0D                     jle         L$9 
022B    B8 20 00                  mov         ax,0x0020 
022E    50                        push        ax 
022F    57                        push        di 
0230    E8 00 00                  call        _send 
0233    83 C4 04                  add         sp,0x0004 
0236    EB EE                     jmp         L$8 
0238                          L$9:
0238    83 7E 0E 00               cmp         word ptr 0xe[bp],0x0000 
023C    74 0B                     je          L$10 
023E    B8 2D 00                  mov         ax,0x002d 
0241    50                        push        ax 
0242    57                        push        di 
0243    E8 00 00                  call        _send 
0246    83 C4 04                  add         sp,0x0004 
0249                          L$10:
0249    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
024C    B4 0A                     mov         ah,0x0a 
024E    F6 E4                     mul         ah 
0250    8A 66 0A                  mov         ah,byte ptr 0xa[bp] 
0253    28 C4                     sub         ah,al 
0255    88 E0                     mov         al,ah 
0257    04 30                     add         al,0x30 
0259    30 E4                     xor         ah,ah 
025B    50                        push        ax 
025C    57                        push        di 
025D    E8 00 00                  call        _send 
0260    83 C4 04                  add         sp,0x0004 
0263    89 EC                     mov         sp,bp 
0265    5D                        pop         bp 
0266    5F                        pop         di 
0267    5E                        pop         si 
0268    C3                        ret         
0269    FC                        cld         
026A                          _put_luint:
026A    56                        push        si 
026B    57                        push        di 
026C    55                        push        bp 
026D    89 E5                     mov         bp,sp 
026F    83 EC 02                  sub         sp,0x0002 
0272    8B 7E 08                  mov         di,word ptr 0x8[bp] 
0275    8B 56 0C                  mov         dx,word ptr 0xc[bp] 
0278    8B 76 0E                  mov         si,word ptr 0xe[bp] 
027B    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
027E    BB 0A 00                  mov         bx,0x000a 
0281    31 C9                     xor         cx,cx 
0283    E8 00 00                  call        __U4D 
0286    89 46 FE                  mov         word ptr -0x2[bp],ax 
0289    09 D0                     or          ax,dx 
028B    74 12                     je          L$11 
028D    FF 76 10                  push        word ptr 0x10[bp] 
0290    4E                        dec         si 
0291    56                        push        si 
0292    52                        push        dx 
0293    FF 76 FE                  push        word ptr -0x2[bp] 
0296    57                        push        di 
0297    E8 00 00                  call        _put_luint 
029A    83 C4 0A                  add         sp,0x000a 
029D    EB 23                     jmp         L$13 
029F                          L$11:
029F    4E                        dec         si 
02A0    85 F6                     test        si,si 
02A2    7E 0D                     jle         L$12 
02A4    B8 20 00                  mov         ax,0x0020 
02A7    50                        push        ax 
02A8    57                        push        di 
02A9    E8 00 00                  call        _send 
02AC    83 C4 04                  add         sp,0x0004 
02AF    EB EE                     jmp         L$11 
02B1                          L$12:
02B1    83 7E 10 00               cmp         word ptr 0x10[bp],0x0000 
02B5    74 0B                     je          L$13 
02B7    B8 2D 00                  mov         ax,0x002d 
02BA    50                        push        ax 
02BB    57                        push        di 
02BC    E8 00 00                  call        _send 
02BF    83 C4 04                  add         sp,0x0004 
02C2                          L$13:
02C2    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02C5    B4 0A                     mov         ah,0x0a 
02C7    F6 E4                     mul         ah 
02C9    8A 66 0A                  mov         ah,byte ptr 0xa[bp] 
02CC    28 C4                     sub         ah,al 
02CE    88 E0                     mov         al,ah 
02D0    04 30                     add         al,0x30 
02D2    30 E4                     xor         ah,ah 
02D4    50                        push        ax 
02D5    57                        push        di 
02D6    E8 00 00                  call        _send 
02D9    83 C4 04                  add         sp,0x0004 
02DC    89 EC                     mov         sp,bp 
02DE                          L$14:
02DE    5D                        pop         bp 
02DF    5F                        pop         di 
02E0    5E                        pop         si 
02E1    C3                        ret         
02E2                          _put_str:
02E2    56                        push        si 
02E3    57                        push        di 
02E4    55                        push        bp 
02E5    89 E5                     mov         bp,sp 
02E7    8B 7E 0A                  mov         di,word ptr 0xa[bp] 
02EA    8B 76 0C                  mov         si,word ptr 0xc[bp] 
02ED                          L$15:
02ED    56                        push        si 
02EE    57                        push        di 
02EF    E8 00 00                  call        _read_byte 
02F2    83 C4 04                  add         sp,0x0004 
02F5    84 C0                     test        al,al 
02F7    74 E5                     je          L$14 
02F9    30 E4                     xor         ah,ah 
02FB    50                        push        ax 
02FC    FF 76 08                  push        word ptr 0x8[bp] 
02FF    E8 00 00                  call        _send 
0302    83 C4 04                  add         sp,0x0004 
0305    46                        inc         si 
0306    EB E5                     jmp         L$15 
0308                          _bios_printf:
0308    56                        push        si 
0309    57                        push        di 
030A    55                        push        bp 
030B    89 E5                     mov         bp,sp 
030D    83 EC 10                  sub         sp,0x0010 
0310    8D 46 0A                  lea         ax,0xa[bp] 
0313    89 46 F6                  mov         word ptr -0xa[bp],ax 
0316    E8 00 00                  call        _get_SS 
0319    89 46 F4                  mov         word ptr -0xc[bp],ax 
031C    31 F6                     xor         si,si 
031E    89 76 F0                  mov         word ptr -0x10[bp],si 
0321    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0324    25 07 00                  and         ax,0x0007 
0327    3D 07 00                  cmp         ax,0x0007 
032A    75 0E                     jne         L$16 
032C    B8 00 00                  mov         ax,offset DGROUP:L$359 
032F    50                        push        ax 
0330    B8 02 00                  mov         ax,0x0002 
0333    50                        push        ax 
0334    E8 00 00                  call        _bios_printf 
0337    83 C4 04                  add         sp,0x0004 
033A                          L$16:
033A    FF 76 0A                  push        word ptr 0xa[bp] 
033D    E8 00 00                  call        _get_CS 
0340    50                        push        ax 
0341    E8 00 00                  call        _read_byte 
0344    83 C4 04                  add         sp,0x0004 
0347    88 46 FE                  mov         byte ptr -0x2[bp],al 
034A    84 C0                     test        al,al 
034C    74 36                     je          L$18 
034E    3C 25                     cmp         al,0x25 
0350    75 0B                     jne         L$17 
0352    BE 01 00                  mov         si,0x0001 
0355    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
035A    E9 64 02                  jmp         L$54 
035D                          L$17:
035D    85 F6                     test        si,si 
035F    74 5D                     je          L$22 
0361    3C 30                     cmp         al,0x30 
0363    72 22                     jb          L$19 
0365    3C 39                     cmp         al,0x39 
0367    77 1E                     ja          L$19 
0369    88 C2                     mov         dl,al 
036B    30 F6                     xor         dh,dh 
036D    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
0370    D1 E0                     shl         ax,0x01 
0372    D1 E0                     shl         ax,0x01 
0374    03 46 F0                  add         ax,word ptr -0x10[bp] 
0377    D1 E0                     shl         ax,0x01 
0379    83 EA 30                  sub         dx,0x0030 
037C    01 D0                     add         ax,dx 
037E    89 46 F0                  mov         word ptr -0x10[bp],ax 
0381    E9 3D 02                  jmp         L$54 
0384                          L$18:
0384    E9 40 02                  jmp         L$55 
0387                          L$19:
0387    83 46 F6 02               add         word ptr -0xa[bp],0x0002 
038B    FF 76 F6                  push        word ptr -0xa[bp] 
038E    FF 76 F4                  push        word ptr -0xc[bp] 
0391    E8 00 00                  call        _read_word 
0394    89 46 F2                  mov         word ptr -0xe[bp],ax 
0397    83 C4 04                  add         sp,0x0004 
039A    89 46 F8                  mov         word ptr -0x8[bp],ax 
039D    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
03A0    3C 78                     cmp         al,0x78 
03A2    74 04                     je          L$20 
03A4    3C 58                     cmp         al,0x58 
03A6    75 56                     jne         L$28 
03A8                          L$20:
03A8    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
03AC    75 05                     jne         L$21 
03AE    C7 46 F0 04 00            mov         word ptr -0x10[bp],0x0004 
03B3                          L$21:
03B3    80 7E FE 78               cmp         byte ptr -0x2[bp],0x78 
03B7    75 08                     jne         L$23 
03B9    BF 61 00                  mov         di,0x0061 
03BC    EB 06                     jmp         L$24 
03BE                          L$22:
03BE    E9 F4 01                  jmp         L$53 
03C1                          L$23:
03C1    BF 41 00                  mov         di,0x0041 
03C4                          L$24:
03C4    8B 76 F0                  mov         si,word ptr -0x10[bp] 
03C7                          L$25:
03C7    4E                        dec         si 
03C8    85 F6                     test        si,si 
03CA    7C 48                     jl          L$29 
03CC    89 F1                     mov         cx,si 
03CE    D1 E1                     shl         cx,0x01 
03D0    D1 E1                     shl         cx,0x01 
03D2    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
03D5    D3 E8                     shr         ax,cl 
03D7    30 E4                     xor         ah,ah 
03D9    24 0F                     and         al,0x0f 
03DB    3D 09 00                  cmp         ax,0x0009 
03DE    77 07                     ja          L$26 
03E0    89 C2                     mov         dx,ax 
03E2    83 C2 30                  add         dx,0x0030 
03E5    EB 07                     jmp         L$27 
03E7                          L$26:
03E7    89 C2                     mov         dx,ax 
03E9    83 EA 0A                  sub         dx,0x000a 
03EC    01 FA                     add         dx,di 
03EE                          L$27:
03EE    88 D0                     mov         al,dl 
03F0    30 E4                     xor         ah,ah 
03F2    50                        push        ax 
03F3    FF 76 08                  push        word ptr 0x8[bp] 
03F6    E8 00 00                  call        _send 
03F9    83 C4 04                  add         sp,0x0004 
03FC    EB C9                     jmp         L$25 
03FE                          L$28:
03FE    3C 75                     cmp         al,0x75 
0400    75 15                     jne         L$30 
0402    31 C0                     xor         ax,ax 
0404    50                        push        ax 
0405    FF 76 F0                  push        word ptr -0x10[bp] 
0408    FF 76 F2                  push        word ptr -0xe[bp] 
040B    FF 76 08                  push        word ptr 0x8[bp] 
040E    E8 00 00                  call        _put_uint 
0411    83 C4 08                  add         sp,0x0008 
0414                          L$29:
0414    E9 96 01                  jmp         L$52 
0417                          L$30:
0417    8B 7E F0                  mov         di,word ptr -0x10[bp] 
041A    4F                        dec         di 
041B    8B 76 F6                  mov         si,word ptr -0xa[bp] 
041E    83 C6 02                  add         si,0x0002 
0421    3C 6C                     cmp         al,0x6c 
0423    75 53                     jne         L$31 
0425    FF 46 0A                  inc         word ptr 0xa[bp] 
0428    FF 76 0A                  push        word ptr 0xa[bp] 
042B    E8 00 00                  call        _get_CS 
042E    50                        push        ax 
042F    E8 00 00                  call        _read_byte 
0432    88 46 FC                  mov         byte ptr -0x4[bp],al 
0435    83 C4 04                  add         sp,0x0004 
0438    88 46 FE                  mov         byte ptr -0x2[bp],al 
043B    89 76 F6                  mov         word ptr -0xa[bp],si 
043E    56                        push        si 
043F    FF 76 F4                  push        word ptr -0xc[bp] 
0442    E8 00 00                  call        _read_word 
0445    83 C4 04                  add         sp,0x0004 
0448    89 46 FA                  mov         word ptr -0x6[bp],ax 
044B    80 7E FC 64               cmp         byte ptr -0x4[bp],0x64 
044F    75 2A                     jne         L$32 
0451    F6 C4 80                  test        ah,0x80 
0454    74 2B                     je          L$33 
0456    BA 01 00                  mov         dx,0x0001 
0459    52                        push        dx 
045A    57                        push        di 
045B    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
045E    F7 D8                     neg         ax 
0460    F7 DA                     neg         dx 
0462    1D 00 00                  sbb         ax,0x0000 
0465    50                        push        ax 
0466    52                        push        dx 
0467    FF 76 08                  push        word ptr 0x8[bp] 
046A    E8 00 00                  call        _put_luint 
046D    83 C4 0A                  add         sp,0x000a 
0470    31 F6                     xor         si,si 
0472    FF 46 0A                  inc         word ptr 0xa[bp] 
0475    E9 C2 FE                  jmp         L$16 
0478                          L$31:
0478    E9 90 00                  jmp         L$45 
047B                          L$32:
047B    80 7E FC 75               cmp         byte ptr -0x4[bp],0x75 
047F    75 1C                     jne         L$34 
0481                          L$33:
0481    31 D2                     xor         dx,dx 
0483    52                        push        dx 
0484    FF 76 F0                  push        word ptr -0x10[bp] 
0487    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
048A    50                        push        ax 
048B    52                        push        dx 
048C    FF 76 08                  push        word ptr 0x8[bp] 
048F    E8 00 00                  call        _put_luint 
0492    83 C4 0A                  add         sp,0x000a 
0495    31 F6                     xor         si,si 
0497    FF 46 0A                  inc         word ptr 0xa[bp] 
049A    E9 9D FE                  jmp         L$16 
049D                          L$34:
049D    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
04A0    3C 78                     cmp         al,0x78 
04A2    74 04                     je          L$35 
04A4    3C 58                     cmp         al,0x58 
04A6    75 5B                     jne         L$44 
04A8                          L$35:
04A8    83 7E F0 00               cmp         word ptr -0x10[bp],0x0000 
04AC    75 05                     jne         L$36 
04AE    C7 46 F0 08 00            mov         word ptr -0x10[bp],0x0008 
04B3                          L$36:
04B3    80 7E FE 78               cmp         byte ptr -0x2[bp],0x78 
04B7    75 05                     jne         L$37 
04B9    BF 61 00                  mov         di,0x0061 
04BC    EB 03                     jmp         L$38 
04BE                          L$37:
04BE    BF 41 00                  mov         di,0x0041 
04C1                          L$38:
04C1    8B 76 F0                  mov         si,word ptr -0x10[bp] 
04C4                          L$39:
04C4    4E                        dec         si 
04C5    85 F6                     test        si,si 
04C7    7C 3A                     jl          L$44 
04C9    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
04CC    89 F1                     mov         cx,si 
04CE    D1 E1                     shl         cx,0x01 
04D0    D1 E1                     shl         cx,0x01 
04D2    8B 56 FA                  mov         dx,word ptr -0x6[bp] 
04D5    E3 06                     jcxz        L$41 
04D7                          L$40:
04D7    D1 EA                     shr         dx,0x01 
04D9    D1 D8                     rcr         ax,0x01 
04DB    E2 FA                     loop        L$40 
04DD                          L$41:
04DD    25 0F 00                  and         ax,0x000f 
04E0    3D 09 00                  cmp         ax,0x0009 
04E3    77 07                     ja          L$42 
04E5    89 C2                     mov         dx,ax 
04E7    83 C2 30                  add         dx,0x0030 
04EA    EB 07                     jmp         L$43 
04EC                          L$42:
04EC    89 C2                     mov         dx,ax 
04EE    83 EA 0A                  sub         dx,0x000a 
04F1    01 FA                     add         dx,di 
04F3                          L$43:
04F3    88 D0                     mov         al,dl 
04F5    30 E4                     xor         ah,ah 
04F7    50                        push        ax 
04F8    FF 76 08                  push        word ptr 0x8[bp] 
04FB    E8 00 00                  call        _send 
04FE    83 C4 04                  add         sp,0x0004 
0501    EB C1                     jmp         L$39 
0503                          L$44:
0503    31 F6                     xor         si,si 
0505    FF 46 0A                  inc         word ptr 0xa[bp] 
0508    E9 2F FE                  jmp         L$16 
050B                          L$45:
050B    3C 64                     cmp         al,0x64 
050D    75 3C                     jne         L$47 
050F    F6 46 F3 80               test        byte ptr -0xd[bp],0x80 
0513    74 1C                     je          L$46 
0515    B8 01 00                  mov         ax,0x0001 
0518    50                        push        ax 
0519    57                        push        di 
051A    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
051D    F7 D8                     neg         ax 
051F    50                        push        ax 
0520    FF 76 08                  push        word ptr 0x8[bp] 
0523    E8 00 00                  call        _put_int 
0526    83 C4 08                  add         sp,0x0008 
0529    31 F6                     xor         si,si 
052B    FF 46 0A                  inc         word ptr 0xa[bp] 
052E    E9 09 FE                  jmp         L$16 
0531                          L$46:
0531    31 C0                     xor         ax,ax 
0533    50                        push        ax 
0534    FF 76 F0                  push        word ptr -0x10[bp] 
0537    FF 76 F2                  push        word ptr -0xe[bp] 
053A    FF 76 08                  push        word ptr 0x8[bp] 
053D    E8 00 00                  call        _put_int 
0540    83 C4 08                  add         sp,0x0008 
0543    31 F6                     xor         si,si 
0545    FF 46 0A                  inc         word ptr 0xa[bp] 
0548    E9 EF FD                  jmp         L$16 
054B                          L$47:
054B    3C 73                     cmp         al,0x73 
054D    75 18                     jne         L$48 
054F    FF 76 F2                  push        word ptr -0xe[bp] 
0552    E8 00 00                  call        _get_CS 
0555    50                        push        ax 
0556    FF 76 08                  push        word ptr 0x8[bp] 
0559    E8 00 00                  call        _put_str 
055C    83 C4 06                  add         sp,0x0006 
055F    31 F6                     xor         si,si 
0561    FF 46 0A                  inc         word ptr 0xa[bp] 
0564    E9 D3 FD                  jmp         L$16 
0567                          L$48:
0567    3C 53                     cmp         al,0x53 
0569    75 22                     jne         L$49 
056B    89 76 F6                  mov         word ptr -0xa[bp],si 
056E    56                        push        si 
056F    FF 76 F4                  push        word ptr -0xc[bp] 
0572    E8 00 00                  call        _read_word 
0575    83 C4 04                  add         sp,0x0004 
0578    50                        push        ax 
0579    FF 76 F2                  push        word ptr -0xe[bp] 
057C    FF 76 08                  push        word ptr 0x8[bp] 
057F    E8 00 00                  call        _put_str 
0582    83 C4 06                  add         sp,0x0006 
0585    31 F6                     xor         si,si 
0587    FF 46 0A                  inc         word ptr 0xa[bp] 
058A    E9 AD FD                  jmp         L$16 
058D                          L$49:
058D    3C 63                     cmp         al,0x63 
058F    75 0E                     jne         L$50 
0591    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0594    30 E4                     xor         ah,ah 
0596    50                        push        ax 
0597    FF 76 08                  push        word ptr 0x8[bp] 
059A    E8 00 00                  call        _send 
059D    EB 0B                     jmp         L$51 
059F                          L$50:
059F    B8 08 00                  mov         ax,offset DGROUP:L$360 
05A2    50                        push        ax 
05A3    B8 07 00                  mov         ax,0x0007 
05A6    50                        push        ax 
05A7    E8 00 00                  call        _bios_printf 
05AA                          L$51:
05AA    83 C4 04                  add         sp,0x0004 
05AD                          L$52:
05AD    31 F6                     xor         si,si 
05AF    FF 46 0A                  inc         word ptr 0xa[bp] 
05B2    E9 85 FD                  jmp         L$16 
05B5                          L$53:
05B5    30 E4                     xor         ah,ah 
05B7    50                        push        ax 
05B8    FF 76 08                  push        word ptr 0x8[bp] 
05BB    E8 00 00                  call        _send 
05BE    83 C4 04                  add         sp,0x0004 
05C1                          L$54:
05C1    FF 46 0A                  inc         word ptr 0xa[bp] 
05C4    E9 73 FD                  jmp         L$16 
05C7                          L$55:
05C7    F6 46 08 01               test        byte ptr 0x8[bp],0x01 
05CB    74 04                     je          L$57 
05CD    FA                        cli         
05CE                          L$56:
05CE    F4                        hlt         
05CF    EB FD                     jmp         L$56 
05D1                          L$57:
05D1    89 EC                     mov         sp,bp 
05D3    5D                        pop         bp 
05D4    5F                        pop         di 
05D5    5E                        pop         si 
05D6    C3                        ret         
05D7    FC                        cld         

Routine Size: 1322 bytes,    Routine Base: _TEXT + 00AE

05D8                          _print_bios_banner:
05D8    B8 25 00                  mov         ax,offset DGROUP:L$361 
05DB    50                        push        ax 
05DC    B8 02 00                  mov         ax,0x0002 
05DF    50                        push        ax 
05E0    E8 00 00                  call        _bios_printf 
05E3    83 C4 04                  add         sp,0x0004 
05E6    B8 42 00                  mov         ax,offset DGROUP:L$362 
05E9    50                        push        ax 
05EA    B8 02 00                  mov         ax,0x0002 
05ED    50                        push        ax 
05EE    E8 00 00                  call        _bios_printf 
05F1    83 C4 04                  add         sp,0x0004 
05F4    B8 4E 00                  mov         ax,offset DGROUP:L$363 
05F7    50                        push        ax 
05F8    B8 02 00                  mov         ax,0x0002 
05FB    50                        push        ax 
05FC    E8 00 00                  call        _bios_printf 
05FF    83 C4 04                  add         sp,0x0004 
0602    B8 61 00                  mov         ax,offset DGROUP:L$364 
0605    50                        push        ax 
0606    B8 02 00                  mov         ax,0x0002 
0609    50                        push        ax 
060A    E8 00 00                  call        _bios_printf 
060D    83 C4 04                  add         sp,0x0004 
0610    C3                        ret         
0611    FC                        cld         

Routine Size: 58 bytes,    Routine Base: _TEXT + 05D8

0612                          _init_boot_vectors:
0612    56                        push        si 
0613    57                        push        di 
0614    55                        push        bp 
0615    89 E5                     mov         bp,sp 
0617    83 EC 12                  sub         sp,0x0012 
061A    E8 00 00                  call        _get_SS 
061D    89 C6                     mov         si,ax 
061F    89 C7                     mov         di,ax 
0621    B8 FF 00                  mov         ax,0x00ff 
0624    50                        push        ax 
0625    31 C0                     xor         ax,ax 
0627    50                        push        ax 
0628    50                        push        ax 
0629    B8 F0 9F                  mov         ax,0x9ff0 
062C    50                        push        ax 
062D    E8 00 00                  call        _memsetb 
0630    83 C4 08                  add         sp,0x0008 
0633    B8 FF FF                  mov         ax,0xffff 
0636    50                        push        ax 
0637    B8 84 00                  mov         ax,0x0084 
063A    50                        push        ax 
063B    B8 F0 9F                  mov         ax,0x9ff0 
063E    50                        push        ax 
063F    E8 00 00                  call        _write_word 
0642    83 C4 06                  add         sp,0x0006 
0645    B8 8D 00                  mov         ax,0x008d 
0648    50                        push        ax 
0649    B8 40 00                  mov         ax,0x0040 
064C    50                        push        ax 
064D    E8 00 00                  call        _read_byte 
0650    83 C4 04                  add         sp,0x0004 
0653    84 C0                     test        al,al 
0655    74 49                     je          L$58 
0657    30 E4                     xor         ah,ah 
0659    50                        push        ax 
065A    B8 73 00                  mov         ax,offset DGROUP:L$365 
065D    50                        push        ax 
065E    B8 02 00                  mov         ax,0x0002 
0661    50                        push        ax 
0662    E8 00 00                  call        _bios_printf 
0665    83 C4 06                  add         sp,0x0006 
0668    C7 46 EE 01 00            mov         word ptr -0x12[bp],0x0001 
066D    31 C0                     xor         ax,ax 
066F    89 46 F0                  mov         word ptr -0x10[bp],ax 
0672    89 46 F2                  mov         word ptr -0xe[bp],ax 
0675    89 46 F4                  mov         word ptr -0xc[bp],ax 
0678    89 46 F6                  mov         word ptr -0xa[bp],ax 
067B    89 46 F8                  mov         word ptr -0x8[bp],ax 
067E    89 46 FA                  mov         word ptr -0x6[bp],ax 
0681    89 46 FC                  mov         word ptr -0x4[bp],ax 
0684    B8 10 00                  mov         ax,0x0010 
0687    50                        push        ax 
0688    8D 46 EE                  lea         ax,-0x12[bp] 
068B    50                        push        ax 
068C    56                        push        si 
068D    31 C0                     xor         ax,ax 
068F    50                        push        ax 
0690    B8 F0 9F                  mov         ax,0x9ff0 
0693    50                        push        ax 
0694    E8 00 00                  call        _memcpyb 
0697    83 C4 0A                  add         sp,0x000a 
069A    B8 01 00                  mov         ax,0x0001 
069D    E9 93 00                  jmp         L$61 
06A0                          L$58:
06A0    B8 00 F1                  mov         ax,0xf100 
06A3    50                        push        ax 
06A4    E8 00 00                  call        _inb 
06A7    83 C4 02                  add         sp,0x0002 
06AA    84 C0                     test        al,al 
06AC    74 07                     je          L$59 
06AE    B8 01 00                  mov         ax,0x0001 
06B1    31 F6                     xor         si,si 
06B3    EB 05                     jmp         L$60 
06B5                          L$59:
06B5    30 E4                     xor         ah,ah 
06B7    BE 01 00                  mov         si,0x0001 
06BA                          L$60:
06BA    C7 46 EE 02 00            mov         word ptr -0x12[bp],0x0002 
06BF    C7 46 F0 00 00            mov         word ptr -0x10[bp],0x0000 
06C4    C7 46 F2 00 00            mov         word ptr -0xe[bp],0x0000 
06C9    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
06CE    C7 46 F6 00 00            mov         word ptr -0xa[bp],0x0000 
06D3    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
06D8    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
06DD    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
06E2    BA 10 00                  mov         dx,0x0010 
06E5    52                        push        dx 
06E6    8D 56 EE                  lea         dx,-0x12[bp] 
06E9    89 56 FE                  mov         word ptr -0x2[bp],dx 
06EC    52                        push        dx 
06ED    57                        push        di 
06EE    B1 04                     mov         cl,0x04 
06F0    D3 E0                     shl         ax,cl 
06F2    50                        push        ax 
06F3    B8 F0 9F                  mov         ax,0x9ff0 
06F6    50                        push        ax 
06F7    E8 00 00                  call        _memcpyb 
06FA    83 C4 0A                  add         sp,0x000a 
06FD    C7 46 EE 01 00            mov         word ptr -0x12[bp],0x0001 
0702    31 C0                     xor         ax,ax 
0704    89 46 F0                  mov         word ptr -0x10[bp],ax 
0707    89 46 F2                  mov         word ptr -0xe[bp],ax 
070A    89 46 F4                  mov         word ptr -0xc[bp],ax 
070D    89 46 F6                  mov         word ptr -0xa[bp],ax 
0710    89 46 F8                  mov         word ptr -0x8[bp],ax 
0713    89 46 FA                  mov         word ptr -0x6[bp],ax 
0716    89 46 FC                  mov         word ptr -0x4[bp],ax 
0719    B8 10 00                  mov         ax,0x0010 
071C    50                        push        ax 
071D    FF 76 FE                  push        word ptr -0x2[bp] 
0720    57                        push        di 
0721    B1 04                     mov         cl,0x04 
0723    D3 E6                     shl         si,cl 
0725    56                        push        si 
0726    B8 F0 9F                  mov         ax,0x9ff0 
0729    50                        push        ax 
072A    E8 00 00                  call        _memcpyb 
072D    83 C4 0A                  add         sp,0x000a 
0730    B8 02 00                  mov         ax,0x0002 
0733                          L$61:
0733    50                        push        ax 
0734    B8 80 00                  mov         ax,0x0080 
0737    50                        push        ax 
0738    B8 F0 9F                  mov         ax,0x9ff0 
073B    50                        push        ax 
073C    E8 00 00                  call        _write_word 
073F    83 C4 06                  add         sp,0x0006 
0742    B8 01 00                  mov         ax,0x0001 
0745    50                        push        ax 
0746    B8 82 00                  mov         ax,0x0082 
0749    50                        push        ax 
074A    B8 F0 9F                  mov         ax,0x9ff0 
074D    50                        push        ax 
074E    E8 00 00                  call        _write_word 
0751    83 C4 06                  add         sp,0x0006 
0754    89 EC                     mov         sp,bp 
0756    5D                        pop         bp 
0757    5F                        pop         di 
0758    5E                        pop         si 
0759    C3                        ret         
075A                          _print_boot_failure:
075A    56                        push        si 
075B    55                        push        bp 
075C    89 E5                     mov         bp,sp 
075E    8B 76 06                  mov         si,word ptr 0x6[bp] 
0761    85 F6                     test        si,si 
0763    74 05                     je          L$62 
0765    83 FE 03                  cmp         si,0x0003 
0768    76 0E                     jbe         L$63 
076A                          L$62:
076A    B8 A8 00                  mov         ax,offset DGROUP:L$366 
076D    50                        push        ax 
076E    B8 07 00                  mov         ax,0x0007 
0771    50                        push        ax 
0772    E8 00 00                  call        _bios_printf 
0775    83 C4 04                  add         sp,0x0004 
0778                          L$63:
0778    B8 B8 00                  mov         ax,offset DGROUP:L$367 
077B    50                        push        ax 
077C    B8 02 00                  mov         ax,0x0002 
077F    50                        push        ax 
0780    E8 00 00                  call        _bios_printf 
0783    83 C4 04                  add         sp,0x0004 
0786    83 FE 04                  cmp         si,0x0004 
0789    73 19                     jae         L$66 
078B    80 7E 08 00               cmp         byte ptr 0x8[bp],0x00 
078F    75 05                     jne         L$64 
0791    B8 C4 00                  mov         ax,offset DGROUP:L$368 
0794    EB 03                     jmp         L$65 
0796                          L$64:
0796    B8 DA 00                  mov         ax,offset DGROUP:L$369 
0799                          L$65:
0799    50                        push        ax 
079A    B8 02 00                  mov         ax,0x0002 
079D    50                        push        ax 
079E    E8 00 00                  call        _bios_printf 
07A1    83 C4 04                  add         sp,0x0004 
07A4                          L$66:
07A4    B8 F9 00                  mov         ax,offset DGROUP:L$370 
07A7    50                        push        ax 
07A8    B8 02 00                  mov         ax,0x0002 
07AB    50                        push        ax 
07AC    E8 00 00                  call        _bios_printf 
07AF    83 C4 04                  add         sp,0x0004 
07B2    5D                        pop         bp 
07B3    5E                        pop         si 
07B4    C3                        ret         
07B5    FC                        cld         
07B6                          _dequeue_key:
07B6    56                        push        si 
07B7    57                        push        di 
07B8    55                        push        bp 
07B9    89 E5                     mov         bp,sp 
07BB    83 EC 02                  sub         sp,0x0002 
07BE    B8 80 00                  mov         ax,0x0080 
07C1    50                        push        ax 
07C2    B8 40 00                  mov         ax,0x0040 
07C5    50                        push        ax 
07C6    E8 00 00                  call        _read_word 
07C9    89 C7                     mov         di,ax 
07CB    83 C4 04                  add         sp,0x0004 
07CE    B8 82 00                  mov         ax,0x0082 
07D1    50                        push        ax 
07D2    B8 40 00                  mov         ax,0x0040 
07D5    50                        push        ax 
07D6    E8 00 00                  call        _read_word 
07D9    89 46 FE                  mov         word ptr -0x2[bp],ax 
07DC    83 C4 04                  add         sp,0x0004 
07DF    B8 1A 00                  mov         ax,0x001a 
07E2    50                        push        ax 
07E3    B8 40 00                  mov         ax,0x0040 
07E6    50                        push        ax 
07E7    E8 00 00                  call        _read_word 
07EA    89 C6                     mov         si,ax 
07EC    83 C4 04                  add         sp,0x0004 
07EF    B8 1C 00                  mov         ax,0x001c 
07F2    50                        push        ax 
07F3    B8 40 00                  mov         ax,0x0040 
07F6    50                        push        ax 
07F7    E8 00 00                  call        _read_word 
07FA    83 C4 04                  add         sp,0x0004 
07FD    39 C6                     cmp         si,ax 
07FF    74 51                     je          L$69 
0801    56                        push        si 
0802    B8 40 00                  mov         ax,0x0040 
0805    50                        push        ax 
0806    E8 00 00                  call        _read_byte 
0809    83 C4 04                  add         sp,0x0004 
080C    8C D2                     mov         dx,ss 
080E    8E C2                     mov         es,dx 
0810    8B 5E 0A                  mov         bx,word ptr 0xa[bp] 
0813    26 88 07                  mov         byte ptr es:[bx],al 
0816    89 F0                     mov         ax,si 
0818    40                        inc         ax 
0819    50                        push        ax 
081A    B8 40 00                  mov         ax,0x0040 
081D    50                        push        ax 
081E    E8 00 00                  call        _read_byte 
0821    83 C4 04                  add         sp,0x0004 
0824    8C D2                     mov         dx,ss 
0826    8E C2                     mov         es,dx 
0828    8B 5E 08                  mov         bx,word ptr 0x8[bp] 
082B    26 88 07                  mov         byte ptr es:[bx],al 
082E    83 7E 0C 00               cmp         word ptr 0xc[bp],0x0000 
0832    74 19                     je          L$68 
0834    83 C6 02                  add         si,0x0002 
0837    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
083A    72 02                     jb          L$67 
083C    89 FE                     mov         si,di 
083E                          L$67:
083E    56                        push        si 
083F    B8 1A 00                  mov         ax,0x001a 
0842    50                        push        ax 
0843    B8 40 00                  mov         ax,0x0040 
0846    50                        push        ax 
0847    E8 00 00                  call        _write_word 
084A    83 C4 06                  add         sp,0x0006 
084D                          L$68:
084D    BE 01 00                  mov         si,0x0001 
0850    EB 02                     jmp         L$70 
0852                          L$69:
0852    31 C6                     xor         si,ax 
0854                          L$70:
0854    89 F0                     mov         ax,si 
0856    89 EC                     mov         sp,bp 
0858    5D                        pop         bp 
0859    5F                        pop         di 
085A    5E                        pop         si 
085B    C3                        ret         

Routine Size: 586 bytes,    Routine Base: _TEXT + 0612

085C                          _int16_function:
085C    56                        push        si 
085D    57                        push        di 
085E    55                        push        bp 
085F    89 E5                     mov         bp,sp 
0861    83 EC 08                  sub         sp,0x0008 
0864    B8 17 00                  mov         ax,0x0017 
0867    50                        push        ax 
0868    B8 40 00                  mov         ax,0x0040 
086B    50                        push        ax 
086C    E8 00 00                  call        _read_byte 
086F    83 C4 04                  add         sp,0x0004 
0872    88 46 FE                  mov         byte ptr -0x2[bp],al 
0875    B8 97 00                  mov         ax,0x0097 
0878    50                        push        ax 
0879    B8 40 00                  mov         ax,0x0040 
087C    50                        push        ax 
087D    E8 00 00                  call        _read_byte 
0880    83 C4 04                  add         sp,0x0004 
0883    B1 08                     mov         cl,0x08 
0885    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0888    D3 E8                     shr         ax,cl 
088A    3D 10 00                  cmp         ax,0x0010 
088D    72 23                     jb          L$72 
088F    76 35                     jbe         L$73 
0891    3D 6F 00                  cmp         ax,0x006f 
0894    72 0F                     jb          L$71 
0896    76 31                     jbe         L$74 
0898    3D A2 00                  cmp         ax,0x00a2 
089B    74 2F                     je          L$75 
089D    3D 92 00                  cmp         ax,0x0092 
08A0    74 2D                     je          L$76 
08A2    E9 3A 02                  jmp         L$107 
08A5                          L$71:
08A5    3D 12 00                  cmp         ax,0x0012 
08A8    74 28                     je          L$77 
08AA    3D 11 00                  cmp         ax,0x0011 
08AD    74 26                     je          L$78 
08AF    E9 2D 02                  jmp         L$107 
08B2                          L$72:
08B2    3D 02 00                  cmp         ax,0x0002 
08B5    72 2A                     jb          L$82 
08B7    76 1F                     jbe         L$79 
08B9    3D 09 00                  cmp         ax,0x0009 
08BC    74 1D                     je          L$80 
08BE    3D 05 00                  cmp         ax,0x0005 
08C1    74 1B                     je          L$81 
08C3    E9 19 02                  jmp         L$107 
08C6                          L$73:
08C6    E9 16 01                  jmp         L$97 
08C9                          L$74:
08C9    E9 03 02                  jmp         L$106 
08CC                          L$75:
08CC    E9 26 02                  jmp         L$108 
08CF                          L$76:
08CF    E9 F1 01                  jmp         L$105 
08D2                          L$77:
08D2    E9 A1 01                  jmp         L$104 
08D5                          L$78:
08D5    E9 52 01                  jmp         L$100 
08D8                          L$79:
08D8    E9 AA 00                  jmp         L$92 
08DB                          L$80:
08DB    E9 F5 00                  jmp         L$96 
08DE                          L$81:
08DE    E9 C3 00                  jmp         L$93 
08E1                          L$82:
08E1    3D 01 00                  cmp         ax,0x0001 
08E4    74 58                     je          L$88 
08E6    85 C0                     test        ax,ax 
08E8    75 51                     jne         L$87 
08EA    B8 01 00                  mov         ax,0x0001 
08ED    50                        push        ax 
08EE    8D 46 FC                  lea         ax,-0x4[bp] 
08F1    50                        push        ax 
08F2    8D 46 FA                  lea         ax,-0x6[bp] 
08F5    50                        push        ax 
08F6    E8 00 00                  call        _dequeue_key 
08F9    83 C4 06                  add         sp,0x0006 
08FC    85 C0                     test        ax,ax 
08FE    75 0E                     jne         L$83 
0900    B8 FC 00                  mov         ax,offset DGROUP:L$371 
0903    50                        push        ax 
0904    B8 07 00                  mov         ax,0x0007 
0907    50                        push        ax 
0908    E8 00 00                  call        _bios_printf 
090B    83 C4 04                  add         sp,0x0004 
090E                          L$83:
090E    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
0912    74 06                     je          L$84 
0914    80 7E FC F0               cmp         byte ptr -0x4[bp],0xf0 
0918    74 06                     je          L$85 
091A                          L$84:
091A    80 7E FC E0               cmp         byte ptr -0x4[bp],0xe0 
091E    75 04                     jne         L$86 
0920                          L$85:
0920    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0924                          L$86:
0924    8A 76 FA                  mov         dh,byte ptr -0x6[bp] 
0927    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
092A    89 56 F8                  mov         word ptr -0x8[bp],dx 
092D    8B 86 F8 FF               mov         ax,word ptr -0x8[bp] 
0931    89 86 08 00               mov         word ptr 0x8[bp],ax 
0935    89 EC                     mov         sp,bp 
0937    5D                        pop         bp 
0938    5F                        pop         di 
0939    5E                        pop         si 
093A    C3                        ret         
093B                          L$87:
093B    E9 A1 01                  jmp         L$107 
093E                          L$88:
093E    31 C0                     xor         ax,ax 
0940    50                        push        ax 
0941    8D 46 FC                  lea         ax,-0x4[bp] 
0944    50                        push        ax 
0945    8D 46 FA                  lea         ax,-0x6[bp] 
0948    50                        push        ax 
0949    E8 00 00                  call        _dequeue_key 
094C    83 C4 06                  add         sp,0x0006 
094F    85 C0                     test        ax,ax 
0951    74 71                     je          L$94 
0953    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
0957    74 06                     je          L$89 
0959    80 7E FC F0               cmp         byte ptr -0x4[bp],0xf0 
095D    74 06                     je          L$90 
095F                          L$89:
095F    80 7E FC E0               cmp         byte ptr -0x4[bp],0xe0 
0963    75 04                     jne         L$91 
0965                          L$90:
0965    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0969                          L$91:
0969    8A 76 FA                  mov         dh,byte ptr -0x6[bp] 
096C    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
096F    89 56 F8                  mov         word ptr -0x8[bp],dx 
0972    8B 86 F8 FF               mov         ax,word ptr -0x8[bp] 
0976    89 86 08 00               mov         word ptr 0x8[bp],ax 
097A    83 A6 0C 00 BF            and         word ptr 0xc[bp],0xffbf 
097F    89 EC                     mov         sp,bp 
0981    5D                        pop         bp 
0982    5F                        pop         di 
0983    5E                        pop         si 
0984    C3                        ret         
0985                          L$92:
0985    B8 17 00                  mov         ax,0x0017 
0988    50                        push        ax 
0989    B8 40 00                  mov         ax,0x0040 
098C    50                        push        ax 
098D    E8 00 00                  call        _read_byte 
0990    83 C4 04                  add         sp,0x0004 
0993    88 46 FE                  mov         byte ptr -0x2[bp],al 
0996    8A 86 FE FF               mov         al,byte ptr -0x2[bp] 
099A    89 86 08 00               mov         word ptr 0x8[bp],ax 
099E    89 EC                     mov         sp,bp 
09A0    5D                        pop         bp 
09A1    5F                        pop         di 
09A2    5E                        pop         si 
09A3    C3                        ret         
09A4                          L$93:
09A4    8A 46 0A                  mov         al,byte ptr 0xa[bp] 
09A7    30 E4                     xor         ah,ah 
09A9    50                        push        ax 
09AA    8A 46 0B                  mov         al,byte ptr 0xb[bp] 
09AD    50                        push        ax 
09AE    E8 00 00                  call        _enqueue_key 
09B1    83 C4 04                  add         sp,0x0004 
09B4    85 C0                     test        ax,ax 
09B6    75 0F                     jne         L$95 
09B8    B0 01                     mov         al,0x01 
09BA    89 86 08 00               mov         word ptr 0x8[bp],ax 
09BE    89 EC                     mov         sp,bp 
09C0    5D                        pop         bp 
09C1    5F                        pop         di 
09C2    5E                        pop         si 
09C3    C3                        ret         
09C4                          L$94:
09C4    E9 78 00                  jmp         L$101 
09C7                          L$95:
09C7    B0 00                     mov         al,0x00 
09C9    89 86 08 00               mov         word ptr 0x8[bp],ax 
09CD    89 EC                     mov         sp,bp 
09CF    5D                        pop         bp 
09D0    5F                        pop         di 
09D1    5E                        pop         si 
09D2    C3                        ret         
09D3                          L$96:
09D3    B0 30                     mov         al,0x30 
09D5    89 86 08 00               mov         word ptr 0x8[bp],ax 
09D9    89 EC                     mov         sp,bp 
09DB    5D                        pop         bp 
09DC    5F                        pop         di 
09DD    5E                        pop         si 
09DE    C3                        ret         
09DF                          L$97:
09DF    B8 01 00                  mov         ax,0x0001 
09E2    50                        push        ax 
09E3    8D 46 FC                  lea         ax,-0x4[bp] 
09E6    50                        push        ax 
09E7    8D 46 FA                  lea         ax,-0x6[bp] 
09EA    50                        push        ax 
09EB    E8 00 00                  call        _dequeue_key 
09EE    83 C4 06                  add         sp,0x0006 
09F1    85 C0                     test        ax,ax 
09F3    75 0E                     jne         L$98 
09F5    B8 FC 00                  mov         ax,offset DGROUP:L$371 
09F8    50                        push        ax 
09F9    B8 07 00                  mov         ax,0x0007 
09FC    50                        push        ax 
09FD    E8 00 00                  call        _bios_printf 
0A00    83 C4 04                  add         sp,0x0004 
0A03                          L$98:
0A03    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
0A07    74 0A                     je          L$99 
0A09    80 7E FC F0               cmp         byte ptr -0x4[bp],0xf0 
0A0D    75 04                     jne         L$99 
0A0F    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0A13                          L$99:
0A13    8A 66 FA                  mov         ah,byte ptr -0x6[bp] 
0A16    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0A19    89 46 F8                  mov         word ptr -0x8[bp],ax 
0A1C    8B 86 F8 FF               mov         ax,word ptr -0x8[bp] 
0A20    89 86 08 00               mov         word ptr 0x8[bp],ax 
0A24    89 EC                     mov         sp,bp 
0A26    5D                        pop         bp 
0A27    5F                        pop         di 
0A28    5E                        pop         si 
0A29    C3                        ret         
0A2A                          L$100:
0A2A    31 C0                     xor         ax,ax 
0A2C    50                        push        ax 
0A2D    8D 46 FC                  lea         ax,-0x4[bp] 
0A30    50                        push        ax 
0A31    8D 46 FA                  lea         ax,-0x6[bp] 
0A34    50                        push        ax 
0A35    E8 00 00                  call        _dequeue_key 
0A38    83 C4 06                  add         sp,0x0006 
0A3B    85 C0                     test        ax,ax 
0A3D    75 0B                     jne         L$102 
0A3F                          L$101:
0A3F    83 8E 0C 00 40            or          word ptr 0xc[bp],0x0040 
0A44    89 EC                     mov         sp,bp 
0A46    5D                        pop         bp 
0A47    5F                        pop         di 
0A48    5E                        pop         si 
0A49    C3                        ret         
0A4A                          L$102:
0A4A    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
0A4E    74 0A                     je          L$103 
0A50    80 7E FC F0               cmp         byte ptr -0x4[bp],0xf0 
0A54    75 04                     jne         L$103 
0A56    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0A5A                          L$103:
0A5A    8A 66 FA                  mov         ah,byte ptr -0x6[bp] 
0A5D    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0A60    89 46 F8                  mov         word ptr -0x8[bp],ax 
0A63    8B 86 F8 FF               mov         ax,word ptr -0x8[bp] 
0A67    89 86 08 00               mov         word ptr 0x8[bp],ax 
0A6B    83 A6 0C 00 BF            and         word ptr 0xc[bp],0xffbf 
0A70    89 EC                     mov         sp,bp 
0A72    5D                        pop         bp 
0A73    5F                        pop         di 
0A74    5E                        pop         si 
0A75    C3                        ret         
0A76                          L$104:
0A76    B8 17 00                  mov         ax,0x0017 
0A79    50                        push        ax 
0A7A    B8 40 00                  mov         ax,0x0040 
0A7D    50                        push        ax 
0A7E    E8 00 00                  call        _read_byte 
0A81    83 C4 04                  add         sp,0x0004 
0A84    88 46 FE                  mov         byte ptr -0x2[bp],al 
0A87    8A 86 FE FF               mov         al,byte ptr -0x2[bp] 
0A8B    89 86 08 00               mov         word ptr 0x8[bp],ax 
0A8F    B8 18 00                  mov         ax,0x0018 
0A92    50                        push        ax 
0A93    B8 40 00                  mov         ax,0x0040 
0A96    50                        push        ax 
0A97    E8 00 00                  call        _read_byte 
0A9A    83 C4 04                  add         sp,0x0004 
0A9D    24 73                     and         al,0x73 
0A9F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0AA2    B8 96 00                  mov         ax,0x0096 
0AA5    50                        push        ax 
0AA6    B8 40 00                  mov         ax,0x0040 
0AA9    50                        push        ax 
0AAA    E8 00 00                  call        _read_byte 
0AAD    83 C4 04                  add         sp,0x0004 
0AB0    24 0C                     and         al,0x0c 
0AB2    08 46 FE                  or          byte ptr -0x2[bp],al 
0AB5    8A 86 FE FF               mov         al,byte ptr -0x2[bp] 
0AB9    89 86 08 00               mov         word ptr 0x8[bp],ax 
0ABD    89 EC                     mov         sp,bp 
0ABF    5D                        pop         bp 
0AC0    5F                        pop         di 
0AC1    5E                        pop         si 
0AC2    C3                        ret         
0AC3                          L$105:
0AC3    B0 80                     mov         al,0x80 
0AC5    89 86 08 00               mov         word ptr 0x8[bp],ax 
0AC9    89 EC                     mov         sp,bp 
0ACB    5D                        pop         bp 
0ACC    5F                        pop         di 
0ACD    5E                        pop         si 
0ACE    C3                        ret         
0ACF                          L$106:
0ACF    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0AD2    30 E4                     xor         ah,ah 
0AD4    3D 08 00                  cmp         ax,0x0008 
0AD7    75 06                     jne         L$107 
0AD9    B0 02                     mov         al,0x02 
0ADB    89 86 08 00               mov         word ptr 0x8[bp],ax 
0ADF                          L$107:
0ADF    B1 08                     mov         cl,0x08 
0AE1    8B 46 08                  mov         ax,word ptr 0x8[bp] 
0AE4    D3 E8                     shr         ax,cl 
0AE6    50                        push        ax 
0AE7    B8 20 01                  mov         ax,offset DGROUP:L$372 
0AEA    50                        push        ax 
0AEB    B8 04 00                  mov         ax,0x0004 
0AEE    50                        push        ax 
0AEF    E8 00 00                  call        _bios_printf 
0AF2    83 C4 06                  add         sp,0x0006 
0AF5                          L$108:
0AF5    89 EC                     mov         sp,bp 
0AF7    5D                        pop         bp 
0AF8    5F                        pop         di 
0AF9    5E                        pop         si 
0AFA    C3                        ret         
0AFB    FC                        cld         
0AFC                          _enqueue_key:
0AFC    56                        push        si 
0AFD    57                        push        di 
0AFE    55                        push        bp 
0AFF    89 E5                     mov         bp,sp 
0B01    83 EC 06                  sub         sp,0x0006 
0B04    B8 80 00                  mov         ax,0x0080 
0B07    50                        push        ax 
0B08    B8 40 00                  mov         ax,0x0040 
0B0B    50                        push        ax 
0B0C    E8 00 00                  call        _read_word 
0B0F    89 46 FA                  mov         word ptr -0x6[bp],ax 
0B12    83 C4 04                  add         sp,0x0004 
0B15    B8 82 00                  mov         ax,0x0082 
0B18    50                        push        ax 
0B19    B8 40 00                  mov         ax,0x0040 
0B1C    50                        push        ax 
0B1D    E8 00 00                  call        _read_word 
0B20    89 C7                     mov         di,ax 
0B22    83 C4 04                  add         sp,0x0004 
0B25    B8 1A 00                  mov         ax,0x001a 
0B28    50                        push        ax 
0B29    B8 40 00                  mov         ax,0x0040 
0B2C    50                        push        ax 
0B2D    E8 00 00                  call        _read_word 
0B30    83 C4 04                  add         sp,0x0004 
0B33    89 46 FC                  mov         word ptr -0x4[bp],ax 
0B36    B8 1C 00                  mov         ax,0x001c 
0B39    50                        push        ax 
0B3A    B8 40 00                  mov         ax,0x0040 
0B3D    50                        push        ax 
0B3E    E8 00 00                  call        _read_word 
0B41    83 C4 04                  add         sp,0x0004 
0B44    89 46 FE                  mov         word ptr -0x2[bp],ax 
0B47    89 C6                     mov         si,ax 
0B49    83 C6 02                  add         si,0x0002 
0B4C    39 FE                     cmp         si,di 
0B4E    72 03                     jb          L$109 
0B50    8B 76 FA                  mov         si,word ptr -0x6[bp] 
0B53                          L$109:
0B53    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
0B56    75 04                     jne         L$110 
0B58    31 C0                     xor         ax,ax 
0B5A    EB 3A                     jmp         L$111 
0B5C                          L$110:
0B5C    8A 46 0A                  mov         al,byte ptr 0xa[bp] 
0B5F    30 E4                     xor         ah,ah 
0B61    50                        push        ax 
0B62    FF 76 FE                  push        word ptr -0x2[bp] 
0B65    B8 40 00                  mov         ax,0x0040 
0B68    50                        push        ax 
0B69    E8 00 00                  call        _write_byte 
0B6C    83 C4 06                  add         sp,0x0006 
0B6F    8A 46 08                  mov         al,byte ptr 0x8[bp] 
0B72    30 E4                     xor         ah,ah 
0B74    50                        push        ax 
0B75    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0B78    40                        inc         ax 
0B79    50                        push        ax 
0B7A    B8 40 00                  mov         ax,0x0040 
0B7D    50                        push        ax 
0B7E    E8 00 00                  call        _write_byte 
0B81    83 C4 06                  add         sp,0x0006 
0B84    56                        push        si 
0B85    B8 1C 00                  mov         ax,0x001c 
0B88    50                        push        ax 
0B89    B8 40 00                  mov         ax,0x0040 
0B8C    50                        push        ax 
0B8D    E8 00 00                  call        _write_word 
0B90    83 C4 06                  add         sp,0x0006 
0B93    B8 01 00                  mov         ax,0x0001 
0B96                          L$111:
0B96    89 EC                     mov         sp,bp 
0B98    5D                        pop         bp 
0B99    5F                        pop         di 
0B9A    5E                        pop         si 
0B9B    C3                        ret         

Routine Size: 832 bytes,    Routine Base: _TEXT + 085C

0B9C                          _int09_function:
0B9C    55                        push        bp 
0B9D    89 E5                     mov         bp,sp 
0B9F    83 EC 10                  sub         sp,0x0010 
0BA2    8A 46 04                  mov         al,byte ptr 0x4[bp] 
0BA5    88 46 FA                  mov         byte ptr -0x6[bp],al 
0BA8    84 C0                     test        al,al 
0BAA    75 11                     jne         L$112 
0BAC    B8 48 01                  mov         ax,offset DGROUP:L$373 
0BAF    50                        push        ax 
0BB0    B8 04 00                  mov         ax,0x0004 
0BB3    50                        push        ax 
0BB4    E8 00 00                  call        _bios_printf 
0BB7    83 C4 04                  add         sp,0x0004 
0BBA    E9 C3 04                  jmp         L$164 
0BBD                          L$112:
0BBD    B8 17 00                  mov         ax,0x0017 
0BC0    50                        push        ax 
0BC1    B8 40 00                  mov         ax,0x0040 
0BC4    50                        push        ax 
0BC5    E8 00 00                  call        _read_byte 
0BC8    88 46 FC                  mov         byte ptr -0x4[bp],al 
0BCB    83 C4 04                  add         sp,0x0004 
0BCE    88 46 F0                  mov         byte ptr -0x10[bp],al 
0BD1    B8 18 00                  mov         ax,0x0018 
0BD4    50                        push        ax 
0BD5    B8 40 00                  mov         ax,0x0040 
0BD8    50                        push        ax 
0BD9    E8 00 00                  call        _read_byte 
0BDC    88 46 F6                  mov         byte ptr -0xa[bp],al 
0BDF    83 C4 04                  add         sp,0x0004 
0BE2    88 46 FE                  mov         byte ptr -0x2[bp],al 
0BE5    B8 96 00                  mov         ax,0x0096 
0BE8    50                        push        ax 
0BE9    B8 40 00                  mov         ax,0x0040 
0BEC    50                        push        ax 
0BED    E8 00 00                  call        _read_byte 
0BF0    88 46 F2                  mov         byte ptr -0xe[bp],al 
0BF3    83 C4 04                  add         sp,0x0004 
0BF6    88 46 F8                  mov         byte ptr -0x8[bp],al 
0BF9    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0BFC    3C 46                     cmp         al,0x46 
0BFE    72 26                     jb          L$114 
0C00    76 44                     jbe         L$116 
0C02    3C B8                     cmp         al,0xb8 
0C04    72 11                     jb          L$113 
0C06    76 41                     jbe         L$117 
0C08    3C C6                     cmp         al,0xc6 
0C0A    74 40                     je          L$118 
0C0C    3C C5                     cmp         al,0xc5 
0C0E    74 3F                     je          L$119 
0C10    3C BA                     cmp         al,0xba 
0C12    74 3E                     je          L$120 
0C14    E9 25 03                  jmp         L$150 
0C17                          L$113:
0C17    3C B6                     cmp         al,0xb6 
0C19    74 39                     je          L$121 
0C1B    3C AA                     cmp         al,0xaa 
0C1D    74 38                     je          L$122 
0C1F    3C 9D                     cmp         al,0x9d 
0C21    74 36                     je          L$123 
0C23    E9 16 03                  jmp         L$150 
0C26                          L$114:
0C26    3C 36                     cmp         al,0x36 
0C28    72 11                     jb          L$115 
0C2A    76 63                     jbe         L$125 
0C2C    3C 45                     cmp         al,0x45 
0C2E    74 61                     je          L$126 
0C30    3C 3A                     cmp         al,0x3a 
0C32    74 28                     je          L$124 
0C34    3C 38                     cmp         al,0x38 
0C36    74 5C                     je          L$127 
0C38    E9 01 03                  jmp         L$150 
0C3B                          L$115:
0C3B    3C 2A                     cmp         al,0x2a 
0C3D    74 76                     je          L$130 
0C3F    3C 1D                     cmp         al,0x1d 
0C41    74 70                     je          L$129 
0C43    E9 F6 02                  jmp         L$150 
0C46                          L$116:
0C46    E9 9C 02                  jmp         L$147 
0C49                          L$117:
0C49    E9 E3 01                  jmp         L$142 
0C4C                          L$118:
0C4C    E9 CF 02                  jmp         L$148 
0C4F                          L$119:
0C4F    E9 6F 02                  jmp         L$145 
0C52                          L$120:
0C52    EB 43                     jmp         L$128 
0C54                          L$121:
0C54    E9 B0 00                  jmp         L$133 
0C57                          L$122:
0C57    EB 77                     jmp         L$131 
0C59                          L$123:
0C59    E9 21 01                  jmp         L$137 
0C5C                          L$124:
0C5C    80 76 F0 40               xor         byte ptr -0x10[bp],0x40 
0C60    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0C63    30 E4                     xor         ah,ah 
0C65    50                        push        ax 
0C66    B8 17 00                  mov         ax,0x0017 
0C69    50                        push        ax 
0C6A    B8 40 00                  mov         ax,0x0040 
0C6D    50                        push        ax 
0C6E    E8 00 00                  call        _write_byte 
0C71    83 C4 06                  add         sp,0x0006 
0C74    80 4E FE 40               or          byte ptr -0x2[bp],0x40 
0C78    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0C7B    30 E4                     xor         ah,ah 
0C7D    50                        push        ax 
0C7E    B8 18 00                  mov         ax,0x0018 
0C81    50                        push        ax 
0C82    B8 40 00                  mov         ax,0x0040 
0C85    50                        push        ax 
0C86    E8 00 00                  call        _write_byte 
0C89    83 C4 06                  add         sp,0x0006 
0C8C    E9 CC 03                  jmp         L$161 
0C8F                          L$125:
0C8F    EB 5B                     jmp         L$132 
0C91                          L$126:
0C91    E9 F4 01                  jmp         L$144 
0C94                          L$127:
0C94    E9 43 01                  jmp         L$140 
0C97                          L$128:
0C97    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0C9A    24 BF                     and         al,0xbf 
0C9C    88 46 FE                  mov         byte ptr -0x2[bp],al 
0C9F    30 E4                     xor         ah,ah 
0CA1    50                        push        ax 
0CA2    B8 18 00                  mov         ax,0x0018 
0CA5    50                        push        ax 
0CA6    B8 40 00                  mov         ax,0x0040 
0CA9    50                        push        ax 
0CAA    E8 00 00                  call        _write_byte 
0CAD    83 C4 06                  add         sp,0x0006 
0CB0    E9 A8 03                  jmp         L$161 
0CB3                          L$129:
0CB3    EB 6E                     jmp         L$134 
0CB5                          L$130:
0CB5    80 4E F0 02               or          byte ptr -0x10[bp],0x02 
0CB9    8A 5E F0                  mov         bl,byte ptr -0x10[bp] 
0CBC    30 FF                     xor         bh,bh 
0CBE    53                        push        bx 
0CBF    B8 17 00                  mov         ax,0x0017 
0CC2    50                        push        ax 
0CC3    B8 40 00                  mov         ax,0x0040 
0CC6    50                        push        ax 
0CC7    E8 00 00                  call        _write_byte 
0CCA    83 C4 06                  add         sp,0x0006 
0CCD    E9 8B 03                  jmp         L$161 
0CD0                          L$131:
0CD0    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0CD3    24 FD                     and         al,0xfd 
0CD5    88 46 F0                  mov         byte ptr -0x10[bp],al 
0CD8    30 E4                     xor         ah,ah 
0CDA    50                        push        ax 
0CDB    B8 17 00                  mov         ax,0x0017 
0CDE    50                        push        ax 
0CDF    B8 40 00                  mov         ax,0x0040 
0CE2    50                        push        ax 
0CE3    E8 00 00                  call        _write_byte 
0CE6    83 C4 06                  add         sp,0x0006 
0CE9    E9 6F 03                  jmp         L$161 
0CEC                          L$132:
0CEC    80 4E F0 01               or          byte ptr -0x10[bp],0x01 
0CF0    8A 5E F0                  mov         bl,byte ptr -0x10[bp] 
0CF3    30 FF                     xor         bh,bh 
0CF5    53                        push        bx 
0CF6    B8 17 00                  mov         ax,0x0017 
0CF9    50                        push        ax 
0CFA    B8 40 00                  mov         ax,0x0040 
0CFD    50                        push        ax 
0CFE    E8 00 00                  call        _write_byte 
0D01    83 C4 06                  add         sp,0x0006 
0D04    E9 54 03                  jmp         L$161 
0D07                          L$133:
0D07    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0D0A    24 FE                     and         al,0xfe 
0D0C    88 46 F0                  mov         byte ptr -0x10[bp],al 
0D0F    30 E4                     xor         ah,ah 
0D11    50                        push        ax 
0D12    B8 17 00                  mov         ax,0x0017 
0D15    50                        push        ax 
0D16    B8 40 00                  mov         ax,0x0040 
0D19    50                        push        ax 
0D1A    E8 00 00                  call        _write_byte 
0D1D    83 C4 06                  add         sp,0x0006 
0D20    E9 38 03                  jmp         L$161 
0D23                          L$134:
0D23    F6 46 F8 01               test        byte ptr -0x8[bp],0x01 
0D27    75 51                     jne         L$136 
0D29    80 4E F0 04               or          byte ptr -0x10[bp],0x04 
0D2D    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0D30    30 E4                     xor         ah,ah 
0D32    50                        push        ax 
0D33    B8 17 00                  mov         ax,0x0017 
0D36    50                        push        ax 
0D37    B8 40 00                  mov         ax,0x0040 
0D3A    50                        push        ax 
0D3B    E8 00 00                  call        _write_byte 
0D3E    83 C4 06                  add         sp,0x0006 
0D41    F6 46 F8 02               test        byte ptr -0x8[bp],0x02 
0D45    74 1B                     je          L$135 
0D47    80 4E F8 04               or          byte ptr -0x8[bp],0x04 
0D4B    8A 5E F8                  mov         bl,byte ptr -0x8[bp] 
0D4E    30 FF                     xor         bh,bh 
0D50    53                        push        bx 
0D51    B8 96 00                  mov         ax,0x0096 
0D54    50                        push        ax 
0D55    B8 40 00                  mov         ax,0x0040 
0D58    50                        push        ax 
0D59    E8 00 00                  call        _write_byte 
0D5C    83 C4 06                  add         sp,0x0006 
0D5F    E9 F9 02                  jmp         L$161 
0D62                          L$135:
0D62    80 4E FE 01               or          byte ptr -0x2[bp],0x01 
0D66    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
0D69    30 FF                     xor         bh,bh 
0D6B    53                        push        bx 
0D6C    B8 18 00                  mov         ax,0x0018 
0D6F    50                        push        ax 
0D70    B8 40 00                  mov         ax,0x0040 
0D73    50                        push        ax 
0D74    E8 00 00                  call        _write_byte 
0D77    83 C4 06                  add         sp,0x0006 
0D7A                          L$136:
0D7A    E9 DE 02                  jmp         L$161 
0D7D                          L$137:
0D7D    F6 46 F2 01               test        byte ptr -0xe[bp],0x01 
0D81    75 54                     jne         L$139 
0D83    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0D86    24 FB                     and         al,0xfb 
0D88    88 46 F0                  mov         byte ptr -0x10[bp],al 
0D8B    30 E4                     xor         ah,ah 
0D8D    50                        push        ax 
0D8E    B8 17 00                  mov         ax,0x0017 
0D91    50                        push        ax 
0D92    B8 40 00                  mov         ax,0x0040 
0D95    50                        push        ax 
0D96    E8 00 00                  call        _write_byte 
0D99    83 C4 06                  add         sp,0x0006 
0D9C    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0D9F    A8 02                     test        al,0x02 
0DA1    74 1B                     je          L$138 
0DA3    24 FB                     and         al,0xfb 
0DA5    88 46 F8                  mov         byte ptr -0x8[bp],al 
0DA8    88 C3                     mov         bl,al 
0DAA    30 FF                     xor         bh,bh 
0DAC    53                        push        bx 
0DAD    B8 96 00                  mov         ax,0x0096 
0DB0    50                        push        ax 
0DB1    B8 40 00                  mov         ax,0x0040 
0DB4    50                        push        ax 
0DB5    E8 00 00                  call        _write_byte 
0DB8    83 C4 06                  add         sp,0x0006 
0DBB    E9 9D 02                  jmp         L$161 
0DBE                          L$138:
0DBE    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0DC1    24 FE                     and         al,0xfe 
0DC3    88 46 FE                  mov         byte ptr -0x2[bp],al 
0DC6    30 E4                     xor         ah,ah 
0DC8    50                        push        ax 
0DC9    B8 18 00                  mov         ax,0x0018 
0DCC    50                        push        ax 
0DCD    B8 40 00                  mov         ax,0x0040 
0DD0    50                        push        ax 
0DD1    E8 00 00                  call        _write_byte 
0DD4    83 C4 06                  add         sp,0x0006 
0DD7                          L$139:
0DD7    E9 81 02                  jmp         L$161 
0DDA                          L$140:
0DDA    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0DDD    0C 08                     or          al,0x08 
0DDF    88 46 F0                  mov         byte ptr -0x10[bp],al 
0DE2    30 E4                     xor         ah,ah 
0DE4    50                        push        ax 
0DE5    B8 17 00                  mov         ax,0x0017 
0DE8    50                        push        ax 
0DE9    B8 40 00                  mov         ax,0x0040 
0DEC    50                        push        ax 
0DED    E8 00 00                  call        _write_byte 
0DF0    83 C4 06                  add         sp,0x0006 
0DF3    F6 46 F2 02               test        byte ptr -0xe[bp],0x02 
0DF7    74 1B                     je          L$141 
0DF9    80 4E F8 08               or          byte ptr -0x8[bp],0x08 
0DFD    8A 5E F8                  mov         bl,byte ptr -0x8[bp] 
0E00    30 FF                     xor         bh,bh 
0E02    53                        push        bx 
0E03    B8 96 00                  mov         ax,0x0096 
0E06    50                        push        ax 
0E07    B8 40 00                  mov         ax,0x0040 
0E0A    50                        push        ax 
0E0B    E8 00 00                  call        _write_byte 
0E0E    83 C4 06                  add         sp,0x0006 
0E11    E9 47 02                  jmp         L$161 
0E14                          L$141:
0E14    80 4E FE 02               or          byte ptr -0x2[bp],0x02 
0E18    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0E1B    30 E4                     xor         ah,ah 
0E1D    50                        push        ax 
0E1E    B8 18 00                  mov         ax,0x0018 
0E21    50                        push        ax 
0E22    B8 40 00                  mov         ax,0x0040 
0E25    50                        push        ax 
0E26    E8 00 00                  call        _write_byte 
0E29    83 C4 06                  add         sp,0x0006 
0E2C    E9 2C 02                  jmp         L$161 
0E2F                          L$142:
0E2F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0E32    24 F7                     and         al,0xf7 
0E34    88 46 F0                  mov         byte ptr -0x10[bp],al 
0E37    88 C3                     mov         bl,al 
0E39    30 FF                     xor         bh,bh 
0E3B    53                        push        bx 
0E3C    B8 17 00                  mov         ax,0x0017 
0E3F    50                        push        ax 
0E40    B8 40 00                  mov         ax,0x0040 
0E43    50                        push        ax 
0E44    E8 00 00                  call        _write_byte 
0E47    83 C4 06                  add         sp,0x0006 
0E4A    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0E4D    A8 02                     test        al,0x02 
0E4F    74 19                     je          L$143 
0E51    24 F7                     and         al,0xf7 
0E53    88 46 F8                  mov         byte ptr -0x8[bp],al 
0E56    30 E4                     xor         ah,ah 
0E58    50                        push        ax 
0E59    B8 96 00                  mov         ax,0x0096 
0E5C    50                        push        ax 
0E5D    B8 40 00                  mov         ax,0x0040 
0E60    50                        push        ax 
0E61    E8 00 00                  call        _write_byte 
0E64    83 C4 06                  add         sp,0x0006 
0E67    E9 F1 01                  jmp         L$161 
0E6A                          L$143:
0E6A    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0E6D    24 FD                     and         al,0xfd 
0E6F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0E72    88 C3                     mov         bl,al 
0E74    30 FF                     xor         bh,bh 
0E76    53                        push        bx 
0E77    B8 18 00                  mov         ax,0x0018 
0E7A    50                        push        ax 
0E7B    B8 40 00                  mov         ax,0x0040 
0E7E    50                        push        ax 
0E7F    E8 00 00                  call        _write_byte 
0E82    83 C4 06                  add         sp,0x0006 
0E85    E9 D3 01                  jmp         L$161 
0E88                          L$144:
0E88    F6 46 F8 03               test        byte ptr -0x8[bp],0x03 
0E8C    75 54                     jne         L$146 
0E8E    80 4E FE 20               or          byte ptr -0x2[bp],0x20 
0E92    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0E95    30 E4                     xor         ah,ah 
0E97    50                        push        ax 
0E98    B8 18 00                  mov         ax,0x0018 
0E9B    50                        push        ax 
0E9C    B8 40 00                  mov         ax,0x0040 
0E9F    50                        push        ax 
0EA0    E8 00 00                  call        _write_byte 
0EA3    83 C4 06                  add         sp,0x0006 
0EA6    80 76 F0 20               xor         byte ptr -0x10[bp],0x20 
0EAA    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0EAD    30 E4                     xor         ah,ah 
0EAF    50                        push        ax 
0EB0    B8 17 00                  mov         ax,0x0017 
0EB3    50                        push        ax 
0EB4    B8 40 00                  mov         ax,0x0040 
0EB7    50                        push        ax 
0EB8    E8 00 00                  call        _write_byte 
0EBB    83 C4 06                  add         sp,0x0006 
0EBE    E9 9A 01                  jmp         L$161 
0EC1                          L$145:
0EC1    F6 46 F2 03               test        byte ptr -0xe[bp],0x03 
0EC5    75 72                     jne         L$149 
0EC7    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0ECA    24 DF                     and         al,0xdf 
0ECC    88 46 FE                  mov         byte ptr -0x2[bp],al 
0ECF    88 C3                     mov         bl,al 
0ED1    30 FF                     xor         bh,bh 
0ED3    53                        push        bx 
0ED4    B8 18 00                  mov         ax,0x0018 
0ED7    50                        push        ax 
0ED8    B8 40 00                  mov         ax,0x0040 
0EDB    50                        push        ax 
0EDC    E8 00 00                  call        _write_byte 
0EDF    83 C4 06                  add         sp,0x0006 
0EE2                          L$146:
0EE2    E9 76 01                  jmp         L$161 
0EE5                          L$147:
0EE5    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0EE8    0C 10                     or          al,0x10 
0EEA    88 46 FE                  mov         byte ptr -0x2[bp],al 
0EED    88 C3                     mov         bl,al 
0EEF    30 FF                     xor         bh,bh 
0EF1    53                        push        bx 
0EF2    B8 18 00                  mov         ax,0x0018 
0EF5    50                        push        ax 
0EF6    B8 40 00                  mov         ax,0x0040 
0EF9    50                        push        ax 
0EFA    E8 00 00                  call        _write_byte 
0EFD    83 C4 06                  add         sp,0x0006 
0F00    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0F03    34 10                     xor         al,0x10 
0F05    88 46 F0                  mov         byte ptr -0x10[bp],al 
0F08    88 C3                     mov         bl,al 
0F0A    30 FF                     xor         bh,bh 
0F0C    53                        push        bx 
0F0D    B8 17 00                  mov         ax,0x0017 
0F10    50                        push        ax 
0F11    B8 40 00                  mov         ax,0x0040 
0F14    50                        push        ax 
0F15    E8 00 00                  call        _write_byte 
0F18    83 C4 06                  add         sp,0x0006 
0F1B    E9 3D 01                  jmp         L$161 
0F1E                          L$148:
0F1E    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0F21    24 EF                     and         al,0xef 
0F23    88 46 FE                  mov         byte ptr -0x2[bp],al 
0F26    88 C3                     mov         bl,al 
0F28    30 FF                     xor         bh,bh 
0F2A    53                        push        bx 
0F2B    B8 18 00                  mov         ax,0x0018 
0F2E    50                        push        ax 
0F2F    B8 40 00                  mov         ax,0x0040 
0F32    50                        push        ax 
0F33    E8 00 00                  call        _write_byte 
0F36    83 C4 06                  add         sp,0x0006 
0F39                          L$149:
0F39    E9 1F 01                  jmp         L$161 
0F3C                          L$150:
0F3C    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0F3F    A8 80                     test        al,0x80 
0F41    75 F6                     jne         L$149 
0F43    3C 58                     cmp         al,0x58 
0F45    76 11                     jbe         L$151 
0F47    30 E4                     xor         ah,ah 
0F49    50                        push        ax 
0F4A    B8 62 01                  mov         ax,offset DGROUP:L$374 
0F4D    50                        push        ax 
0F4E    B8 04 00                  mov         ax,0x0004 
0F51    50                        push        ax 
0F52    E8 00 00                  call        _bios_printf 
0F55    E9 25 01                  jmp         L$163 
0F58                          L$151:
0F58    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0F5B    A8 08                     test        al,0x08 
0F5D    74 1D                     je          L$152 
0F5F    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0F62    30 E4                     xor         ah,ah 
0F64    89 C3                     mov         bx,ax 
0F66    D1 E3                     shl         bx,0x01 
0F68    D1 E3                     shl         bx,0x01 
0F6A    01 C3                     add         bx,ax 
0F6C    D1 E3                     shl         bx,0x01 
0F6E    8A 87 06 00               mov         al,byte ptr _scan_to_scanascii+0x6[bx] 
0F72    88 46 F4                  mov         byte ptr -0xc[bp],al 
0F75    8A 9F 07 00               mov         bl,byte ptr _scan_to_scanascii+0x7[bx] 
0F79    E9 B2 00                  jmp         L$158 
0F7C                          L$152:
0F7C    A8 04                     test        al,0x04 
0F7E    74 20                     je          L$153 
0F80    8A 5E FA                  mov         bl,byte ptr -0x6[bp] 
0F83    30 FF                     xor         bh,bh 
0F85    89 D8                     mov         ax,bx 
0F87    D1 E3                     shl         bx,0x01 
0F89    D1 E3                     shl         bx,0x01 
0F8B    01 C3                     add         bx,ax 
0F8D    D1 E3                     shl         bx,0x01 
0F8F    8A 87 04 00               mov         al,byte ptr _scan_to_scanascii+0x4[bx] 
0F93    88 46 F4                  mov         byte ptr -0xc[bp],al 
0F96    8A 87 05 00               mov         al,byte ptr _scan_to_scanascii+0x5[bx] 
0F9A    88 46 FA                  mov         byte ptr -0x6[bp],al 
0F9D    E9 91 00                  jmp         L$159 
0FA0                          L$153:
0FA0    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0FA3    24 02                     and         al,0x02 
0FA5    84 C0                     test        al,al 
0FA7    76 1F                     jbe         L$154 
0FA9    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0FAC    3C 47                     cmp         al,0x47 
0FAE    72 18                     jb          L$154 
0FB0    3C 53                     cmp         al,0x53 
0FB2    77 14                     ja          L$154 
0FB4    C6 46 F4 E0               mov         byte ptr -0xc[bp],0xe0 
0FB8    88 C3                     mov         bl,al 
0FBA    30 FF                     xor         bh,bh 
0FBC    89 D8                     mov         ax,bx 
0FBE    D1 E3                     shl         bx,0x01 
0FC0    D1 E3                     shl         bx,0x01 
0FC2    01 C3                     add         bx,ax 
0FC4    D1 E3                     shl         bx,0x01 
0FC6    EB 62                     jmp         L$157 
0FC8                          L$154:
0FC8    F6 46 F0 03               test        byte ptr -0x10[bp],0x03 
0FCC    74 2C                     je          L$155 
0FCE    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0FD1    30 E4                     xor         ah,ah 
0FD3    89 C3                     mov         bx,ax 
0FD5    D1 E3                     shl         bx,0x01 
0FD7    D1 E3                     shl         bx,0x01 
0FD9    01 C3                     add         bx,ax 
0FDB    D1 E3                     shl         bx,0x01 
0FDD    8A 87 08 00               mov         al,byte ptr _scan_to_scanascii+0x8[bx] 
0FE1    89 C2                     mov         dx,ax 
0FE3    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0FE6    85 D0                     test        ax,dx 
0FE8    75 39                     jne         L$156 
0FEA    8A 87 02 00               mov         al,byte ptr _scan_to_scanascii+0x2[bx] 
0FEE    88 46 F4                  mov         byte ptr -0xc[bp],al 
0FF1    8A 87 03 00               mov         al,byte ptr _scan_to_scanascii+0x3[bx] 
0FF5    88 46 FA                  mov         byte ptr -0x6[bp],al 
0FF8    EB 37                     jmp         L$159 
0FFA                          L$155:
0FFA    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0FFD    30 E4                     xor         ah,ah 
0FFF    89 C3                     mov         bx,ax 
1001    D1 E3                     shl         bx,0x01 
1003    D1 E3                     shl         bx,0x01 
1005    01 C3                     add         bx,ax 
1007    D1 E3                     shl         bx,0x01 
1009    8A 87 08 00               mov         al,byte ptr _scan_to_scanascii+0x8[bx] 
100D    89 C2                     mov         dx,ax 
100F    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
1012    85 D0                     test        ax,dx 
1014    74 0D                     je          L$156 
1016    8A 87 02 00               mov         al,byte ptr _scan_to_scanascii+0x2[bx] 
101A    88 46 F4                  mov         byte ptr -0xc[bp],al 
101D    8A 9F 03 00               mov         bl,byte ptr _scan_to_scanascii+0x3[bx] 
1021    EB 0B                     jmp         L$158 
1023                          L$156:
1023    8A 87 00 00               mov         al,byte ptr _scan_to_scanascii[bx] 
1027    88 46 F4                  mov         byte ptr -0xc[bp],al 
102A                          L$157:
102A    8A 9F 01 00               mov         bl,byte ptr _scan_to_scanascii+0x1[bx] 
102E                          L$158:
102E    88 5E FA                  mov         byte ptr -0x6[bp],bl 
1031                          L$159:
1031    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
1035    75 14                     jne         L$160 
1037    80 7E F4 00               cmp         byte ptr -0xc[bp],0x00 
103B    75 0E                     jne         L$160 
103D    B8 99 01                  mov         ax,offset DGROUP:L$375 
1040    50                        push        ax 
1041    B8 04 00                  mov         ax,0x0004 
1044    50                        push        ax 
1045    E8 00 00                  call        _bios_printf 
1048    83 C4 04                  add         sp,0x0004 
104B                          L$160:
104B    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
104E    30 E4                     xor         ah,ah 
1050    50                        push        ax 
1051    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
1054    50                        push        ax 
1055    E8 00 00                  call        _enqueue_key 
1058    83 C4 04                  add         sp,0x0004 
105B                          L$161:
105B    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
105E    24 7F                     and         al,0x7f 
1060    3C 1D                     cmp         al,0x1d 
1062    74 04                     je          L$162 
1064    80 66 F8 FE               and         byte ptr -0x8[bp],0xfe 
1068                          L$162:
1068    80 66 F8 FD               and         byte ptr -0x8[bp],0xfd 
106C    8A 5E F8                  mov         bl,byte ptr -0x8[bp] 
106F    30 FF                     xor         bh,bh 
1071    53                        push        bx 
1072    B8 96 00                  mov         ax,0x0096 
1075    50                        push        ax 
1076    B8 40 00                  mov         ax,0x0040 
1079    50                        push        ax 
107A    E8 00 00                  call        _write_byte 
107D                          L$163:
107D    83 C4 06                  add         sp,0x0006 
1080                          L$164:
1080    89 EC                     mov         sp,bp 
1082    5D                        pop         bp 
1083    C3                        ret         
1084                          L$165:
1084    1D 11                                           DW	offset L$169
1086    9B 11                                           DW	offset L$174
1088    D6 11                                           DW	offset L$175
108A    75 13                                           DW	offset L$185
108C    D6 11                                           DW	offset L$175
108E    5C 11                                           DW	offset L$171
1090    5C 11                                           DW	offset L$171
1092    5C 11                                           DW	offset L$171
1094    F6 14                                           DW	offset L$194
1096    7C 15                                           DW	offset L$195
1098    5C 11                                           DW	offset L$171
109A    5C 11                                           DW	offset L$171
109C    7C 15                                           DW	offset L$195
109E    7C 15                                           DW	offset L$195
10A0    5C 11                                           DW	offset L$171
10A2    5C 11                                           DW	offset L$171
10A4    7C 15                                           DW	offset L$195
10A6    7C 15                                           DW	offset L$195
10A8    5C 11                                           DW	offset L$171
10AA    5C 11                                           DW	offset L$171
10AC    9E 15                                           DW	offset L$196
10AE    C6 15                                           DW	offset L$197

Routine Size: 1300 bytes,    Routine Base: _TEXT + 0B9C

10B0                          _int13_harddisk:
10B0    56                        push        si 
10B1    57                        push        di 
10B2    55                        push        bp 
10B3    89 E5                     mov         bp,sp 
10B5    83 EC 24                  sub         sp,0x0024 
10B8    81 8E 1E 00 00 02         or          word ptr 0x1e[bp],0x0200 
10BE    31 C0                     xor         ax,ax 
10C0    50                        push        ax 
10C1    B8 8E 00                  mov         ax,0x008e 
10C4    50                        push        ax 
10C5    B8 40 00                  mov         ax,0x0040 
10C8    50                        push        ax 
10C9    E8 00 00                  call        _write_byte 
10CC    83 C4 06                  add         sp,0x0006 
10CF    B8 8D 00                  mov         ax,0x008d 
10D2    50                        push        ax 
10D3    B8 40 00                  mov         ax,0x0040 
10D6    50                        push        ax 
10D7    E8 00 00                  call        _read_byte 
10DA    83 C4 04                  add         sp,0x0004 
10DD    84 C0                     test        al,al 
10DF    74 04                     je          L$166 
10E1    30 C0                     xor         al,al 
10E3    EB 02                     jmp         L$167 
10E5                          L$166:
10E5    B0 01                     mov         al,0x01 
10E7                          L$167:
10E7    C6 46 F4 01               mov         byte ptr -0xc[bp],0x01 
10EB    8B 4E 14                  mov         cx,word ptr 0x14[bp] 
10EE    80 E1 7F                  and         cl,0x7f 
10F1    BA 01 00                  mov         dx,0x0001 
10F4    D3 E2                     shl         dx,cl 
10F6    30 E4                     xor         ah,ah 
10F8    85 D0                     test        ax,dx 
10FA    75 0C                     jne         L$168 
10FC    B0 01                     mov         al,0x01 
10FE    89 86 18 00               mov         word ptr 0x18[bp],ax 
1102    B8 01 00                  mov         ax,0x0001 
1105    E9 79 00                  jmp         L$172 
1108                          L$168:
1108    B1 08                     mov         cl,0x08 
110A    8B 46 18                  mov         ax,word ptr 0x18[bp] 
110D    D3 E8                     shr         ax,cl 
110F    3D 15 00                  cmp         ax,0x0015 
1112    77 48                     ja          L$171 
1114    89 C3                     mov         bx,ax 
1116    D1 E3                     shl         bx,0x01 
1118    2E FF A7 84 10            jmp         word ptr cs:L$165[bx] 
111D                          L$169:
111D    B4 00                     mov         ah,0x00 
111F    89 86 18 00               mov         word ptr 0x18[bp],ax 
1123    31 C0                     xor         ax,ax 
1125    50                        push        ax 
1126    B8 74 00                  mov         ax,0x0074 
1129    50                        push        ax 
112A    B8 40 00                  mov         ax,0x0040 
112D    50                        push        ax 
112E    E8 00 00                  call        _write_byte 
1131    83 C4 06                  add         sp,0x0006 
1134    31 C0                     xor         ax,ax 
1136    50                        push        ax 
1137    E8 00 00                  call        _set_diskette_ret_status 
113A    83 C4 02                  add         sp,0x0002 
113D    31 C0                     xor         ax,ax 
113F    50                        push        ax 
1140    50                        push        ax 
1141    E8 00 00                  call        _set_diskette_current_cyl 
1144    83 C4 04                  add         sp,0x0004 
1147    31 C0                     xor         ax,ax 
1149    50                        push        ax 
114A    B8 01 00                  mov         ax,0x0001 
114D    50                        push        ax 
114E    E8 00 00                  call        _set_diskette_current_cyl 
1151    83 C4 04                  add         sp,0x0004 
1154                          L$170:
1154    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1159    E9 39 00                  jmp         L$173 
115C                          L$171:
115C    B1 08                     mov         cl,0x08 
115E    8B 46 18                  mov         ax,word ptr 0x18[bp] 
1161    D3 E8                     shr         ax,cl 
1163    50                        push        ax 
1164    B8 D0 01                  mov         ax,offset DGROUP:L$376 
1167    50                        push        ax 
1168    B8 04 00                  mov         ax,0x0004 
116B    50                        push        ax 
116C    E8 00 00                  call        _bios_printf 
116F    83 C4 06                  add         sp,0x0006 
1172    B4 01                     mov         ah,0x01 
1174    89 86 18 00               mov         word ptr 0x18[bp],ax 
1178    B1 08                     mov         cl,0x08 
117A    8B 46 18                  mov         ax,word ptr 0x18[bp] 
117D    D3 E8                     shr         ax,cl 
117F    30 E4                     xor         ah,ah 
1181                          L$172:
1181    50                        push        ax 
1182    B8 74 00                  mov         ax,0x0074 
1185    50                        push        ax 
1186    B8 40 00                  mov         ax,0x0040 
1189    50                        push        ax 
118A    E8 00 00                  call        _write_byte 
118D    83 C4 06                  add         sp,0x0006 
1190    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1195                          L$173:
1195    89 EC                     mov         sp,bp 
1197    5D                        pop         bp 
1198    5F                        pop         di 
1199    5E                        pop         si 
119A    C3                        ret         
119B                          L$174:
119B    B8 74 00                  mov         ax,0x0074 
119E    50                        push        ax 
119F    B8 40 00                  mov         ax,0x0040 
11A2    50                        push        ax 
11A3    E8 00 00                  call        _read_byte 
11A6    83 C4 04                  add         sp,0x0004 
11A9    88 46 F0                  mov         byte ptr -0x10[bp],al 
11AC    8A A6 F0 FF               mov         ah,byte ptr -0x10[bp] 
11B0    89 86 18 00               mov         word ptr 0x18[bp],ax 
11B4    31 C0                     xor         ax,ax 
11B6    50                        push        ax 
11B7    B8 74 00                  mov         ax,0x0074 
11BA    50                        push        ax 
11BB    B8 40 00                  mov         ax,0x0040 
11BE    50                        push        ax 
11BF    E8 00 00                  call        _write_byte 
11C2    83 C4 06                  add         sp,0x0006 
11C5    80 7E F0 00               cmp         byte ptr -0x10[bp],0x00 
11C9    74 89                     je          L$170 
11CB    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
11D0    89 EC                     mov         sp,bp 
11D2    5D                        pop         bp 
11D3    5F                        pop         di 
11D4    5E                        pop         si 
11D5    C3                        ret         
11D6                          L$175:
11D6    8A 46 14                  mov         al,byte ptr 0x14[bp] 
11D9    88 46 FE                  mov         byte ptr -0x2[bp],al 
11DC    C7 46 E2 82 20            mov         word ptr -0x1e[bp],0x2082 
11E1    C6 46 EE 10               mov         byte ptr -0x12[bp],0x10 
11E5    C6 46 F2 3F               mov         byte ptr -0xe[bp],0x3f 
11E9    8A 46 18                  mov         al,byte ptr 0x18[bp] 
11EC    88 46 FC                  mov         byte ptr -0x4[bp],al 
11EF    8B 46 16                  mov         ax,word ptr 0x16[bp] 
11F2    30 E4                     xor         ah,ah 
11F4    89 C2                     mov         dx,ax 
11F6    80 E2 C0                  and         dl,0xc0 
11F9    D1 E2                     shl         dx,0x01 
11FB    D1 E2                     shl         dx,0x01 
11FD    B1 08                     mov         cl,0x08 
11FF    8B 46 16                  mov         ax,word ptr 0x16[bp] 
1202    D3 E8                     shr         ax,cl 
1204    09 D0                     or          ax,dx 
1206    8A 56 16                  mov         dl,byte ptr 0x16[bp] 
1209    80 E2 3F                  and         dl,0x3f 
120C    88 56 FA                  mov         byte ptr -0x6[bp],dl 
120F    8B 56 14                  mov         dx,word ptr 0x14[bp] 
1212    D3 EA                     shr         dx,cl 
1214    89 56 EA                  mov         word ptr -0x16[bp],dx 
1217    3B 46 E2                  cmp         ax,word ptr -0x1e[bp] 
121A    73 10                     jae         L$176 
121C    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
121F    3A 56 F2                  cmp         dl,byte ptr -0xe[bp] 
1222    77 08                     ja          L$176 
1224    8A 56 EA                  mov         dl,byte ptr -0x16[bp] 
1227    3A 56 EE                  cmp         dl,byte ptr -0x12[bp] 
122A    72 0C                     jb          L$177 
122C                          L$176:
122C    B4 01                     mov         ah,0x01 
122E    89 86 18 00               mov         word ptr 0x18[bp],ax 
1232    B8 01 00                  mov         ax,0x0001 
1235    E9 49 FF                  jmp         L$172 
1238                          L$177:
1238    8B 56 18                  mov         dx,word ptr 0x18[bp] 
123B    D3 EA                     shr         dx,cl 
123D    83 FA 04                  cmp         dx,0x0004 
1240    75 22                     jne         L$178 
1242    B4 00                     mov         ah,0x00 
1244    89 86 18 00               mov         word ptr 0x18[bp],ax 
1248    31 C0                     xor         ax,ax 
124A    50                        push        ax 
124B    B8 74 00                  mov         ax,0x0074 
124E    50                        push        ax 
124F    B8 40 00                  mov         ax,0x0040 
1252    50                        push        ax 
1253    E8 00 00                  call        _write_byte 
1256    83 C4 06                  add         sp,0x0006 
1259    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
125E    89 EC                     mov         sp,bp 
1260    5D                        pop         bp 
1261    5F                        pop         di 
1262    5E                        pop         si 
1263    C3                        ret         
1264                          L$178:
1264    8A 5E EE                  mov         bl,byte ptr -0x12[bp] 
1267    30 FF                     xor         bh,bh 
1269    31 D2                     xor         dx,dx 
126B    31 C9                     xor         cx,cx 
126D    E8 00 00                  call        __U4M 
1270    8A 5E F2                  mov         bl,byte ptr -0xe[bp] 
1273    30 FF                     xor         bh,bh 
1275    31 C9                     xor         cx,cx 
1277    E8 00 00                  call        __U4M 
127A    89 C6                     mov         si,ax 
127C    89 D7                     mov         di,dx 
127E    8A 46 EA                  mov         al,byte ptr -0x16[bp] 
1281    30 E4                     xor         ah,ah 
1283    8A 5E F2                  mov         bl,byte ptr -0xe[bp] 
1286    30 FF                     xor         bh,bh 
1288    31 D2                     xor         dx,dx 
128A    31 C9                     xor         cx,cx 
128C    E8 00 00                  call        __U4M 
128F    01 C6                     add         si,ax 
1291    11 FA                     adc         dx,di 
1293    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
1296    30 E4                     xor         ah,ah 
1298    31 DB                     xor         bx,bx 
129A    01 F0                     add         ax,si 
129C    11 DA                     adc         dx,bx 
129E    05 FF FF                  add         ax,0xffff 
12A1    89 46 E6                  mov         word ptr -0x1a[bp],ax 
12A4    83 D2 FF                  adc         dx,0xffff 
12A7    89 56 EC                  mov         word ptr -0x14[bp],dx 
12AA    C6 46 F8 00               mov         byte ptr -0x8[bp],0x00 
12AE    8B 46 12                  mov         ax,word ptr 0x12[bp] 
12B1    89 46 E8                  mov         word ptr -0x18[bp],ax 
12B4    FB                        sti         
12B5                          L$179:
12B5    B1 09                     mov         cl,0x09 
12B7    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
12BA    D3 E0                     shl         ax,cl 
12BC    89 46 DE                  mov         word ptr -0x22[bp],ax 
12BF    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
12C2    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
12C5    B1 07                     mov         cl,0x07 
12C7    D3 E8                     shr         ax,cl 
12C9    D3 CA                     ror         dx,cl 
12CB    31 D0                     xor         ax,dx 
12CD    81 E2 FF 01               and         dx,0x01ff 
12D1    31 D0                     xor         ax,dx 
12D3    89 46 DC                  mov         word ptr -0x24[bp],ax 
12D6    8E 86 0A 00               mov         es,word ptr 0xa[bp] 
12DA    8B BE E8 FF               mov         di,word ptr -0x18[bp] 
12DE    81 FF 00 FE               cmp         di,0xfe00 
12E2    76 0B                     jbe         L$180 
12E4    81 EF 00 02               sub         di,0x0200 
12E8    8C C0                     mov         ax,es 
12EA    83 C0 20                  add         ax,0x0020 
12ED    8E C0                     mov         es,ax 
12EF                          L$180:
12EF    8B 9E DE FF               mov         bx,word ptr -0x22[bp] 
12F3    8B 8E DC FF               mov         cx,word ptr -0x24[bp] 
12F7    BA 00 01                  mov         dx,0x0100 
12FA    B8 51 00                  mov         ax,0x0051 
12FD    EF                        out         dx,ax 
12FE    8A C5                     mov         al,ch 
1300    EE                        out         dx,al 
1301    8A C1                     mov         al,cl 
1303    EE                        out         dx,al 
1304    8A C7                     mov         al,bh 
1306    EE                        out         dx,al 
1307    8A C3                     mov         al,bl 
1309    EE                        out         dx,al 
130A    B0 FF                     mov         al,0xff 
130C    EE                        out         dx,al 
130D    EE                        out         dx,al 
130E                          L$181:
130E    EC                        in          al,dx 
130F    3C 00                     cmp         al,0x00 
1311    75 FB                     jne         L$181 
1313                          L$182:
1313    EC                        in          al,dx 
1314    3C FE                     cmp         al,0xfe 
1316    75 FB                     jne         L$182 
1318    B9 00 01                  mov         cx,0x0100 
131B                          L$183:
131B    EC                        in          al,dx 
131C    8A D8                     mov         bl,al 
131E    EC                        in          al,dx 
131F    8A F8                     mov         bh,al 
1321    26 89 1D                  mov         word ptr es:[di],bx 
1324    83 C7 02                  add         di,0x0002 
1327    E2 F2                     loop        L$183 
1329    B8 FF FF                  mov         ax,0xffff 
132C    EE                        out         dx,al 
132D    EE                        out         dx,al 
132E    EE                        out         dx,al 
132F    EE                        out         dx,al 
1330    EF                        out         dx,ax 
1331    89 BE E8 FF               mov         word ptr -0x18[bp],di 
1335    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
1338    FE 46 F8                  inc         byte ptr -0x8[bp] 
133B    83 46 E6 01               add         word ptr -0x1a[bp],0x0001 
133F    83 56 EC 00               adc         word ptr -0x14[bp],0x0000 
1343    FE 4E FC                  dec         byte ptr -0x4[bp] 
1346    74 03                     je          L$184 
1348    E9 6A FF                  jmp         L$179 
134B                          L$184:
134B    B4 00                     mov         ah,0x00 
134D    89 86 18 00               mov         word ptr 0x18[bp],ax 
1351    31 C0                     xor         ax,ax 
1353    50                        push        ax 
1354    B8 74 00                  mov         ax,0x0074 
1357    50                        push        ax 
1358    B8 40 00                  mov         ax,0x0040 
135B    50                        push        ax 
135C    E8 00 00                  call        _write_byte 
135F    83 C4 06                  add         sp,0x0006 
1362    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
1366    89 86 18 00               mov         word ptr 0x18[bp],ax 
136A    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
136F    89 EC                     mov         sp,bp 
1371    5D                        pop         bp 
1372    5F                        pop         di 
1373    5E                        pop         si 
1374    C3                        ret         
1375                          L$185:
1375    8A 46 14                  mov         al,byte ptr 0x14[bp] 
1378    88 46 FE                  mov         byte ptr -0x2[bp],al 
137B    C7 46 E2 82 20            mov         word ptr -0x1e[bp],0x2082 
1380    C6 46 EE 10               mov         byte ptr -0x12[bp],0x10 
1384    C6 46 F2 3F               mov         byte ptr -0xe[bp],0x3f 
1388    8A 46 18                  mov         al,byte ptr 0x18[bp] 
138B    88 46 FC                  mov         byte ptr -0x4[bp],al 
138E    8B 46 16                  mov         ax,word ptr 0x16[bp] 
1391    D3 E8                     shr         ax,cl 
1393    8B 56 16                  mov         dx,word ptr 0x16[bp] 
1396    30 F6                     xor         dh,dh 
1398    D1 E2                     shl         dx,0x01 
139A    D1 E2                     shl         dx,0x01 
139C    30 D2                     xor         dl,dl 
139E    80 E6 03                  and         dh,0x03 
13A1    09 D0                     or          ax,dx 
13A3    8A 56 16                  mov         dl,byte ptr 0x16[bp] 
13A6    80 E2 3F                  and         dl,0x3f 
13A9    88 56 FA                  mov         byte ptr -0x6[bp],dl 
13AC    8B 56 14                  mov         dx,word ptr 0x14[bp] 
13AF    D3 EA                     shr         dx,cl 
13B1    89 56 E4                  mov         word ptr -0x1c[bp],dx 
13B4    3B 46 E2                  cmp         ax,word ptr -0x1e[bp] 
13B7    73 10                     jae         L$186 
13B9    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
13BC    3A 56 F2                  cmp         dl,byte ptr -0xe[bp] 
13BF    77 08                     ja          L$186 
13C1    8A 56 E4                  mov         dl,byte ptr -0x1c[bp] 
13C4    3A 56 EE                  cmp         dl,byte ptr -0x12[bp] 
13C7    72 0C                     jb          L$187 
13C9                          L$186:
13C9    B4 01                     mov         ah,0x01 
13CB    89 86 18 00               mov         word ptr 0x18[bp],ax 
13CF    B8 01 00                  mov         ax,0x0001 
13D2    E9 AC FD                  jmp         L$172 
13D5                          L$187:
13D5    8A 5E EE                  mov         bl,byte ptr -0x12[bp] 
13D8    30 FF                     xor         bh,bh 
13DA    31 D2                     xor         dx,dx 
13DC    31 C9                     xor         cx,cx 
13DE    E8 00 00                  call        __U4M 
13E1    8A 5E F2                  mov         bl,byte ptr -0xe[bp] 
13E4    30 FF                     xor         bh,bh 
13E6    31 C9                     xor         cx,cx 
13E8    E8 00 00                  call        __U4M 
13EB    89 C6                     mov         si,ax 
13ED    89 D7                     mov         di,dx 
13EF    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
13F2    30 E4                     xor         ah,ah 
13F4    8A 5E F2                  mov         bl,byte ptr -0xe[bp] 
13F7    30 FF                     xor         bh,bh 
13F9    31 D2                     xor         dx,dx 
13FB    31 C9                     xor         cx,cx 
13FD    E8 00 00                  call        __U4M 
1400    01 C6                     add         si,ax 
1402    11 FA                     adc         dx,di 
1404    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
1407    30 E4                     xor         ah,ah 
1409    31 DB                     xor         bx,bx 
140B    01 C6                     add         si,ax 
140D    89 D0                     mov         ax,dx 
140F    11 D8                     adc         ax,bx 
1411    83 C6 FF                  add         si,0xffff 
1414    89 76 E6                  mov         word ptr -0x1a[bp],si 
1417    15 FF FF                  adc         ax,0xffff 
141A    89 46 EC                  mov         word ptr -0x14[bp],ax 
141D    C6 46 F8 00               mov         byte ptr -0x8[bp],0x00 
1421    8B 46 12                  mov         ax,word ptr 0x12[bp] 
1424    89 46 E8                  mov         word ptr -0x18[bp],ax 
1427    FB                        sti         
1428                          L$188:
1428    B1 09                     mov         cl,0x09 
142A    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
142D    D3 E0                     shl         ax,cl 
142F    89 46 DE                  mov         word ptr -0x22[bp],ax 
1432    8B 46 E6                  mov         ax,word ptr -0x1a[bp] 
1435    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
1438    B1 07                     mov         cl,0x07 
143A    D3 E8                     shr         ax,cl 
143C    D3 CA                     ror         dx,cl 
143E    31 D0                     xor         ax,dx 
1440    81 E2 FF 01               and         dx,0x01ff 
1444    31 D0                     xor         ax,dx 
1446    89 46 DC                  mov         word ptr -0x24[bp],ax 
1449    8E 86 0A 00               mov         es,word ptr 0xa[bp] 
144D    8B B6 E8 FF               mov         si,word ptr -0x18[bp] 
1451    81 FE 00 FE               cmp         si,0xfe00 
1455    76 0B                     jbe         L$189 
1457    81 EE 00 02               sub         si,0x0200 
145B    8C C0                     mov         ax,es 
145D    83 C0 20                  add         ax,0x0020 
1460    8E C0                     mov         es,ax 
1462                          L$189:
1462    8B 9E DE FF               mov         bx,word ptr -0x22[bp] 
1466    8B 8E DC FF               mov         cx,word ptr -0x24[bp] 
146A    BA 00 01                  mov         dx,0x0100 
146D    B8 58 00                  mov         ax,0x0058 
1470    EF                        out         dx,ax 
1471    8A C5                     mov         al,ch 
1473    EE                        out         dx,al 
1474    8A C1                     mov         al,cl 
1476    EE                        out         dx,al 
1477    8A C7                     mov         al,bh 
1479    EE                        out         dx,al 
147A    8A C3                     mov         al,bl 
147C    EE                        out         dx,al 
147D    B0 FF                     mov         al,0xff 
147F    EE                        out         dx,al 
1480    EE                        out         dx,al 
1481                          L$190:
1481    EC                        in          al,dx 
1482    3C 00                     cmp         al,0x00 
1484    75 FB                     jne         L$190 
1486    B0 FF                     mov         al,0xff 
1488    EE                        out         dx,al 
1489    B0 FE                     mov         al,0xfe 
148B    EE                        out         dx,al 
148C    B9 00 01                  mov         cx,0x0100 
148F                          L$191:
148F    26 8B 04                  mov         ax,word ptr es:[si] 
1492    EE                        out         dx,al 
1493    8A C4                     mov         al,ah 
1495    EE                        out         dx,al 
1496    83 C6 02                  add         si,0x0002 
1499    E2 F4                     loop        L$191 
149B    B0 FF                     mov         al,0xff 
149D    EE                        out         dx,al 
149E    EE                        out         dx,al 
149F    EC                        in          al,dx 
14A0    24 0F                     and         al,0x0f 
14A2    3C 05                     cmp         al,0x05 
14A4    74 01                     je          L$192 
14A6    F4                        hlt         
14A7                          L$192:
14A7    EC                        in          al,dx 
14A8    3C 00                     cmp         al,0x00 
14AA    74 FB                     je          L$192 
14AC    B8 FF FF                  mov         ax,0xffff 
14AF    EE                        out         dx,al 
14B0    EE                        out         dx,al 
14B1    EF                        out         dx,ax 
14B2    89 B6 E8 FF               mov         word ptr -0x18[bp],si 
14B6    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
14B9    FE 46 F8                  inc         byte ptr -0x8[bp] 
14BC    83 46 E6 01               add         word ptr -0x1a[bp],0x0001 
14C0    83 56 EC 00               adc         word ptr -0x14[bp],0x0000 
14C4    FE 4E FC                  dec         byte ptr -0x4[bp] 
14C7    74 03                     je          L$193 
14C9    E9 5C FF                  jmp         L$188 
14CC                          L$193:
14CC    B4 00                     mov         ah,0x00 
14CE    89 86 18 00               mov         word ptr 0x18[bp],ax 
14D2    31 C0                     xor         ax,ax 
14D4    50                        push        ax 
14D5    B8 74 00                  mov         ax,0x0074 
14D8    50                        push        ax 
14D9    B8 40 00                  mov         ax,0x0040 
14DC    50                        push        ax 
14DD    E8 00 00                  call        _write_byte 
14E0    83 C4 06                  add         sp,0x0006 
14E3    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
14E7    89 86 18 00               mov         word ptr 0x18[bp],ax 
14EB    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
14F0    89 EC                     mov         sp,bp 
14F2    5D                        pop         bp 
14F3    5F                        pop         di 
14F4    5E                        pop         si 
14F5    C3                        ret         
14F6                          L$194:
14F6    8A 46 14                  mov         al,byte ptr 0x14[bp] 
14F9    88 46 FE                  mov         byte ptr -0x2[bp],al 
14FC    C7 46 E2 82 20            mov         word ptr -0x1e[bp],0x2082 
1501    C6 46 EE 10               mov         byte ptr -0x12[bp],0x10 
1505    C6 46 F2 3F               mov         byte ptr -0xe[bp],0x3f 
1509    8B 46 E2                  mov         ax,word ptr -0x1e[bp] 
150C    2D 02 00                  sub         ax,0x0002 
150F    89 46 E0                  mov         word ptr -0x20[bp],ax 
1512    B0 00                     mov         al,0x00 
1514    89 86 18 00               mov         word ptr 0x18[bp],ax 
1518    8A 46 E0                  mov         al,byte ptr -0x20[bp] 
151B    88 46 F6                  mov         byte ptr -0xa[bp],al 
151E    8A A6 F6 FF               mov         ah,byte ptr -0xa[bp] 
1522    89 86 16 00               mov         word ptr 0x16[bp],ax 
1526    8B 56 E0                  mov         dx,word ptr -0x20[bp] 
1529    D1 EA                     shr         dx,0x01 
152B    D1 EA                     shr         dx,0x01 
152D    80 E2 C0                  and         dl,0xc0 
1530    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
1533    24 3F                     and         al,0x3f 
1535    08 D0                     or          al,dl 
1537    88 46 F6                  mov         byte ptr -0xa[bp],al 
153A    8A 86 F6 FF               mov         al,byte ptr -0xa[bp] 
153E    89 86 16 00               mov         word ptr 0x16[bp],ax 
1542    8A 46 EE                  mov         al,byte ptr -0x12[bp] 
1545    FE C8                     dec         al 
1547    88 46 F6                  mov         byte ptr -0xa[bp],al 
154A    8A A6 F6 FF               mov         ah,byte ptr -0xa[bp] 
154E    89 86 14 00               mov         word ptr 0x14[bp],ax 
1552    8A 86 F4 FF               mov         al,byte ptr -0xc[bp] 
1556    89 86 14 00               mov         word ptr 0x14[bp],ax 
155A    B4 00                     mov         ah,0x00 
155C    89 86 18 00               mov         word ptr 0x18[bp],ax 
1560    31 C0                     xor         ax,ax 
1562    50                        push        ax 
1563    B8 74 00                  mov         ax,0x0074 
1566    50                        push        ax 
1567    B8 40 00                  mov         ax,0x0040 
156A    50                        push        ax 
156B    E8 00 00                  call        _write_byte 
156E    83 C4 06                  add         sp,0x0006 
1571    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1576    89 EC                     mov         sp,bp 
1578    5D                        pop         bp 
1579    5F                        pop         di 
157A    5E                        pop         si 
157B    C3                        ret         
157C                          L$195:
157C    B4 00                     mov         ah,0x00 
157E    89 86 18 00               mov         word ptr 0x18[bp],ax 
1582    31 C0                     xor         ax,ax 
1584    50                        push        ax 
1585    B8 74 00                  mov         ax,0x0074 
1588    50                        push        ax 
1589    B8 40 00                  mov         ax,0x0040 
158C    50                        push        ax 
158D    E8 00 00                  call        _write_byte 
1590    83 C4 06                  add         sp,0x0006 
1593    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1598    89 EC                     mov         sp,bp 
159A    5D                        pop         bp 
159B    5F                        pop         di 
159C    5E                        pop         si 
159D    C3                        ret         
159E                          L$196:
159E    B4 00                     mov         ah,0x00 
15A0    89 86 18 00               mov         word ptr 0x18[bp],ax 
15A4    31 C0                     xor         ax,ax 
15A6    50                        push        ax 
15A7    B8 74 00                  mov         ax,0x0074 
15AA    50                        push        ax 
15AB    B8 40 00                  mov         ax,0x0040 
15AE    50                        push        ax 
15AF    E8 00 00                  call        _write_byte 
15B2    83 C4 06                  add         sp,0x0006 
15B5    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
15BA    B0 00                     mov         al,0x00 
15BC    89 86 18 00               mov         word ptr 0x18[bp],ax 
15C0    89 EC                     mov         sp,bp 
15C2    5D                        pop         bp 
15C3    5F                        pop         di 
15C4    5E                        pop         si 
15C5    C3                        ret         
15C6                          L$197:
15C6    8A 46 14                  mov         al,byte ptr 0x14[bp] 
15C9    88 46 FE                  mov         byte ptr -0x2[bp],al 
15CC    C7 46 E2 82 20            mov         word ptr -0x1e[bp],0x2082 
15D1    C6 46 EE 10               mov         byte ptr -0x12[bp],0x10 
15D5    C6 46 F2 3F               mov         byte ptr -0xe[bp],0x3f 
15D9    8A 86 EE FF               mov         al,byte ptr -0x12[bp] 
15DD    8A 9E F2 FF               mov         bl,byte ptr -0xe[bp] 
15E1    F6 E3                     mul         bl 
15E3    8B 9E E2 FF               mov         bx,word ptr -0x1e[bp] 
15E7    4B                        dec         bx 
15E8    F7 E3                     mul         bx 
15EA    89 96 16 00               mov         word ptr 0x16[bp],dx 
15EE    89 86 14 00               mov         word ptr 0x14[bp],ax 
15F2    B4 03                     mov         ah,0x03 
15F4    89 86 18 00               mov         word ptr 0x18[bp],ax 
15F8    31 C0                     xor         ax,ax 
15FA    50                        push        ax 
15FB    B8 74 00                  mov         ax,0x0074 
15FE    50                        push        ax 
15FF    B8 40 00                  mov         ax,0x0040 
1602    50                        push        ax 
1603    E8 00 00                  call        _write_byte 
1606    83 C4 06                  add         sp,0x0006 
1609    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
160E    89 EC                     mov         sp,bp 
1610    5D                        pop         bp 
1611    5F                        pop         di 
1612    5E                        pop         si 
1613    C3                        ret         
1614                          _transf_sect_drive_a:
1614    56                        push        si 
1615    57                        push        di 
1616    55                        push        bp 
1617    89 E5                     mov         bp,sp 
1619    50                        push        ax 
161A    53                        push        bx 
161B    51                        push        cx 
161C    52                        push        dx 
161D    57                        push        di 
161E    1E                        push        ds 
161F    8B 86 08 00               mov         ax,word ptr 0x8[bp] 
1623    8E D8                     mov         ds,ax 
1625    8B 9E 0A 00               mov         bx,word ptr 0xa[bp] 
1629    81 FB 00 FE               cmp         bx,0xfe00 
162D    76 0B                     jbe         L$198 
162F    81 EB 00 02               sub         bx,0x0200 
1633    8C D8                     mov         ax,ds 
1635    83 C0 20                  add         ax,0x0020 
1638    8E D8                     mov         ds,ax 
163A                          L$198:
163A    BA 00 E0                  mov         dx,0xe000 
163D    B9 00 01                  mov         cx,0x0100 
1640    33 FF                     xor         di,di 
1642                          L$199:
1642    ED                        in          ax,dx 
1643    89 01                     mov         word ptr [bx+di],ax 
1645    42                        inc         dx 
1646    42                        inc         dx 
1647    47                        inc         di 
1648    47                        inc         di 
1649    E2 F7                     loop        L$199 
164B    1F                        pop         ds 
164C    5F                        pop         di 
164D    5A                        pop         dx 
164E    59                        pop         cx 
164F    5B                        pop         bx 
1650    58                        pop         ax 
1651    89 EC                     mov         sp,bp 
1653    5D                        pop         bp 
1654    5F                        pop         di 
1655    5E                        pop         si 

Routine Size: 1446 bytes,    Routine Base: _TEXT + 10B0

1656                          _MakeRamdisk:
1656    C3                        ret         
1657    FC                        cld         
1658                          _GetRamdiskSector:
1658    55                        push        bp 
1659    89 E5                     mov         bp,sp 
165B    B1 05                     mov         cl,0x05 
165D    8B 46 04                  mov         ax,word ptr 0x4[bp] 
1660    D3 E8                     shr         ax,cl 
1662    05 44 00                  add         ax,0x0044 
1665    30 E4                     xor         ah,ah 
1667    50                        push        ax 
1668    B8 08 02                  mov         ax,0x0208 
166B    50                        push        ax 
166C    E8 00 00                  call        _outb 
166F    83 C4 04                  add         sp,0x0004 
1672    8B 46 04                  mov         ax,word ptr 0x4[bp] 
1675    25 1F 00                  and         ax,0x001f 
1678    B1 09                     mov         cl,0x09 
167A    D3 E0                     shl         ax,cl 
167C    5D                        pop         bp 
167D    C3                        ret         
167E                          L$200:
167E    DF 16                                           DW	offset L$202
1680    0B 17                                           DW	offset L$203
1682    53 17                                           DW	offset L$206
1684    8D 1A                                           DW	offset L$238
1686    22 17                                           DW	offset L$204
1688    22 17                                           DW	offset L$204
168A    22 17                                           DW	offset L$204
168C    22 17                                           DW	offset L$204
168E    CC 18                                           DW	offset L$215
1690    22 17                                           DW	offset L$204
1692    22 17                                           DW	offset L$204
1694    22 17                                           DW	offset L$204
1696    22 17                                           DW	offset L$204
1698    22 17                                           DW	offset L$204
169A    22 17                                           DW	offset L$204
169C    22 17                                           DW	offset L$204
169E    22 17                                           DW	offset L$204
16A0    22 17                                           DW	offset L$204
16A2    22 17                                           DW	offset L$204
16A4    22 17                                           DW	offset L$204
16A6    22 17                                           DW	offset L$204
16A8    36 1A                                           DW	offset L$232
16AA                          L$201:
16AA    86 19                                           DW	offset L$221
16AC    96 19                                           DW	offset L$222
16AE    A6 19                                           DW	offset L$223
16B0    B5 19                                           DW	offset L$224
16B2    C4 19                                           DW	offset L$225
16B4    D3 19                                           DW	offset L$226
16B6    E2 19                                           DW	offset L$227
16B8    18 1A                                           DW	offset L$230
16BA    27 1A                                           DW	offset L$231

Routine Size: 102 bytes,    Routine Base: _TEXT + 1656

16BC                          _int13_diskette_function:
16BC    56                        push        si 
16BD    57                        push        di 
16BE    55                        push        bp 
16BF    89 E5                     mov         bp,sp 
16C1    83 EC 0E                  sub         sp,0x000e 
16C4    81 8E 1E 00 00 02         or          word ptr 0x1e[bp],0x0200 
16CA    B1 08                     mov         cl,0x08 
16CC    8B 46 18                  mov         ax,word ptr 0x18[bp] 
16CF    D3 E8                     shr         ax,cl 
16D1    3D 15 00                  cmp         ax,0x0015 
16D4    77 4C                     ja          L$204 
16D6    89 C3                     mov         bx,ax 
16D8    D1 E3                     shl         bx,0x01 
16DA    2E FF A7 7E 16            jmp         word ptr cs:L$200[bx] 
16DF                          L$202:
16DF    8A 46 14                  mov         al,byte ptr 0x14[bp] 
16E2    88 46 FC                  mov         byte ptr -0x4[bp],al 
16E5    31 C0                     xor         ax,ax 
16E7    50                        push        ax 
16E8    E8 00 00                  call        _set_diskette_ret_status 
16EB    83 C4 02                  add         sp,0x0002 
16EE    31 C0                     xor         ax,ax 
16F0    50                        push        ax 
16F1    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
16F4    30 E4                     xor         ah,ah 
16F6    50                        push        ax 
16F7    E8 00 00                  call        _set_diskette_current_cyl 
16FA    83 C4 04                  add         sp,0x0004 
16FD    B4 00                     mov         ah,0x00 
16FF    89 86 18 00               mov         word ptr 0x18[bp],ax 
1703    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1708    E9 42 00                  jmp         L$205 
170B                          L$203:
170B    31 C0                     xor         ax,ax 
170D    50                        push        ax 
170E    E8 00 00                  call        _set_diskette_ret_status 
1711    83 C4 02                  add         sp,0x0002 
1714    B0 00                     mov         al,0x00 
1716    89 86 18 00               mov         word ptr 0x18[bp],ax 
171A    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
171F    E9 2B 00                  jmp         L$205 
1722                          L$204:
1722    B1 08                     mov         cl,0x08 
1724    8B 46 18                  mov         ax,word ptr 0x18[bp] 
1727    D3 E8                     shr         ax,cl 
1729    50                        push        ax 
172A    B8 F6 02                  mov         ax,offset DGROUP:L$383 
172D    50                        push        ax 
172E    B8 04 00                  mov         ax,0x0004 
1731    50                        push        ax 
1732    E8 00 00                  call        _bios_printf 
1735    83 C4 06                  add         sp,0x0006 
1738    B4 01                     mov         ah,0x01 
173A    89 86 18 00               mov         word ptr 0x18[bp],ax 
173E    B8 01 00                  mov         ax,0x0001 
1741    50                        push        ax 
1742    E8 00 00                  call        _set_diskette_ret_status 
1745    83 C4 02                  add         sp,0x0002 
1748    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
174D                          L$205:
174D    89 EC                     mov         sp,bp 
174F    5D                        pop         bp 
1750    5F                        pop         di 
1751    5E                        pop         si 
1752    C3                        ret         
1753                          L$206:
1753    8A 46 18                  mov         al,byte ptr 0x18[bp] 
1756    88 46 FE                  mov         byte ptr -0x2[bp],al 
1759    8B 46 16                  mov         ax,word ptr 0x16[bp] 
175C    D3 E8                     shr         ax,cl 
175E    88 46 FA                  mov         byte ptr -0x6[bp],al 
1761    8A 56 16                  mov         dl,byte ptr 0x16[bp] 
1764    8B 46 14                  mov         ax,word ptr 0x14[bp] 
1767    D3 E8                     shr         ax,cl 
1769    88 C6                     mov         dh,al 
176B    8A 46 14                  mov         al,byte ptr 0x14[bp] 
176E    88 46 FC                  mov         byte ptr -0x4[bp],al 
1771    3C 01                     cmp         al,0x01 
1773    77 14                     ja          L$207 
1775    80 FE 01                  cmp         dh,0x01 
1778    77 0F                     ja          L$207 
177A    84 D2                     test        dl,dl 
177C    74 0B                     je          L$207 
177E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1781    84 C0                     test        al,al 
1783    74 04                     je          L$207 
1785    3C 48                     cmp         al,0x48 
1787    76 2F                     jbe         L$208 
1789                          L$207:
1789    B8 0A 02                  mov         ax,offset DGROUP:L$377 
178C    50                        push        ax 
178D    B8 04 00                  mov         ax,0x0004 
1790    50                        push        ax 
1791    E8 00 00                  call        _bios_printf 
1794    83 C4 04                  add         sp,0x0004 
1797    B8 01 00                  mov         ax,0x0001 
179A    50                        push        ax 
179B    E8 00 00                  call        _set_diskette_ret_status 
179E    83 C4 02                  add         sp,0x0002 
17A1    B4 01                     mov         ah,0x01 
17A3    89 86 18 00               mov         word ptr 0x18[bp],ax 
17A7    B0 00                     mov         al,0x00 
17A9    89 86 18 00               mov         word ptr 0x18[bp],ax 
17AD    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
17B2    89 EC                     mov         sp,bp 
17B4    5D                        pop         bp 
17B5    5F                        pop         di 
17B6    5E                        pop         si 
17B7    C3                        ret         
17B8                          L$208:
17B8    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
17BB    30 E4                     xor         ah,ah 
17BD    89 C7                     mov         di,ax 
17BF    B1 03                     mov         cl,0x03 
17C1    D3 E7                     shl         di,cl 
17C3    01 C7                     add         di,ax 
17C5    D1 E7                     shl         di,0x01 
17C7    D1 E7                     shl         di,0x01 
17C9    88 F0                     mov         al,dh 
17CB    89 C3                     mov         bx,ax 
17CD    D3 E0                     shl         ax,cl 
17CF    01 D8                     add         ax,bx 
17D1    D1 E0                     shl         ax,0x01 
17D3    01 C7                     add         di,ax 
17D5    88 D0                     mov         al,dl 
17D7    30 E4                     xor         ah,ah 
17D9    01 C7                     add         di,ax 
17DB    4F                        dec         di 
17DC    80 7E FC 00               cmp         byte ptr -0x4[bp],0x00 
17E0    75 31                     jne         L$210 
17E2    31 F6                     xor         si,si 
17E4                          L$209:
17E4    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
17E7    30 E4                     xor         ah,ah 
17E9    39 C6                     cmp         si,ax 
17EB    73 77                     jae         L$211 
17ED    89 F8                     mov         ax,di 
17EF    01 F0                     add         ax,si 
17F1    50                        push        ax 
17F2    B8 00 E0                  mov         ax,0xe000 
17F5    50                        push        ax 
17F6    E8 00 00                  call        _outw 
17F9    83 C4 04                  add         sp,0x0004 
17FC    B1 09                     mov         cl,0x09 
17FE    89 F0                     mov         ax,si 
1800    D3 E0                     shl         ax,cl 
1802    03 46 12                  add         ax,word ptr 0x12[bp] 
1805    50                        push        ax 
1806    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1809    50                        push        ax 
180A    E8 00 00                  call        _transf_sect_drive_a 
180D    83 C4 04                  add         sp,0x0004 
1810    46                        inc         si 
1811    EB D1                     jmp         L$209 
1813                          L$210:
1813    B1 04                     mov         cl,0x04 
1815    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1818    D3 E0                     shl         ax,cl 
181A    8B 56 12                  mov         dx,word ptr 0x12[bp] 
181D    01 C2                     add         dx,ax 
181F    89 56 F4                  mov         word ptr -0xc[bp],dx 
1822    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1825    30 E4                     xor         ah,ah 
1827    B1 09                     mov         cl,0x09 
1829    D3 E0                     shl         ax,cl 
182B    01 D0                     add         ax,dx 
182D    48                        dec         ax 
182E    89 46 F2                  mov         word ptr -0xe[bp],ax 
1831    39 D0                     cmp         ax,dx 
1833    73 31                     jae         L$212 
1835    B8 45 02                  mov         ax,offset DGROUP:L$378 
1838    50                        push        ax 
1839    B8 04 00                  mov         ax,0x0004 
183C    50                        push        ax 
183D    E8 00 00                  call        _bios_printf 
1840    83 C4 04                  add         sp,0x0004 
1843    B4 09                     mov         ah,0x09 
1845    89 86 18 00               mov         word ptr 0x18[bp],ax 
1849    B8 09 00                  mov         ax,0x0009 
184C    50                        push        ax 
184D    E8 00 00                  call        _set_diskette_ret_status 
1850    83 C4 02                  add         sp,0x0002 
1853    B0 00                     mov         al,0x00 
1855    89 86 18 00               mov         word ptr 0x18[bp],ax 
1859    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
185E    89 EC                     mov         sp,bp 
1860    5D                        pop         bp 
1861    5F                        pop         di 
1862    5E                        pop         si 
1863    C3                        ret         
1864                          L$211:
1864    EB 45                     jmp         L$214 
1866                          L$212:
1866    31 F6                     xor         si,si 
1868                          L$213:
1868    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
186B    30 E4                     xor         ah,ah 
186D    39 C6                     cmp         si,ax 
186F    73 3A                     jae         L$214 
1871    B8 70 02                  mov         ax,offset DGROUP:L$379 
1874    50                        push        ax 
1875    B8 04 00                  mov         ax,0x0004 
1878    50                        push        ax 
1879    E8 00 00                  call        _bios_printf 
187C    83 C4 04                  add         sp,0x0004 
187F    89 F8                     mov         ax,di 
1881    01 F0                     add         ax,si 
1883    50                        push        ax 
1884    E8 00 00                  call        _GetRamdiskSector 
1887    83 C4 02                  add         sp,0x0002 
188A    B1 09                     mov         cl,0x09 
188C    89 F2                     mov         dx,si 
188E    D3 E2                     shl         dx,cl 
1890    8B 5E F4                  mov         bx,word ptr -0xc[bp] 
1893    01 D3                     add         bx,dx 
1895    BA 00 02                  mov         dx,0x0200 
1898    52                        push        dx 
1899    50                        push        ax 
189A    B8 00 B0                  mov         ax,0xb000 
189D    50                        push        ax 
189E    53                        push        bx 
189F    FF 76 F2                  push        word ptr -0xe[bp] 
18A2    E8 00 00                  call        _memcpyb 
18A5    83 C4 0A                  add         sp,0x000a 
18A8    46                        inc         si 
18A9    EB BD                     jmp         L$213 
18AB                          L$214:
18AB    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
18AE    30 E4                     xor         ah,ah 
18B0    50                        push        ax 
18B1    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
18B4    50                        push        ax 
18B5    E8 00 00                  call        _set_diskette_current_cyl 
18B8    83 C4 04                  add         sp,0x0004 
18BB    B4 00                     mov         ah,0x00 
18BD    89 86 18 00               mov         word ptr 0x18[bp],ax 
18C1    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
18C6    89 EC                     mov         sp,bp 
18C8    5D                        pop         bp 
18C9    5F                        pop         di 
18CA    5E                        pop         si 
18CB    C3                        ret         
18CC                          L$215:
18CC    8A 46 14                  mov         al,byte ptr 0x14[bp] 
18CF    88 46 FC                  mov         byte ptr -0x4[bp],al 
18D2    3C 01                     cmp         al,0x01 
18D4    76 4B                     jbe         L$216 
18D6    B8 98 02                  mov         ax,offset DGROUP:L$380 
18D9    50                        push        ax 
18DA    B8 04 00                  mov         ax,0x0004 
18DD    50                        push        ax 
18DE    E8 00 00                  call        _bios_printf 
18E1    83 C4 04                  add         sp,0x0004 
18E4    B8 00 00                  mov         ax,0x0000 
18E7    89 86 18 00               mov         word ptr 0x18[bp],ax 
18EB    B8 00 00                  mov         ax,0x0000 
18EE    89 86 12 00               mov         word ptr 0x12[bp],ax 
18F2    B8 00 00                  mov         ax,0x0000 
18F5    89 86 16 00               mov         word ptr 0x16[bp],ax 
18F9    B8 00 00                  mov         ax,0x0000 
18FC    89 86 14 00               mov         word ptr 0x14[bp],ax 
1900    B8 00 00                  mov         ax,0x0000 
1903    89 86 0A 00               mov         word ptr 0xa[bp],ax 
1907    B8 00 00                  mov         ax,0x0000 
190A    89 86 0C 00               mov         word ptr 0xc[bp],ax 
190E    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
1912    89 86 14 00               mov         word ptr 0x14[bp],ax 
1916    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
191B    89 EC                     mov         sp,bp 
191D    5D                        pop         bp 
191E    5F                        pop         di 
191F    5E                        pop         si 
1920    C3                        ret         
1921                          L$216:
1921    C6 46 F6 44               mov         byte ptr -0xa[bp],0x44 
1925    C6 46 F8 00               mov         byte ptr -0x8[bp],0x00 
1929    F6 46 F6 F0               test        byte ptr -0xa[bp],0xf0 
192D    74 06                     je          L$217 
192F    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
1932    FE 46 F8                  inc         byte ptr -0x8[bp] 
1935                          L$217:
1935    F6 46 F6 0F               test        byte ptr -0xa[bp],0x0f 
1939    74 06                     je          L$218 
193B    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
193E    FE 46 F8                  inc         byte ptr -0x8[bp] 
1941                          L$218:
1941    80 7E FC 00               cmp         byte ptr -0x4[bp],0x00 
1945    75 07                     jne         L$219 
1947    B1 04                     mov         cl,0x04 
1949    D2 6E F6                  shr         byte ptr -0xa[bp],cl 
194C    EB 04                     jmp         L$220 
194E                          L$219:
194E    80 66 F6 0F               and         byte ptr -0xa[bp],0x0f 
1952                          L$220:
1952    B4 00                     mov         ah,0x00 
1954    89 86 12 00               mov         word ptr 0x12[bp],ax 
1958    8A 86 F6 FF               mov         al,byte ptr -0xa[bp] 
195C    89 86 12 00               mov         word ptr 0x12[bp],ax 
1960    B4 00                     mov         ah,0x00 
1962    89 86 18 00               mov         word ptr 0x18[bp],ax 
1966    B0 00                     mov         al,0x00 
1968    89 86 18 00               mov         word ptr 0x18[bp],ax 
196C    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
1970    89 86 14 00               mov         word ptr 0x14[bp],ax 
1974    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
1977    3C 08                     cmp         al,0x08 
1979    77 76                     ja          L$228 
197B    30 E4                     xor         ah,ah 
197D    89 C3                     mov         bx,ax 
197F    D1 E3                     shl         bx,0x01 
1981    2E FF A7 AA 16            jmp         word ptr cs:L$201[bx] 
1986                          L$221:
1986    B8 00 00                  mov         ax,0x0000 
1989    89 86 16 00               mov         word ptr 0x16[bp],ax 
198D    B4 00                     mov         ah,0x00 
198F    89 86 14 00               mov         word ptr 0x14[bp],ax 
1993    E9 69 00                  jmp         L$229 
1996                          L$222:
1996    B8 09 27                  mov         ax,0x2709 
1999    89 86 16 00               mov         word ptr 0x16[bp],ax 
199D    B4 01                     mov         ah,0x01 
199F    89 86 14 00               mov         word ptr 0x14[bp],ax 
19A3    E9 59 00                  jmp         L$229 
19A6                          L$223:
19A6    B8 0F 4F                  mov         ax,0x4f0f 
19A9    89 86 16 00               mov         word ptr 0x16[bp],ax 
19AD    B4 01                     mov         ah,0x01 
19AF    89 86 14 00               mov         word ptr 0x14[bp],ax 
19B3    EB 4A                     jmp         L$229 
19B5                          L$224:
19B5    B8 09 4F                  mov         ax,0x4f09 
19B8    89 86 16 00               mov         word ptr 0x16[bp],ax 
19BC    B4 01                     mov         ah,0x01 
19BE    89 86 14 00               mov         word ptr 0x14[bp],ax 
19C2    EB 3B                     jmp         L$229 
19C4                          L$225:
19C4    B8 12 4F                  mov         ax,0x4f12 
19C7    89 86 16 00               mov         word ptr 0x16[bp],ax 
19CB    B4 01                     mov         ah,0x01 
19CD    89 86 14 00               mov         word ptr 0x14[bp],ax 
19D1    EB 2C                     jmp         L$229 
19D3                          L$226:
19D3    B8 24 4F                  mov         ax,0x4f24 
19D6    89 86 16 00               mov         word ptr 0x16[bp],ax 
19DA    B4 01                     mov         ah,0x01 
19DC    89 86 14 00               mov         word ptr 0x14[bp],ax 
19E0    EB 1D                     jmp         L$229 
19E2                          L$227:
19E2    B8 08 27                  mov         ax,0x2708 
19E5    89 86 16 00               mov         word ptr 0x16[bp],ax 
19E9    B4 00                     mov         ah,0x00 
19EB    89 86 14 00               mov         word ptr 0x14[bp],ax 
19EF    EB 0E                     jmp         L$229 
19F1                          L$228:
19F1    B8 B7 02                  mov         ax,offset DGROUP:L$381 
19F4    50                        push        ax 
19F5    B8 07 00                  mov         ax,0x0007 
19F8    50                        push        ax 
19F9    E8 00 00                  call        _bios_printf 
19FC    83 C4 04                  add         sp,0x0004 
19FF                          L$229:
19FF    B8 C7 EF                  mov         ax,0xefc7 
1A02    89 86 0C 00               mov         word ptr 0xc[bp],ax 
1A06    B8 00 F0                  mov         ax,0xf000 
1A09    89 86 0A 00               mov         word ptr 0xa[bp],ax 
1A0D    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1A12    89 EC                     mov         sp,bp 
1A14    5D                        pop         bp 
1A15    5F                        pop         di 
1A16    5E                        pop         si 
1A17    C3                        ret         
1A18                          L$230:
1A18    B8 09 27                  mov         ax,0x2709 
1A1B    89 86 16 00               mov         word ptr 0x16[bp],ax 
1A1F    B4 00                     mov         ah,0x00 
1A21    89 86 14 00               mov         word ptr 0x14[bp],ax 
1A25    EB D8                     jmp         L$229 
1A27                          L$231:
1A27    B8 08 27                  mov         ax,0x2708 
1A2A    89 86 16 00               mov         word ptr 0x16[bp],ax 
1A2E    B4 01                     mov         ah,0x01 
1A30    89 86 14 00               mov         word ptr 0x14[bp],ax 
1A34    EB C9                     jmp         L$229 
1A36                          L$232:
1A36    8A 46 14                  mov         al,byte ptr 0x14[bp] 
1A39    88 46 FC                  mov         byte ptr -0x4[bp],al 
1A3C    3C 01                     cmp         al,0x01 
1A3E    76 1F                     jbe         L$233 
1A40    B8 D7 02                  mov         ax,offset DGROUP:L$382 
1A43    50                        push        ax 
1A44    B8 04 00                  mov         ax,0x0004 
1A47    50                        push        ax 
1A48    E8 00 00                  call        _bios_printf 
1A4B    83 C4 04                  add         sp,0x0004 
1A4E    B4 00                     mov         ah,0x00 
1A50    89 86 18 00               mov         word ptr 0x18[bp],ax 
1A54    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1A59    89 EC                     mov         sp,bp 
1A5B    5D                        pop         bp 
1A5C    5F                        pop         di 
1A5D    5E                        pop         si 
1A5E    C3                        ret         
1A5F                          L$233:
1A5F    C6 46 F6 44               mov         byte ptr -0xa[bp],0x44 
1A63    84 C0                     test        al,al 
1A65    75 07                     jne         L$234 
1A67    B1 04                     mov         cl,0x04 
1A69    D2 6E F6                  shr         byte ptr -0xa[bp],cl 
1A6C    EB 04                     jmp         L$235 
1A6E                          L$234:
1A6E    80 66 F6 0F               and         byte ptr -0xa[bp],0x0f 
1A72                          L$235:
1A72    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
1A76    75 04                     jne         L$236 
1A78    B4 00                     mov         ah,0x00 
1A7A    EB 02                     jmp         L$237 
1A7C                          L$236:
1A7C    B4 01                     mov         ah,0x01 
1A7E                          L$237:
1A7E    89 86 18 00               mov         word ptr 0x18[bp],ax 
1A82    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1A87    89 EC                     mov         sp,bp 
1A89    5D                        pop         bp 
1A8A    5F                        pop         di 
1A8B    5E                        pop         si 
1A8C    C3                        ret         
1A8D                          L$238:
1A8D    8A 46 18                  mov         al,byte ptr 0x18[bp] 
1A90    88 46 FE                  mov         byte ptr -0x2[bp],al 
1A93    8B 46 16                  mov         ax,word ptr 0x16[bp] 
1A96    D3 E8                     shr         ax,cl 
1A98    88 46 FA                  mov         byte ptr -0x6[bp],al 
1A9B    8A 56 16                  mov         dl,byte ptr 0x16[bp] 
1A9E    8B 46 14                  mov         ax,word ptr 0x14[bp] 
1AA1    D3 E8                     shr         ax,cl 
1AA3    88 C6                     mov         dh,al 
1AA5    8A 46 14                  mov         al,byte ptr 0x14[bp] 
1AA8    88 46 FC                  mov         byte ptr -0x4[bp],al 
1AAB    3C 01                     cmp         al,0x01 
1AAD    74 03                     je          L$239 
1AAF    E9 70 FC                  jmp         L$204 
1AB2                          L$239:
1AB2    77 13                     ja          L$240 
1AB4    38 C6                     cmp         dh,al 
1AB6    77 0F                     ja          L$240 
1AB8    84 D2                     test        dl,dl 
1ABA    74 0B                     je          L$240 
1ABC    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1ABF    84 C0                     test        al,al 
1AC1    74 04                     je          L$240 
1AC3    3C 48                     cmp         al,0x48 
1AC5    76 2F                     jbe         L$241 
1AC7                          L$240:
1AC7    B8 0A 02                  mov         ax,offset DGROUP:L$377 
1ACA    50                        push        ax 
1ACB    B8 04 00                  mov         ax,0x0004 
1ACE    50                        push        ax 
1ACF    E8 00 00                  call        _bios_printf 
1AD2    83 C4 04                  add         sp,0x0004 
1AD5    B4 01                     mov         ah,0x01 
1AD7    89 86 18 00               mov         word ptr 0x18[bp],ax 
1ADB    B8 01 00                  mov         ax,0x0001 
1ADE    50                        push        ax 
1ADF    E8 00 00                  call        _set_diskette_ret_status 
1AE2    83 C4 02                  add         sp,0x0002 
1AE5    B0 00                     mov         al,0x00 
1AE7    89 86 18 00               mov         word ptr 0x18[bp],ax 
1AEB    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1AF0    89 EC                     mov         sp,bp 
1AF2    5D                        pop         bp 
1AF3    5F                        pop         di 
1AF4    5E                        pop         si 
1AF5    C3                        ret         
1AF6                          L$241:
1AF6    B1 04                     mov         cl,0x04 
1AF8    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1AFB    D3 E0                     shl         ax,cl 
1AFD    8B 5E 12                  mov         bx,word ptr 0x12[bp] 
1B00    01 C3                     add         bx,ax 
1B02    89 5E F4                  mov         word ptr -0xc[bp],bx 
1B05    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1B08    30 E4                     xor         ah,ah 
1B0A    B1 09                     mov         cl,0x09 
1B0C    D3 E0                     shl         ax,cl 
1B0E    01 D8                     add         ax,bx 
1B10    48                        dec         ax 
1B11    89 46 F2                  mov         word ptr -0xe[bp],ax 
1B14    39 D8                     cmp         ax,bx 
1B16    73 2F                     jae         L$242 
1B18    B8 45 02                  mov         ax,offset DGROUP:L$378 
1B1B    50                        push        ax 
1B1C    B8 04 00                  mov         ax,0x0004 
1B1F    50                        push        ax 
1B20    E8 00 00                  call        _bios_printf 
1B23    83 C4 04                  add         sp,0x0004 
1B26    B4 09                     mov         ah,0x09 
1B28    89 86 18 00               mov         word ptr 0x18[bp],ax 
1B2C    B8 09 00                  mov         ax,0x0009 
1B2F    50                        push        ax 
1B30    E8 00 00                  call        _set_diskette_ret_status 
1B33    83 C4 02                  add         sp,0x0002 
1B36    B0 00                     mov         al,0x00 
1B38    89 86 18 00               mov         word ptr 0x18[bp],ax 
1B3C    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1B41    89 EC                     mov         sp,bp 
1B43    5D                        pop         bp 
1B44    5F                        pop         di 
1B45    5E                        pop         si 
1B46    C3                        ret         
1B47                          L$242:
1B47    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
1B4A    30 E4                     xor         ah,ah 
1B4C    89 C6                     mov         si,ax 
1B4E    B1 03                     mov         cl,0x03 
1B50    D3 E6                     shl         si,cl 
1B52    01 C6                     add         si,ax 
1B54    D1 E6                     shl         si,0x01 
1B56    D1 E6                     shl         si,0x01 
1B58    88 F0                     mov         al,dh 
1B5A    89 C3                     mov         bx,ax 
1B5C    D3 E0                     shl         ax,cl 
1B5E    01 D8                     add         ax,bx 
1B60    D1 E0                     shl         ax,0x01 
1B62    01 C6                     add         si,ax 
1B64    88 D0                     mov         al,dl 
1B66    30 E4                     xor         ah,ah 
1B68    89 C7                     mov         di,ax 
1B6A    01 F7                     add         di,si 
1B6C    4F                        dec         di 
1B6D    31 F6                     xor         si,si 
1B6F                          L$243:
1B6F    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1B72    30 E4                     xor         ah,ah 
1B74    39 C6                     cmp         si,ax 
1B76    73 2B                     jae         L$244 
1B78    89 F8                     mov         ax,di 
1B7A    01 F0                     add         ax,si 
1B7C    50                        push        ax 
1B7D    E8 00 00                  call        _GetRamdiskSector 
1B80    83 C4 02                  add         sp,0x0002 
1B83    B1 09                     mov         cl,0x09 
1B85    89 F2                     mov         dx,si 
1B87    D3 E2                     shl         dx,cl 
1B89    03 56 F4                  add         dx,word ptr -0xc[bp] 
1B8C    BB 00 02                  mov         bx,0x0200 
1B8F    53                        push        bx 
1B90    52                        push        dx 
1B91    8B 56 0A                  mov         dx,word ptr 0xa[bp] 
1B94    52                        push        dx 
1B95    50                        push        ax 
1B96    B8 00 B0                  mov         ax,0xb000 
1B99    50                        push        ax 
1B9A    E8 00 00                  call        _memcpyb 
1B9D    83 C4 0A                  add         sp,0x000a 
1BA0    46                        inc         si 
1BA1    EB CC                     jmp         L$243 
1BA3                          L$244:
1BA3    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
1BA6    50                        push        ax 
1BA7    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
1BAA    50                        push        ax 
1BAB    E8 00 00                  call        _set_diskette_current_cyl 
1BAE    83 C4 04                  add         sp,0x0004 
1BB1    B4 00                     mov         ah,0x00 
1BB3    89 86 18 00               mov         word ptr 0x18[bp],ax 
1BB7    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1BBC    89 EC                     mov         sp,bp 
1BBE    5D                        pop         bp 
1BBF    5F                        pop         di 
1BC0    5E                        pop         si 
1BC1    C3                        ret         
1BC2                          _set_diskette_ret_status:
1BC2    55                        push        bp 
1BC3    89 E5                     mov         bp,sp 
1BC5    8A 46 04                  mov         al,byte ptr 0x4[bp] 
1BC8    30 E4                     xor         ah,ah 
1BCA    50                        push        ax 
1BCB    B8 41 00                  mov         ax,0x0041 
1BCE    50                        push        ax 
1BCF    B8 40 00                  mov         ax,0x0040 
1BD2    50                        push        ax 
1BD3    E8 00 00                  call        _write_byte 
1BD6    83 C4 06                  add         sp,0x0006 
1BD9    5D                        pop         bp 
1BDA    C3                        ret         
1BDB    FC                        cld         
1BDC                          _set_diskette_current_cyl:
1BDC    55                        push        bp 
1BDD    89 E5                     mov         bp,sp 
1BDF    8A 56 04                  mov         dl,byte ptr 0x4[bp] 
1BE2    80 FA 01                  cmp         dl,0x01 
1BE5    76 02                     jbe         L$245 
1BE7    B2 01                     mov         dl,0x01 
1BE9                          L$245:
1BE9    8A 46 06                  mov         al,byte ptr 0x6[bp] 
1BEC    30 E4                     xor         ah,ah 
1BEE    50                        push        ax 
1BEF    88 D0                     mov         al,dl 
1BF1    05 94 00                  add         ax,0x0094 
1BF4    50                        push        ax 
1BF5    B8 40 00                  mov         ax,0x0040 
1BF8    50                        push        ax 
1BF9    E8 00 00                  call        _write_byte 
1BFC    83 C4 06                  add         sp,0x0006 
1BFF    5D                        pop         bp 
1C00    C3                        ret         
1C01    FC                        cld         
1C02                          _get_boot_vector:
1C02    56                        push        si 
1C03    55                        push        bp 
1C04    89 E5                     mov         bp,sp 
1C06    E8 00 00                  call        _get_SS 
1C09    89 C6                     mov         si,ax 
1C0B    B8 80 00                  mov         ax,0x0080 
1C0E    50                        push        ax 
1C0F    B8 F0 9F                  mov         ax,0x9ff0 
1C12    50                        push        ax 
1C13    E8 00 00                  call        _read_word 
1C16    83 C4 04                  add         sp,0x0004 
1C19    3B 46 06                  cmp         ax,word ptr 0x6[bp] 
1C1C    77 05                     ja          L$246 
1C1E    30 C0                     xor         al,al 
1C20    5D                        pop         bp 
1C21    5E                        pop         si 
1C22    C3                        ret         
1C23                          L$246:
1C23    B8 10 00                  mov         ax,0x0010 
1C26    50                        push        ax 
1C27    B1 04                     mov         cl,0x04 
1C29    8B 46 06                  mov         ax,word ptr 0x6[bp] 
1C2C    D3 E0                     shl         ax,cl 
1C2E    50                        push        ax 
1C2F    B8 F0 9F                  mov         ax,0x9ff0 
1C32    50                        push        ax 
1C33    FF 76 08                  push        word ptr 0x8[bp] 
1C36    56                        push        si 
1C37    E8 00 00                  call        _memcpyb 
1C3A    83 C4 0A                  add         sp,0x000a 
1C3D    B0 01                     mov         al,0x01 
1C3F    5D                        pop         bp 
1C40    5E                        pop         si 
1C41    C3                        ret         
1C42                          _print_boot_device:
1C42    56                        push        si 
1C43    57                        push        di 
1C44    55                        push        bp 
1C45    89 E5                     mov         bp,sp 
1C47    83 EC 24                  sub         sp,0x0024 
1C4A    8B 7E 08                  mov         di,word ptr 0x8[bp] 
1C4D    E8 00 00                  call        _get_SS 
1C50    89 46 FE                  mov         word ptr -0x2[bp],ax 
1C53    8C D0                     mov         ax,ss 
1C55    8E C0                     mov         es,ax 
1C57    26 8B 35                  mov         si,word ptr es:[di] 
1C5A    81 FE 80 00               cmp         si,0x0080 
1C5E    75 05                     jne         L$247 
1C60    BE 04 00                  mov         si,0x0004 
1C63    EB 17                     jmp         L$249 
1C65                          L$247:
1C65    85 F6                     test        si,si 
1C67    74 05                     je          L$248 
1C69    83 FE 04                  cmp         si,0x0004 
1C6C    76 0E                     jbe         L$249 
1C6E                          L$248:
1C6E    B8 A8 00                  mov         ax,offset DGROUP:L$366 
1C71    50                        push        ax 
1C72    B8 07 00                  mov         ax,0x0007 
1C75    50                        push        ax 
1C76    E8 00 00                  call        _bios_printf 
1C79    83 C4 04                  add         sp,0x0004 
1C7C                          L$249:
1C7C    89 F0                     mov         ax,si 
1C7E    D1 E0                     shl         ax,0x01 
1C80    D1 E0                     shl         ax,0x01 
1C82    01 F0                     add         ax,si 
1C84    D1 E0                     shl         ax,0x01 
1C86    D1 E0                     shl         ax,0x01 
1C88    05 00 00                  add         ax,offset _drivetypes 
1C8B    50                        push        ax 
1C8C    B8 1B 03                  mov         ax,offset DGROUP:L$384 
1C8F    50                        push        ax 
1C90    B8 02 00                  mov         ax,0x0002 
1C93    50                        push        ax 
1C94    E8 00 00                  call        _bios_printf 
1C97    83 C4 06                  add         sp,0x0006 
1C9A    83 FE 04                  cmp         si,0x0004 
1C9D    75 43                     jne         L$250 
1C9F    8C D0                     mov         ax,ss 
1CA1    8E C0                     mov         es,ax 
1CA3    26 8B 45 0A               mov         ax,word ptr es:0xa[di] 
1CA7    26 0B 45 08               or          ax,word ptr es:0x8[di] 
1CAB    74 35                     je          L$250 
1CAD    B8 20 00                  mov         ax,0x0020 
1CB0    50                        push        ax 
1CB1    26 8B 45 08               mov         ax,word ptr es:0x8[di] 
1CB5    50                        push        ax 
1CB6    26 8B 45 0A               mov         ax,word ptr es:0xa[di] 
1CBA    50                        push        ax 
1CBB    8D 46 DC                  lea         ax,-0x24[bp] 
1CBE    50                        push        ax 
1CBF    FF 76 FE                  push        word ptr -0x2[bp] 
1CC2    E8 00 00                  call        _memcpyb 
1CC5    83 C4 0A                  add         sp,0x000a 
1CC8    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
1CCC    8D 76 DC                  lea         si,-0x24[bp] 
1CCF    16                        push        ss 
1CD0    56                        push        si 
1CD1    FF 76 FE                  push        word ptr -0x2[bp] 
1CD4    B8 2B 03                  mov         ax,offset DGROUP:L$385 
1CD7    50                        push        ax 
1CD8    B8 02 00                  mov         ax,0x0002 
1CDB    50                        push        ax 
1CDC    E8 00 00                  call        _bios_printf 
1CDF    83 C4 0A                  add         sp,0x000a 
1CE2                          L$250:
1CE2    B8 31 03                  mov         ax,offset DGROUP:L$386 
1CE5    50                        push        ax 
1CE6    B8 02 00                  mov         ax,0x0002 
1CE9    50                        push        ax 
1CEA    E8 00 00                  call        _bios_printf 
1CED    83 C4 04                  add         sp,0x0004 
1CF0    89 EC                     mov         sp,bp 
1CF2    5D                        pop         bp 
1CF3    5F                        pop         di 
1CF4    5E                        pop         si 
1CF5    C3                        ret         
1CF6                          L$251:
1CF6    5D 1D                                           DW	offset L$253
1CF8    FA 1D                                           DW	offset L$255
1CFA    78 1E                                           DW	offset L$260
1CFC    BF 1D                                           DW	offset L$254

Routine Size: 1602 bytes,    Routine Base: _TEXT + 16BC

1CFE                          _int14_function:
1CFE    56                        push        si 
1CFF    57                        push        di 
1D00    55                        push        bp 
1D01    89 E5                     mov         bp,sp 
1D03    83 EC 0A                  sub         sp,0x000a 
1D06    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1D09    D1 E0                     shl         ax,0x01 
1D0B    50                        push        ax 
1D0C    B8 40 00                  mov         ax,0x0040 
1D0F    50                        push        ax 
1D10    E8 00 00                  call        _read_word 
1D13    89 46 F6                  mov         word ptr -0xa[bp],ax 
1D16    83 C4 04                  add         sp,0x0004 
1D19    89 46 FA                  mov         word ptr -0x6[bp],ax 
1D1C    8B 46 0A                  mov         ax,word ptr 0xa[bp] 
1D1F    05 7C 00                  add         ax,0x007c 
1D22    50                        push        ax 
1D23    B8 40 00                  mov         ax,0x0040 
1D26    50                        push        ax 
1D27    E8 00 00                  call        _read_byte 
1D2A    83 C4 04                  add         sp,0x0004 
1D2D    88 46 FE                  mov         byte ptr -0x2[bp],al 
1D30    FB                        sti         
1D31    83 7E 0A 04               cmp         word ptr 0xa[bp],0x0004 
1D35    73 1B                     jae         L$252 
1D37    83 7E F6 00               cmp         word ptr -0xa[bp],0x0000 
1D3B    76 15                     jbe         L$252 
1D3D    B1 08                     mov         cl,0x08 
1D3F    8B 46 08                  mov         ax,word ptr 0x8[bp] 
1D42    D3 E8                     shr         ax,cl 
1D44    3D 03 00                  cmp         ax,0x0003 
1D47    77 09                     ja          L$252 
1D49    89 C6                     mov         si,ax 
1D4B    D1 E6                     shl         si,0x01 
1D4D    2E FF A4 F6 1C            jmp         word ptr cs:L$251[si] 
1D52                          L$252:
1D52    83 8E 12 00 01            or          word ptr 0x12[bp],0x0001 
1D57    89 EC                     mov         sp,bp 
1D59    5D                        pop         bp 
1D5A    5F                        pop         di 
1D5B    5E                        pop         si 
1D5C    C3                        ret         
1D5D                          L$253:
1D5D    8B 76 F6                  mov         si,word ptr -0xa[bp] 
1D60    83 C6 03                  add         si,0x0003 
1D63    56                        push        si 
1D64    E8 00 00                  call        _inb 
1D67    83 C4 02                  add         sp,0x0002 
1D6A    0C 80                     or          al,0x80 
1D6C    30 E4                     xor         ah,ah 
1D6E    50                        push        ax 
1D6F    56                        push        si 
1D70    E8 00 00                  call        _outb 
1D73    83 C4 04                  add         sp,0x0004 
1D76    8B 46 08                  mov         ax,word ptr 0x8[bp] 
1D79    25 E0 00                  and         ax,0x00e0 
1D7C    B1 05                     mov         cl,0x05 
1D7E    D3 E8                     shr         ax,cl 
1D80    89 C1                     mov         cx,ax 
1D82    B8 00 06                  mov         ax,0x0600 
1D85    D3 F8                     sar         ax,cl 
1D87    89 46 F8                  mov         word ptr -0x8[bp],ax 
1D8A    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
1D8D    30 E4                     xor         ah,ah 
1D8F    50                        push        ax 
1D90    FF 76 F6                  push        word ptr -0xa[bp] 
1D93    E8 00 00                  call        _outb 
1D96    83 C4 04                  add         sp,0x0004 
1D99    8A 46 F9                  mov         al,byte ptr -0x7[bp] 
1D9C    30 E4                     xor         ah,ah 
1D9E    50                        push        ax 
1D9F    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
1DA2    40                        inc         ax 
1DA3    50                        push        ax 
1DA4    E8 00 00                  call        _outb 
1DA7    83 C4 04                  add         sp,0x0004 
1DAA    8A 46 08                  mov         al,byte ptr 0x8[bp] 
1DAD    24 1F                     and         al,0x1f 
1DAF    88 46 FC                  mov         byte ptr -0x4[bp],al 
1DB2    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
1DB5    30 E4                     xor         ah,ah 
1DB7    50                        push        ax 
1DB8    56                        push        si 
1DB9    E8 00 00                  call        _outb 
1DBC    83 C4 04                  add         sp,0x0004 
1DBF                          L$254:
1DBF    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
1DC2    05 05 00                  add         ax,0x0005 
1DC5    50                        push        ax 
1DC6    E8 00 00                  call        _inb 
1DC9    83 C4 02                  add         sp,0x0002 
1DCC    88 46 FC                  mov         byte ptr -0x4[bp],al 
1DCF    8A A6 FC FF               mov         ah,byte ptr -0x4[bp] 
1DD3    89 86 08 00               mov         word ptr 0x8[bp],ax 
1DD7    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
1DDA    05 06 00                  add         ax,0x0006 
1DDD    50                        push        ax 
1DDE    E8 00 00                  call        _inb 
1DE1    83 C4 02                  add         sp,0x0002 
1DE4    88 46 FC                  mov         byte ptr -0x4[bp],al 
1DE7    8A 86 FC FF               mov         al,byte ptr -0x4[bp] 
1DEB    89 86 08 00               mov         word ptr 0x8[bp],ax 
1DEF    83 A6 12 00 FE            and         word ptr 0x12[bp],0xfffe 
1DF4    89 EC                     mov         sp,bp 
1DF6    5D                        pop         bp 
1DF7    5F                        pop         di 
1DF8    5E                        pop         si 
1DF9    C3                        ret         
1DFA                          L$255:
1DFA    B8 6C 00                  mov         ax,0x006c 
1DFD    50                        push        ax 
1DFE    B8 40 00                  mov         ax,0x0040 
1E01    50                        push        ax 
1E02    E8 00 00                  call        _read_word 
1E05    83 C4 04                  add         sp,0x0004 
1E08    89 C6                     mov         si,ax 
1E0A                          L$256:
1E0A    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1E0D    05 05 00                  add         ax,0x0005 
1E10    50                        push        ax 
1E11    E8 00 00                  call        _inb 
1E14    83 C4 02                  add         sp,0x0002 
1E17    24 60                     and         al,0x60 
1E19    3C 60                     cmp         al,0x60 
1E1B    74 1F                     je          L$257 
1E1D    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
1E21    74 19                     je          L$257 
1E23    B8 6C 00                  mov         ax,0x006c 
1E26    50                        push        ax 
1E27    B8 40 00                  mov         ax,0x0040 
1E2A    50                        push        ax 
1E2B    E8 00 00                  call        _read_word 
1E2E    83 C4 04                  add         sp,0x0004 
1E31    39 F0                     cmp         ax,si 
1E33    74 D5                     je          L$256 
1E35    89 C6                     mov         si,ax 
1E37    FE 4E FE                  dec         byte ptr -0x2[bp] 
1E3A    EB CE                     jmp         L$256 
1E3C                          L$257:
1E3C    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
1E40    76 25                     jbe         L$258 
1E42    8A 46 08                  mov         al,byte ptr 0x8[bp] 
1E45    30 E4                     xor         ah,ah 
1E47    50                        push        ax 
1E48    FF 76 FA                  push        word ptr -0x6[bp] 
1E4B    E8 00 00                  call        _outb 
1E4E    83 C4 04                  add         sp,0x0004 
1E51    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1E54    05 05 00                  add         ax,0x0005 
1E57    50                        push        ax 
1E58    E8 00 00                  call        _inb 
1E5B    83 C4 02                  add         sp,0x0002 
1E5E    88 46 FC                  mov         byte ptr -0x4[bp],al 
1E61    8A A6 FC FF               mov         ah,byte ptr -0x4[bp] 
1E65    EB 02                     jmp         L$259 
1E67                          L$258:
1E67    B4 80                     mov         ah,0x80 
1E69                          L$259:
1E69    89 86 08 00               mov         word ptr 0x8[bp],ax 
1E6D    83 A6 12 00 FE            and         word ptr 0x12[bp],0xfffe 
1E72    89 EC                     mov         sp,bp 
1E74    5D                        pop         bp 
1E75    5F                        pop         di 
1E76    5E                        pop         si 
1E77    C3                        ret         
1E78                          L$260:
1E78    B8 6C 00                  mov         ax,0x006c 
1E7B    50                        push        ax 
1E7C    B8 40 00                  mov         ax,0x0040 
1E7F    50                        push        ax 
1E80    E8 00 00                  call        _read_word 
1E83    83 C4 04                  add         sp,0x0004 
1E86    89 C6                     mov         si,ax 
1E88                          L$261:
1E88    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1E8B    05 05 00                  add         ax,0x0005 
1E8E    50                        push        ax 
1E8F    E8 00 00                  call        _inb 
1E92    83 C4 02                  add         sp,0x0002 
1E95    A8 01                     test        al,0x01 
1E97    75 1F                     jne         L$262 
1E99    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
1E9D    74 19                     je          L$262 
1E9F    B8 6C 00                  mov         ax,0x006c 
1EA2    50                        push        ax 
1EA3    B8 40 00                  mov         ax,0x0040 
1EA6    50                        push        ax 
1EA7    E8 00 00                  call        _read_word 
1EAA    83 C4 04                  add         sp,0x0004 
1EAD    39 F0                     cmp         ax,si 
1EAF    74 D7                     je          L$261 
1EB1    89 C6                     mov         si,ax 
1EB3    FE 4E FE                  dec         byte ptr -0x2[bp] 
1EB6    EB D0                     jmp         L$261 
1EB8                          L$262:
1EB8    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
1EBC    76 2A                     jbe         L$263 
1EBE    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1EC1    05 05 00                  add         ax,0x0005 
1EC4    50                        push        ax 
1EC5    E8 00 00                  call        _inb 
1EC8    83 C4 02                  add         sp,0x0002 
1ECB    88 46 FC                  mov         byte ptr -0x4[bp],al 
1ECE    8A A6 FC FF               mov         ah,byte ptr -0x4[bp] 
1ED2    89 86 08 00               mov         word ptr 0x8[bp],ax 
1ED6    FF 76 FA                  push        word ptr -0x6[bp] 
1ED9    E8 00 00                  call        _inb 
1EDC    83 C4 02                  add         sp,0x0002 
1EDF    88 46 FC                  mov         byte ptr -0x4[bp],al 
1EE2    8A 86 FC FF               mov         al,byte ptr -0x4[bp] 
1EE6    EB 02                     jmp         L$264 
1EE8                          L$263:
1EE8    B4 80                     mov         ah,0x80 
1EEA                          L$264:
1EEA    89 86 08 00               mov         word ptr 0x8[bp],ax 
1EEE    83 A6 12 00 FE            and         word ptr 0x12[bp],0xfffe 
1EF3    89 EC                     mov         sp,bp 
1EF5    5D                        pop         bp 
1EF6    5F                        pop         di 
1EF7    5E                        pop         si 
1EF8    C3                        ret         
1EF9    FC                        cld         

Routine Size: 508 bytes,    Routine Base: _TEXT + 1CFE

1EFA                          _int15_function:
1EFA    56                        push        si 
1EFB    57                        push        di 
1EFC    55                        push        bp 
1EFD    89 E5                     mov         bp,sp 
1EFF    83 EC 02                  sub         sp,0x0002 
1F02    B8 0E 00                  mov         ax,0x000e 
1F05    50                        push        ax 
1F06    B8 40 00                  mov         ax,0x0040 
1F09    50                        push        ax 
1F0A    E8 00 00                  call        _read_word 
1F0D    83 C4 04                  add         sp,0x0004 
1F10    89 46 FE                  mov         word ptr -0x2[bp],ax 
1F13    B1 08                     mov         cl,0x08 
1F15    8B 46 14                  mov         ax,word ptr 0x14[bp] 
1F18    D3 E8                     shr         ax,cl 
1F1A    3D 91 00                  cmp         ax,0x0091 
1F1D    72 1E                     jb          L$266 
1F1F    76 44                     jbe         L$269 
1F21    3D C0 00                  cmp         ax,0x00c0 
1F24    72 0F                     jb          L$265 
1F26    76 64                     jbe         L$274 
1F28    3D D8 00                  cmp         ax,0x00d8 
1F2B    74 5B                     je          L$272 
1F2D    3D C1 00                  cmp         ax,0x00c1 
1F30    74 58                     je          L$273 
1F32    E9 A2 00                  jmp         L$279 
1F35                          L$265:
1F35    3D BF 00                  cmp         ax,0x00bf 
1F38    74 37                     je          L$271 
1F3A    E9 9A 00                  jmp         L$279 
1F3D                          L$266:
1F3D    3D 4F 00                  cmp         ax,0x004f 
1F40    72 0F                     jb          L$267 
1F42    76 1C                     jbe         L$268 
1F44    3D 90 00                  cmp         ax,0x0090 
1F47    74 6B                     je          L$276 
1F49    3D 52 00                  cmp         ax,0x0052 
1F4C    74 1A                     je          L$270 
1F4E    E9 86 00                  jmp         L$279 
1F51                          L$267:
1F51    3D 41 00                  cmp         ax,0x0041 
1F54    75 60                     jne         L$277 
1F56    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1F5B    B4 86                     mov         ah,0x86 
1F5D    E9 7E 00                  jmp         L$280 
1F60                          L$268:
1F60    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1F65                          L$269:
1F65    E9 7A 00                  jmp         L$281 
1F68                          L$270:
1F68    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1F6D    B4 00                     mov         ah,0x00 
1F6F    EB 6D                     jmp         L$280 
1F71                          L$271:
1F71    B8 37 03                  mov         ax,offset DGROUP:L$387 
1F74    50                        push        ax 
1F75    B8 04 00                  mov         ax,0x0004 
1F78    50                        push        ax 
1F79    E8 00 00                  call        _bios_printf 
1F7C    83 C4 04                  add         sp,0x0004 
1F7F    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1F84    B4 86                     mov         ah,0x86 
1F86    EB 56                     jmp         L$280 
1F88                          L$272:
1F88    EB 2E                     jmp         L$278 
1F8A                          L$273:
1F8A    EB 1B                     jmp         L$275 
1F8C                          L$274:
1F8C    B8 F5 E6                  mov         ax,0xe6f5 
1F8F    89 86 0E 00               mov         word ptr 0xe[bp],ax 
1F93    B8 00 F0                  mov         ax,0xf000 
1F96    89 86 16 00               mov         word ptr 0x16[bp],ax 
1F9A    B4 00                     mov         ah,0x00 
1F9C    89 86 14 00               mov         word ptr 0x14[bp],ax 
1FA0    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1FA5    EB 3B                     jmp         L$281 
1FA7                          L$275:
1FA7    8B 86 FE FF               mov         ax,word ptr -0x2[bp] 
1FAB    89 86 16 00               mov         word ptr 0x16[bp],ax 
1FAF    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
1FB4                          L$276:
1FB4    EB 2C                     jmp         L$281 
1FB6                          L$277:
1FB6    EB 1F                     jmp         L$279 
1FB8                          L$278:
1FB8    B8 66 03                  mov         ax,offset DGROUP:L$388 
1FBB    50                        push        ax 
1FBC    B8 08 00                  mov         ax,0x0008 
1FBF    50                        push        ax 
1FC0    E8 00 00                  call        _bios_printf 
1FC3    83 C4 04                  add         sp,0x0004 
1FC6    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1FCB    B4 86                     mov         ah,0x86 
1FCD    89 86 14 00               mov         word ptr 0x14[bp],ax 
1FD1    89 EC                     mov         sp,bp 
1FD3    5D                        pop         bp 
1FD4    5F                        pop         di 
1FD5    5E                        pop         si 
1FD6    C3                        ret         
1FD7                          L$279:
1FD7    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
1FDC    B4 86                     mov         ah,0x86 
1FDE                          L$280:
1FDE    89 86 14 00               mov         word ptr 0x14[bp],ax 
1FE2                          L$281:
1FE2    89 EC                     mov         sp,bp 
1FE4    5D                        pop         bp 
1FE5    5F                        pop         di 
1FE6    5E                        pop         si 
1FE7    C3                        ret         
1FE8                          L$282:
1FE8    3F 20                                           DW	offset L$284
1FEA    F0 20                                           DW	offset L$292
1FEC    C8 21                                           DW	offset L$299
1FEE    70 22                                           DW	offset L$311
1FF0    19 23                                           DW	offset L$318
1FF2    F0 20                                           DW	offset L$292
1FF4    65 23                                           DW	offset L$320
1FF6    AB 24                                           DW	offset L$334
1FF8                          L$283:
1FF8    DB 21                                           DW	offset L$300
1FFA    E1 21                                           DW	offset L$301
1FFC    E7 21                                           DW	offset L$302
1FFE    ED 21                                           DW	offset L$303
2000    F3 21                                           DW	offset L$304
2002    F9 21                                           DW	offset L$305
2004    FF 21                                           DW	offset L$306

Routine Size: 268 bytes,    Routine Base: _TEXT + 1EFA

2006                          _int15_function_mouse:
2006    56                        push        si 
2007    57                        push        di 
2008    55                        push        bp 
2009    89 E5                     mov         bp,sp 
200B    83 EC 0E                  sub         sp,0x000e 
200E    B8 0E 00                  mov         ax,0x000e 
2011    50                        push        ax 
2012    B8 40 00                  mov         ax,0x0040 
2015    50                        push        ax 
2016    E8 00 00                  call        _read_word 
2019    89 C7                     mov         di,ax 
201B    83 C4 04                  add         sp,0x0004 
201E    89 C6                     mov         si,ax 
2020    B1 08                     mov         cl,0x08 
2022    8B 46 14                  mov         ax,word ptr 0x14[bp] 
2025    D3 E8                     shr         ax,cl 
2027    3D C2 00                  cmp         ax,0x00c2 
202A    75 59                     jne         L$286 
202C    8B 46 14                  mov         ax,word ptr 0x14[bp] 
202F    30 E4                     xor         ah,ah 
2031    3D 07 00                  cmp         ax,0x0007 
2034    77 6E                     ja          L$288 
2036    89 C3                     mov         bx,ax 
2038    D1 E3                     shl         bx,0x01 
203A    2E FF A7 E8 1F            jmp         word ptr cs:L$282[bx] 
203F                          L$284:
203F    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
2042    D3 E8                     shr         ax,cl 
2044    3D 01 00                  cmp         ax,0x0001 
2047    74 3F                     je          L$287 
2049    85 C0                     test        ax,ax 
204B    75 5A                     jne         L$289 
204D    E8 00 00                  call        _inhibit_mouse_int_and_events 
2050    B8 F5 00                  mov         ax,0x00f5 
2053    50                        push        ax 
2054    E8 00 00                  call        _send_to_mouse_ctrl 
2057    83 C4 02                  add         sp,0x0002 
205A    88 46 F6                  mov         byte ptr -0xa[bp],al 
205D    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2061    75 16                     jne         L$285 
2063    E8 AC 06                  call        _get_mouse_data 
2066    88 46 F8                  mov         byte ptr -0x8[bp],al 
2069    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
206D    75 0A                     jne         L$285 
206F    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
2074    B4 00                     mov         ah,0x00 
2076    E9 B8 04                  jmp         L$339 
2079                          L$285:
2079    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
207E    8A A6 F6 FF               mov         ah,byte ptr -0xa[bp] 
2082    E9 AC 04                  jmp         L$339 
2085                          L$286:
2085    E9 A2 04                  jmp         L$338 
2088                          L$287:
2088    B8 27 00                  mov         ax,0x0027 
208B    50                        push        ax 
208C    57                        push        di 
208D    E8 00 00                  call        _read_byte 
2090    83 C4 04                  add         sp,0x0004 
2093    88 46 F4                  mov         byte ptr -0xc[bp],al 
2096    A8 80                     test        al,0x80 
2098    75 0F                     jne         L$290 
209A    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
209F    B4 05                     mov         ah,0x05 
20A1    E9 8D 04                  jmp         L$339 
20A4                          L$288:
20A4    E9 72 04                  jmp         L$337 
20A7                          L$289:
20A7    EB 36                     jmp         L$291 
20A9                          L$290:
20A9    E8 00 00                  call        _inhibit_mouse_int_and_events 
20AC    B8 F4 00                  mov         ax,0x00f4 
20AF    50                        push        ax 
20B0    E8 00 00                  call        _send_to_mouse_ctrl 
20B3    83 C4 02                  add         sp,0x0002 
20B6    88 46 F6                  mov         byte ptr -0xa[bp],al 
20B9    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
20BD    75 BA                     jne         L$285 
20BF    E8 50 06                  call        _get_mouse_data 
20C2    88 46 F8                  mov         byte ptr -0x8[bp],al 
20C5    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
20C9    75 AE                     jne         L$285 
20CB    E8 00 00                  call        _enable_mouse_int_and_events 
20CE    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
20D3    B4 00                     mov         ah,0x00 
20D5    89 86 14 00               mov         word ptr 0x14[bp],ax 
20D9    89 EC                     mov         sp,bp 
20DB    5D                        pop         bp 
20DC    5F                        pop         di 
20DD    5E                        pop         si 
20DE    C3                        ret         
20DF                          L$291:
20DF    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
20E4    B4 01                     mov         ah,0x01 
20E6    89 86 14 00               mov         word ptr 0x14[bp],ax 
20EA    89 EC                     mov         sp,bp 
20EC    5D                        pop         bp 
20ED    5F                        pop         di 
20EE    5E                        pop         si 
20EF    C3                        ret         
20F0                          L$292:
20F0    8B 46 14                  mov         ax,word ptr 0x14[bp] 
20F3    30 E4                     xor         ah,ah 
20F5    3D 05 00                  cmp         ax,0x0005 
20F8    75 51                     jne         L$294 
20FA    B1 08                     mov         cl,0x08 
20FC    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
20FF    D3 E8                     shr         ax,cl 
2101    3D 03 00                  cmp         ax,0x0003 
2104    74 11                     je          L$293 
2106    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
210B    B4 02                     mov         ah,0x02 
210D    89 86 14 00               mov         word ptr 0x14[bp],ax 
2111    89 EC                     mov         sp,bp 
2113    5D                        pop         bp 
2114    5F                        pop         di 
2115    5E                        pop         si 
2116    C3                        ret         
2117                          L$293:
2117    B8 27 00                  mov         ax,0x0027 
211A    50                        push        ax 
211B    56                        push        si 
211C    E8 00 00                  call        _read_byte 
211F    83 C4 04                  add         sp,0x0004 
2122    B1 08                     mov         cl,0x08 
2124    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
2127    D3 E8                     shr         ax,cl 
2129    88 46 F4                  mov         byte ptr -0xc[bp],al 
212C    31 C0                     xor         ax,ax 
212E    50                        push        ax 
212F    B8 26 00                  mov         ax,0x0026 
2132    50                        push        ax 
2133    56                        push        si 
2134    E8 00 00                  call        _write_byte 
2137    83 C4 06                  add         sp,0x0006 
213A    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
213D    30 E4                     xor         ah,ah 
213F    50                        push        ax 
2140    B8 27 00                  mov         ax,0x0027 
2143    50                        push        ax 
2144    56                        push        si 
2145    E8 00 00                  call        _write_byte 
2148    83 C4 06                  add         sp,0x0006 
214B                          L$294:
214B    E8 00 00                  call        _inhibit_mouse_int_and_events 
214E    B8 FF 00                  mov         ax,0x00ff 
2151    50                        push        ax 
2152    E8 00 00                  call        _send_to_mouse_ctrl 
2155    83 C4 02                  add         sp,0x0002 
2158    88 46 F6                  mov         byte ptr -0xa[bp],al 
215B    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
215F    74 03                     je          L$296 
2161                          L$295:
2161    E9 15 FF                  jmp         L$285 
2164                          L$296:
2164    E8 AB 05                  call        _get_mouse_data 
2167    88 46 FC                  mov         byte ptr -0x4[bp],al 
216A    80 7E FC FE               cmp         byte ptr -0x4[bp],0xfe 
216E    75 08                     jne         L$297 
2170    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2175    E9 BD 03                  jmp         L$340 
2178                          L$297:
2178    80 7E FC FA               cmp         byte ptr -0x4[bp],0xfa 
217C    74 14                     je          L$298 
217E    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
2181    30 E4                     xor         ah,ah 
2183    50                        push        ax 
2184    B8 7D 03                  mov         ax,offset DGROUP:L$389 
2187    50                        push        ax 
2188    B8 07 00                  mov         ax,0x0007 
218B    50                        push        ax 
218C    E8 00 00                  call        _bios_printf 
218F    83 C4 06                  add         sp,0x0006 
2192                          L$298:
2192    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2196    75 C9                     jne         L$295 
2198    E8 77 05                  call        _get_mouse_data 
219B    88 46 F8                  mov         byte ptr -0x8[bp],al 
219E    E8 71 05                  call        _get_mouse_data 
21A1    88 46 FA                  mov         byte ptr -0x6[bp],al 
21A4    E8 00 00                  call        _enable_mouse_int_and_events 
21A7    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
21AC    B4 00                     mov         ah,0x00 
21AE    89 86 14 00               mov         word ptr 0x14[bp],ax 
21B2    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
21B6    89 86 0E 00               mov         word ptr 0xe[bp],ax 
21BA    8A A6 FA FF               mov         ah,byte ptr -0x6[bp] 
21BE    89 86 0E 00               mov         word ptr 0xe[bp],ax 
21C2    89 EC                     mov         sp,bp 
21C4    5D                        pop         bp 
21C5    5F                        pop         di 
21C6    5E                        pop         si 
21C7    C3                        ret         
21C8                          L$299:
21C8    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
21CB    D3 E8                     shr         ax,cl 
21CD    3D 06 00                  cmp         ax,0x0006 
21D0    77 33                     ja          L$307 
21D2    89 C3                     mov         bx,ax 
21D4    D1 E3                     shl         bx,0x01 
21D6    2E FF A7 F8 1F            jmp         word ptr cs:L$283[bx] 
21DB                          L$300:
21DB    C6 46 F8 0A               mov         byte ptr -0x8[bp],0x0a 
21DF    EB 28                     jmp         L$308 
21E1                          L$301:
21E1    C6 46 F8 14               mov         byte ptr -0x8[bp],0x14 
21E5    EB 22                     jmp         L$308 
21E7                          L$302:
21E7    C6 46 F8 28               mov         byte ptr -0x8[bp],0x28 
21EB    EB 1C                     jmp         L$308 
21ED                          L$303:
21ED    C6 46 F8 3C               mov         byte ptr -0x8[bp],0x3c 
21F1    EB 16                     jmp         L$308 
21F3                          L$304:
21F3    C6 46 F8 50               mov         byte ptr -0x8[bp],0x50 
21F7    EB 10                     jmp         L$308 
21F9                          L$305:
21F9    C6 46 F8 64               mov         byte ptr -0x8[bp],0x64 
21FD    EB 0A                     jmp         L$308 
21FF                          L$306:
21FF    C6 46 F8 C8               mov         byte ptr -0x8[bp],0xc8 
2203    EB 04                     jmp         L$308 
2205                          L$307:
2205    C6 46 F8 00               mov         byte ptr -0x8[bp],0x00 
2209                          L$308:
2209    80 7E F8 00               cmp         byte ptr -0x8[bp],0x00 
220D    76 50                     jbe         L$310 
220F    B8 F3 00                  mov         ax,0x00f3 
2212    50                        push        ax 
2213    E8 00 00                  call        _send_to_mouse_ctrl 
2216    83 C4 02                  add         sp,0x0002 
2219    88 46 F6                  mov         byte ptr -0xa[bp],al 
221C    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2220    75 2C                     jne         L$309 
2222    E8 ED 04                  call        _get_mouse_data 
2225    88 46 FA                  mov         byte ptr -0x6[bp],al 
2228    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
222B    30 E4                     xor         ah,ah 
222D    50                        push        ax 
222E    E8 00 00                  call        _send_to_mouse_ctrl 
2231    83 C4 02                  add         sp,0x0002 
2234    88 46 F6                  mov         byte ptr -0xa[bp],al 
2237    E8 D8 04                  call        _get_mouse_data 
223A    88 46 FA                  mov         byte ptr -0x6[bp],al 
223D    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
2242    B4 00                     mov         ah,0x00 
2244    89 86 14 00               mov         word ptr 0x14[bp],ax 
2248    89 EC                     mov         sp,bp 
224A    5D                        pop         bp 
224B    5F                        pop         di 
224C    5E                        pop         si 
224D    C3                        ret         
224E                          L$309:
224E    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2253    B4 86                     mov         ah,0x86 
2255    89 86 14 00               mov         word ptr 0x14[bp],ax 
2259    89 EC                     mov         sp,bp 
225B    5D                        pop         bp 
225C    5F                        pop         di 
225D    5E                        pop         si 
225E    C3                        ret         
225F                          L$310:
225F    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2264    B4 86                     mov         ah,0x86 
2266    89 86 14 00               mov         word ptr 0x14[bp],ax 
226A    89 EC                     mov         sp,bp 
226C    5D                        pop         bp 
226D    5F                        pop         di 
226E    5E                        pop         si 
226F    C3                        ret         
2270                          L$311:
2270    E8 00 00                  call        _inhibit_mouse_int_and_events 
2273    88 46 FE                  mov         byte ptr -0x2[bp],al 
2276    B1 08                     mov         cl,0x08 
2278    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
227B    D3 E8                     shr         ax,cl 
227D    3D 04 00                  cmp         ax,0x0004 
2280    73 6F                     jae         L$314 
2282    B8 E8 00                  mov         ax,0x00e8 
2285    50                        push        ax 
2286    E8 00 00                  call        _send_to_mouse_ctrl 
2289    83 C4 02                  add         sp,0x0002 
228C    88 46 F6                  mov         byte ptr -0xa[bp],al 
228F    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2293    75 5E                     jne         L$315 
2295    E8 7A 04                  call        _get_mouse_data 
2298    88 46 F8                  mov         byte ptr -0x8[bp],al 
229B    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
229F    74 14                     je          L$312 
22A1    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
22A4    30 E4                     xor         ah,ah 
22A6    50                        push        ax 
22A7    B8 A8 03                  mov         ax,offset DGROUP:L$390 
22AA    50                        push        ax 
22AB    B8 07 00                  mov         ax,0x0007 
22AE    50                        push        ax 
22AF    E8 00 00                  call        _bios_printf 
22B2    83 C4 06                  add         sp,0x0006 
22B5                          L$312:
22B5    B1 08                     mov         cl,0x08 
22B7    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
22BA    D3 E8                     shr         ax,cl 
22BC    30 E4                     xor         ah,ah 
22BE    50                        push        ax 
22BF    E8 00 00                  call        _send_to_mouse_ctrl 
22C2    83 C4 02                  add         sp,0x0002 
22C5    88 46 F6                  mov         byte ptr -0xa[bp],al 
22C8    E8 47 04                  call        _get_mouse_data 
22CB    88 46 F8                  mov         byte ptr -0x8[bp],al 
22CE    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
22D2    74 14                     je          L$313 
22D4    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
22D7    30 E4                     xor         ah,ah 
22D9    50                        push        ax 
22DA    B8 A8 03                  mov         ax,offset DGROUP:L$390 
22DD    50                        push        ax 
22DE    B8 07 00                  mov         ax,0x0007 
22E1    50                        push        ax 
22E2    E8 00 00                  call        _bios_printf 
22E5    83 C4 06                  add         sp,0x0006 
22E8                          L$313:
22E8    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
22ED    B4 00                     mov         ah,0x00 
22EF    EB 12                     jmp         L$317 
22F1                          L$314:
22F1    EB 09                     jmp         L$316 
22F3                          L$315:
22F3    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
22F8    B4 86                     mov         ah,0x86 
22FA    EB 07                     jmp         L$317 
22FC                          L$316:
22FC    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2301    B4 86                     mov         ah,0x86 
2303                          L$317:
2303    89 86 14 00               mov         word ptr 0x14[bp],ax 
2307    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
230A    30 E4                     xor         ah,ah 
230C    50                        push        ax 
230D    E8 00 00                  call        _set_kbd_command_byte 
2310    83 C4 02                  add         sp,0x0002 
2313    89 EC                     mov         sp,bp 
2315    5D                        pop         bp 
2316    5F                        pop         di 
2317    5E                        pop         si 
2318    C3                        ret         
2319                          L$318:
2319    E8 00 00                  call        _inhibit_mouse_int_and_events 
231C    B8 F2 00                  mov         ax,0x00f2 
231F    50                        push        ax 
2320    E8 00 00                  call        _send_to_mouse_ctrl 
2323    83 C4 02                  add         sp,0x0002 
2326    88 46 F6                  mov         byte ptr -0xa[bp],al 
2329    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
232D    75 25                     jne         L$319 
232F    E8 E0 03                  call        _get_mouse_data 
2332    88 46 F8                  mov         byte ptr -0x8[bp],al 
2335    E8 DA 03                  call        _get_mouse_data 
2338    88 46 FA                  mov         byte ptr -0x6[bp],al 
233B    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
2340    B4 00                     mov         ah,0x00 
2342    89 86 14 00               mov         word ptr 0x14[bp],ax 
2346    8A A6 FA FF               mov         ah,byte ptr -0x6[bp] 
234A    89 86 0E 00               mov         word ptr 0xe[bp],ax 
234E    89 EC                     mov         sp,bp 
2350    5D                        pop         bp 
2351    5F                        pop         di 
2352    5E                        pop         si 
2353    C3                        ret         
2354                          L$319:
2354    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2359    B4 86                     mov         ah,0x86 
235B    89 86 14 00               mov         word ptr 0x14[bp],ax 
235F    89 EC                     mov         sp,bp 
2361    5D                        pop         bp 
2362    5F                        pop         di 
2363    5E                        pop         si 
2364    C3                        ret         
2365                          L$320:
2365    8B 76 0E                  mov         si,word ptr 0xe[bp] 
2368    D3 EE                     shr         si,cl 
236A    85 F6                     test        si,si 
236C    76 0B                     jbe         L$322 
236E    83 FE 02                  cmp         si,0x0002 
2371    76 03                     jbe         L$321 
2373    E9 19 01                  jmp         L$333 
2376                          L$321:
2376    E9 AB 00                  jmp         L$325 
2379                          L$322:
2379    E8 00 00                  call        _inhibit_mouse_int_and_events 
237C    88 46 FE                  mov         byte ptr -0x2[bp],al 
237F    B8 E9 00                  mov         ax,0x00e9 
2382    50                        push        ax 
2383    E8 00 00                  call        _send_to_mouse_ctrl 
2386    83 C4 02                  add         sp,0x0002 
2389    88 46 F6                  mov         byte ptr -0xa[bp],al 
238C    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2390    75 73                     jne         L$324 
2392    E8 7D 03                  call        _get_mouse_data 
2395    88 46 F8                  mov         byte ptr -0x8[bp],al 
2398    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
239C    74 14                     je          L$323 
239E    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
23A1    30 E4                     xor         ah,ah 
23A3    50                        push        ax 
23A4    B8 A8 03                  mov         ax,offset DGROUP:L$390 
23A7    50                        push        ax 
23A8    B8 07 00                  mov         ax,0x0007 
23AB    50                        push        ax 
23AC    E8 00 00                  call        _bios_printf 
23AF    83 C4 06                  add         sp,0x0006 
23B2                          L$323:
23B2    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
23B6    75 4D                     jne         L$324 
23B8    E8 57 03                  call        _get_mouse_data 
23BB    88 46 F8                  mov         byte ptr -0x8[bp],al 
23BE    E8 51 03                  call        _get_mouse_data 
23C1    88 46 FA                  mov         byte ptr -0x6[bp],al 
23C4    E8 4B 03                  call        _get_mouse_data 
23C7    88 46 FC                  mov         byte ptr -0x4[bp],al 
23CA    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
23CE    75 35                     jne         L$324 
23D0    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
23D5    B4 00                     mov         ah,0x00 
23D7    89 86 14 00               mov         word ptr 0x14[bp],ax 
23DB    8A 86 F8 FF               mov         al,byte ptr -0x8[bp] 
23DF    89 86 0E 00               mov         word ptr 0xe[bp],ax 
23E3    8A 86 FA FF               mov         al,byte ptr -0x6[bp] 
23E7    89 86 12 00               mov         word ptr 0x12[bp],ax 
23EB    8A 86 FC FF               mov         al,byte ptr -0x4[bp] 
23EF    89 86 10 00               mov         word ptr 0x10[bp],ax 
23F3    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
23F6    30 E4                     xor         ah,ah 
23F8    50                        push        ax 
23F9    E8 00 00                  call        _set_kbd_command_byte 
23FC    83 C4 02                  add         sp,0x0002 
23FF    89 EC                     mov         sp,bp 
2401    5D                        pop         bp 
2402    5F                        pop         di 
2403    5E                        pop         si 
2404    C3                        ret         
2405                          L$324:
2405    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
240A    8A A6 F6 FF               mov         ah,byte ptr -0xa[bp] 
240E    89 86 14 00               mov         word ptr 0x14[bp],ax 
2412    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
2415    30 E4                     xor         ah,ah 
2417    50                        push        ax 
2418    E8 00 00                  call        _set_kbd_command_byte 
241B    83 C4 02                  add         sp,0x0002 
241E    89 EC                     mov         sp,bp 
2420    5D                        pop         bp 
2421    5F                        pop         di 
2422    5E                        pop         si 
2423    C3                        ret         
2424                          L$325:
2424    E8 00 00                  call        _inhibit_mouse_int_and_events 
2427    88 46 FE                  mov         byte ptr -0x2[bp],al 
242A    B1 08                     mov         cl,0x08 
242C    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
242F    D3 E8                     shr         ax,cl 
2431    3D 01 00                  cmp         ax,0x0001 
2434    75 05                     jne         L$326 
2436    B8 E6 00                  mov         ax,0x00e6 
2439    EB 03                     jmp         L$327 
243B                          L$326:
243B    B8 E7 00                  mov         ax,0x00e7 
243E                          L$327:
243E    50                        push        ax 
243F    E8 00 00                  call        _send_to_mouse_ctrl 
2442    83 C4 02                  add         sp,0x0002 
2445    88 46 F6                  mov         byte ptr -0xa[bp],al 
2448    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
244C    75 15                     jne         L$330 
244E    E8 C1 02                  call        _get_mouse_data 
2451    88 46 F8                  mov         byte ptr -0x8[bp],al 
2454    80 7E F8 FA               cmp         byte ptr -0x8[bp],0xfa 
2458    74 04                     je          L$328 
245A    B0 01                     mov         al,0x01 
245C    EB 02                     jmp         L$329 
245E                          L$328:
245E    30 C0                     xor         al,al 
2460                          L$329:
2460    88 46 F6                  mov         byte ptr -0xa[bp],al 
2463                          L$330:
2463    80 7E F6 00               cmp         byte ptr -0xa[bp],0x00 
2467    75 09                     jne         L$331 
2469    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
246E    B4 00                     mov         ah,0x00 
2470    EB 07                     jmp         L$332 
2472                          L$331:
2472    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2477    B4 86                     mov         ah,0x86 
2479                          L$332:
2479    89 86 14 00               mov         word ptr 0x14[bp],ax 
247D    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
2480    30 E4                     xor         ah,ah 
2482    50                        push        ax 
2483    E8 00 00                  call        _set_kbd_command_byte 
2486    83 C4 02                  add         sp,0x0002 
2489    89 EC                     mov         sp,bp 
248B    5D                        pop         bp 
248C    5F                        pop         di 
248D    5E                        pop         si 
248E    C3                        ret         
248F                          L$333:
248F    B1 08                     mov         cl,0x08 
2491    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
2494    D3 E8                     shr         ax,cl 
2496    50                        push        ax 
2497    B8 D4 03                  mov         ax,offset DGROUP:L$391 
249A    50                        push        ax 
249B    B8 07 00                  mov         ax,0x0007 
249E    50                        push        ax 
249F    E8 00 00                  call        _bios_printf 
24A2    83 C4 06                  add         sp,0x0006 
24A5    89 EC                     mov         sp,bp 
24A7    5D                        pop         bp 
24A8    5F                        pop         di 
24A9    5E                        pop         si 
24AA    C3                        ret         
24AB                          L$334:
24AB    8B 46 0E                  mov         ax,word ptr 0xe[bp] 
24AE    89 46 F2                  mov         word ptr -0xe[bp],ax 
24B1    50                        push        ax 
24B2    B8 22 00                  mov         ax,0x0022 
24B5    50                        push        ax 
24B6    57                        push        di 
24B7    E8 00 00                  call        _write_word 
24BA    83 C4 06                  add         sp,0x0006 
24BD    FF 76 16                  push        word ptr 0x16[bp] 
24C0    B8 24 00                  mov         ax,0x0024 
24C3    50                        push        ax 
24C4    57                        push        di 
24C5    E8 00 00                  call        _write_word 
24C8    83 C4 06                  add         sp,0x0006 
24CB    B8 27 00                  mov         ax,0x0027 
24CE    50                        push        ax 
24CF    57                        push        di 
24D0    E8 00 00                  call        _read_byte 
24D3    83 C4 04                  add         sp,0x0004 
24D6    88 46 F4                  mov         byte ptr -0xc[bp],al 
24D9    83 7E F2 00               cmp         word ptr -0xe[bp],0x0000 
24DD    75 14                     jne         L$335 
24DF    83 7E 16 00               cmp         word ptr 0x16[bp],0x0000 
24E3    75 0E                     jne         L$335 
24E5    A8 80                     test        al,0x80 
24E7    74 0E                     je          L$336 
24E9    24 7F                     and         al,0x7f 
24EB    88 46 F4                  mov         byte ptr -0xc[bp],al 
24EE    E8 00 00                  call        _inhibit_mouse_int_and_events 
24F1    EB 04                     jmp         L$336 
24F3                          L$335:
24F3    80 4E F4 80               or          byte ptr -0xc[bp],0x80 
24F7                          L$336:
24F7    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
24FA    30 E4                     xor         ah,ah 
24FC    50                        push        ax 
24FD    B8 27 00                  mov         ax,0x0027 
2500    50                        push        ax 
2501    56                        push        si 
2502    E8 00 00                  call        _write_byte 
2505    83 C4 06                  add         sp,0x0006 
2508    83 A6 1E 00 FE            and         word ptr 0x1e[bp],0xfffe 
250D    B4 00                     mov         ah,0x00 
250F    89 86 14 00               mov         word ptr 0x14[bp],ax 
2513    89 EC                     mov         sp,bp 
2515    5D                        pop         bp 
2516    5F                        pop         di 
2517    5E                        pop         si 
2518    C3                        ret         
2519                          L$337:
2519    B4 01                     mov         ah,0x01 
251B    89 86 14 00               mov         word ptr 0x14[bp],ax 
251F    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
2524    89 EC                     mov         sp,bp 
2526    5D                        pop         bp 
2527    5F                        pop         di 
2528    5E                        pop         si 
2529    C3                        ret         
252A                          L$338:
252A    83 8E 1E 00 01            or          word ptr 0x1e[bp],0x0001 
252F    B4 86                     mov         ah,0x86 
2531                          L$339:
2531    89 86 14 00               mov         word ptr 0x14[bp],ax 
2535                          L$340:
2535    89 EC                     mov         sp,bp 
2537    5D                        pop         bp 
2538    5F                        pop         di 
2539    5E                        pop         si 
253A    C3                        ret         
253B    FC                        cld         
253C                          _inhibit_mouse_int_and_events:
253C    55                        push        bp 
253D    89 E5                     mov         bp,sp 
253F    83 EC 04                  sub         sp,0x0004 
2542    B8 64 00                  mov         ax,0x0064 
2545    50                        push        ax 
2546    E8 00 00                  call        _inb 
2549    83 C4 02                  add         sp,0x0002 
254C    A8 02                     test        al,0x02 
254E    74 12                     je          L$341 
2550    B8 EE 03                  mov         ax,offset DGROUP:L$392 
2553    50                        push        ax 
2554    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
2557    50                        push        ax 
2558    B8 07 00                  mov         ax,0x0007 
255B    50                        push        ax 
255C    E8 00 00                  call        _bios_printf 
255F    83 C4 06                  add         sp,0x0006 
2562                          L$341:
2562    B8 20 00                  mov         ax,0x0020 
2565    50                        push        ax 
2566    B8 64 00                  mov         ax,0x0064 
2569    50                        push        ax 
256A    E8 00 00                  call        _outb 
256D    83 C4 04                  add         sp,0x0004 
2570                          L$342:
2570    B8 64 00                  mov         ax,0x0064 
2573    50                        push        ax 
2574    E8 00 00                  call        _inb 
2577    83 C4 02                  add         sp,0x0002 
257A    24 01                     and         al,0x01 
257C    3C 01                     cmp         al,0x01 
257E    75 F0                     jne         L$342 
2580    B8 60 00                  mov         ax,0x0060 
2583    50                        push        ax 
2584    E8 00 00                  call        _inb 
2587    83 C4 02                  add         sp,0x0002 
258A    88 46 FE                  mov         byte ptr -0x2[bp],al 
258D    88 46 FC                  mov         byte ptr -0x4[bp],al 
2590    B8 64 00                  mov         ax,0x0064 
2593    50                        push        ax 
2594    E8 00 00                  call        _inb 
2597    83 C4 02                  add         sp,0x0002 
259A    A8 02                     test        al,0x02 
259C    74 12                     je          L$343 
259E    B8 EE 03                  mov         ax,offset DGROUP:L$392 
25A1    50                        push        ax 
25A2    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
25A5    50                        push        ax 
25A6    B8 07 00                  mov         ax,0x0007 
25A9    50                        push        ax 
25AA    E8 00 00                  call        _bios_printf 
25AD    83 C4 06                  add         sp,0x0006 
25B0                          L$343:
25B0    80 66 FC DD               and         byte ptr -0x4[bp],0xdd 
25B4    80 4E FC 20               or          byte ptr -0x4[bp],0x20 
25B8    B8 60 00                  mov         ax,0x0060 
25BB    50                        push        ax 
25BC    B8 64 00                  mov         ax,0x0064 
25BF    50                        push        ax 
25C0    E8 00 00                  call        _outb 
25C3    83 C4 04                  add         sp,0x0004 
25C6    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
25C9    30 E4                     xor         ah,ah 
25CB    50                        push        ax 
25CC    B8 60 00                  mov         ax,0x0060 
25CF    50                        push        ax 
25D0    E8 00 00                  call        _outb 
25D3    83 C4 04                  add         sp,0x0004 
25D6    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
25D9    89 EC                     mov         sp,bp 
25DB    5D                        pop         bp 
25DC    C3                        ret         
25DD    FC                        cld         
25DE                          _set_kbd_command_byte:
25DE    55                        push        bp 
25DF    89 E5                     mov         bp,sp 
25E1    B8 64 00                  mov         ax,0x0064 
25E4    50                        push        ax 
25E5    E8 00 00                  call        _inb 
25E8    83 C4 02                  add         sp,0x0002 
25EB    A8 02                     test        al,0x02 
25ED    74 12                     je          L$344 
25EF    B8 F9 03                  mov         ax,offset DGROUP:L$393 
25F2    50                        push        ax 
25F3    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
25F6    50                        push        ax 
25F7    B8 07 00                  mov         ax,0x0007 
25FA    50                        push        ax 
25FB    E8 00 00                  call        _bios_printf 
25FE    83 C4 06                  add         sp,0x0006 
2601                          L$344:
2601    B8 60 00                  mov         ax,0x0060 
2604    50                        push        ax 
2605    B8 64 00                  mov         ax,0x0064 
2608    50                        push        ax 
2609    E8 00 00                  call        _outb 
260C    83 C4 04                  add         sp,0x0004 
260F    8A 46 04                  mov         al,byte ptr 0x4[bp] 
2612    30 E4                     xor         ah,ah 
2614    50                        push        ax 
2615    B8 60 00                  mov         ax,0x0060 
2618    50                        push        ax 
2619    E8 00 00                  call        _outb 
261C    83 C4 04                  add         sp,0x0004 
261F    5D                        pop         bp 
2620    C3                        ret         
2621    FC                        cld         
2622                          _enable_mouse_int_and_events:
2622    55                        push        bp 
2623    89 E5                     mov         bp,sp 
2625    83 EC 02                  sub         sp,0x0002 
2628    B8 64 00                  mov         ax,0x0064 
262B    50                        push        ax 
262C    E8 00 00                  call        _inb 
262F    83 C4 02                  add         sp,0x0002 
2632    A8 02                     test        al,0x02 
2634    74 12                     je          L$345 
2636    B8 04 04                  mov         ax,offset DGROUP:L$394 
2639    50                        push        ax 
263A    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
263D    50                        push        ax 
263E    B8 07 00                  mov         ax,0x0007 
2641    50                        push        ax 
2642    E8 00 00                  call        _bios_printf 
2645    83 C4 06                  add         sp,0x0006 
2648                          L$345:
2648    B8 21 00                  mov         ax,0x0021 
264B    50                        push        ax 
264C    B8 64 00                  mov         ax,0x0064 
264F    50                        push        ax 
2650    E8 00 00                  call        _outb 
2653    83 C4 04                  add         sp,0x0004 
2656    B8 20 00                  mov         ax,0x0020 
2659    50                        push        ax 
265A    B8 64 00                  mov         ax,0x0064 
265D    50                        push        ax 
265E    E8 00 00                  call        _outb 
2661    83 C4 04                  add         sp,0x0004 
2664                          L$346:
2664    B8 64 00                  mov         ax,0x0064 
2667    50                        push        ax 
2668    E8 00 00                  call        _inb 
266B    83 C4 02                  add         sp,0x0002 
266E    24 01                     and         al,0x01 
2670    3C 01                     cmp         al,0x01 
2672    75 F0                     jne         L$346 
2674    B8 60 00                  mov         ax,0x0060 
2677    50                        push        ax 
2678    E8 00 00                  call        _inb 
267B    83 C4 02                  add         sp,0x0002 
267E    88 46 FE                  mov         byte ptr -0x2[bp],al 
2681    B8 64 00                  mov         ax,0x0064 
2684    50                        push        ax 
2685    E8 00 00                  call        _inb 
2688    83 C4 02                  add         sp,0x0002 
268B    A8 02                     test        al,0x02 
268D    74 12                     je          L$347 
268F    B8 04 04                  mov         ax,offset DGROUP:L$394 
2692    50                        push        ax 
2693    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
2696    50                        push        ax 
2697    B8 07 00                  mov         ax,0x0007 
269A    50                        push        ax 
269B    E8 00 00                  call        _bios_printf 
269E    83 C4 06                  add         sp,0x0006 
26A1                          L$347:
26A1    80 4E FE 02               or          byte ptr -0x2[bp],0x02 
26A5    80 66 FE DF               and         byte ptr -0x2[bp],0xdf 
26A9    B8 60 00                  mov         ax,0x0060 
26AC    50                        push        ax 
26AD    B8 64 00                  mov         ax,0x0064 
26B0    50                        push        ax 
26B1    E8 00 00                  call        _outb 
26B4    83 C4 04                  add         sp,0x0004 
26B7    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
26BA    30 E4                     xor         ah,ah 
26BC    50                        push        ax 
26BD    B8 60 00                  mov         ax,0x0060 
26C0    50                        push        ax 
26C1    E8 00 00                  call        _outb 
26C4    83 C4 04                  add         sp,0x0004 
26C7    89 EC                     mov         sp,bp 
26C9    5D                        pop         bp 
26CA    C3                        ret         
26CB    FC                        cld         
26CC                          _send_to_mouse_ctrl:
26CC    55                        push        bp 
26CD    89 E5                     mov         bp,sp 
26CF    B8 64 00                  mov         ax,0x0064 
26D2    50                        push        ax 
26D3    E8 00 00                  call        _inb 
26D6    83 C4 02                  add         sp,0x0002 
26D9    A8 02                     test        al,0x02 
26DB    74 12                     je          L$348 
26DD    B8 0E 04                  mov         ax,offset DGROUP:L$395 
26E0    50                        push        ax 
26E1    B8 00 00                  mov         ax,offset _panic_msg_keyb_buffer_full 
26E4    50                        push        ax 
26E5    B8 07 00                  mov         ax,0x0007 
26E8    50                        push        ax 
26E9    E8 00 00                  call        _bios_printf 
26EC    83 C4 06                  add         sp,0x0006 
26EF                          L$348:
26EF    B8 D4 00                  mov         ax,0x00d4 
26F2    50                        push        ax 
26F3    B8 64 00                  mov         ax,0x0064 
26F6    50                        push        ax 
26F7    E8 00 00                  call        _outb 
26FA    83 C4 04                  add         sp,0x0004 
26FD    8A 46 04                  mov         al,byte ptr 0x4[bp] 
2700    30 E4                     xor         ah,ah 
2702    50                        push        ax 
2703    B8 60 00                  mov         ax,0x0060 
2706    50                        push        ax 
2707    E8 00 00                  call        _outb 
270A    83 C4 04                  add         sp,0x0004 
270D    30 C0                     xor         al,al 
270F    5D                        pop         bp 
2710    C3                        ret         
2711    FC                        cld         
2712                          _get_mouse_data:
2712    B8 64 00                  mov         ax,0x0064 
2715    50                        push        ax 
2716    E8 00 00                  call        _inb 
2719    83 C4 02                  add         sp,0x0002 
271C    24 01                     and         al,0x01 
271E    3C 01                     cmp         al,0x01 
2720    75 F0                     jne         _get_mouse_data 
2722    B8 60 00                  mov         ax,0x0060 
2725    50                        push        ax 
2726    E8 00 00                  call        _inb 
2729    83 C4 02                  add         sp,0x0002 
272C    C3                        ret         
272D    FC                        cld         

Routine Size: 1832 bytes,    Routine Base: _TEXT + 2006

272E                          _int19_function:
272E    56                        push        si 
272F    57                        push        di 
2730    55                        push        bp 
2731    89 E5                     mov         bp,sp 
2733    83 EC 18                  sub         sp,0x0018 
2736    B8 82 00                  mov         ax,0x0082 
2739    50                        push        ax 
273A    B8 F0 9F                  mov         ax,0x9ff0 
273D    50                        push        ax 
273E    E8 00 00                  call        _read_word 
2741    83 C4 04                  add         sp,0x0004 
2744    8D 76 E8                  lea         si,-0x18[bp] 
2747    56                        push        si 
2748    89 C6                     mov         si,ax 
274A    4E                        dec         si 
274B    56                        push        si 
274C    E8 00 00                  call        _get_boot_vector 
274F    83 C4 04                  add         sp,0x0004 
2752    84 C0                     test        al,al 
2754    75 12                     jne         L$349 
2756    56                        push        si 
2757    B8 18 04                  mov         ax,offset DGROUP:L$396 
275A    50                        push        ax 
275B    B8 02 00                  mov         ax,0x0002 
275E    50                        push        ax 
275F    E8 00 00                  call        _bios_printf 
2762    83 C4 06                  add         sp,0x0006 
2765    E9 D9 00                  jmp         L$356 
2768                          L$349:
2768    8D 46 E8                  lea         ax,-0x18[bp] 
276B    50                        push        ax 
276C    E8 00 00                  call        _print_boot_device 
276F    83 C4 02                  add         sp,0x0002 
2772    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
2775    3D 01 00                  cmp         ax,0x0001 
2778    72 5D                     jb          L$353 
277A    3D 02 00                  cmp         ax,0x0002 
277D    77 58                     ja          L$353 
277F    75 05                     jne         L$350 
2781    B8 80 00                  mov         ax,0x0080 
2784    EB 02                     jmp         L$351 
2786                          L$350:
2786    31 C0                     xor         ax,ax 
2788                          L$351:
2788    88 46 FE                  mov         byte ptr -0x2[bp],al 
278B    C7 46 FC C0 07            mov         word ptr -0x4[bp],0x07c0 
2790    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
2795    50                        push        ax 
2796    53                        push        bx 
2797    51                        push        cx 
2798    52                        push        dx 
2799    8A 96 FE FF               mov         dl,byte ptr -0x2[bp] 
279D    8B 86 FC FF               mov         ax,word ptr -0x4[bp] 
27A1    8E C0                     mov         es,ax 
27A3    33 DB                     xor         bx,bx 
27A5    B4 02                     mov         ah,0x02 
27A7    B0 01                     mov         al,0x01 
27A9    B5 00                     mov         ch,0x00 
27AB    B1 01                     mov         cl,0x01 
27AD    B6 00                     mov         dh,0x00 
27AF    CD 13                     int         0x13 
27B1    73 07                     jae         L$352 
27B3    B8 01 00                  mov         ax,0x0001 
27B6    89 86 FA FF               mov         word ptr -0x6[bp],ax 
27BA                          L$352:
27BA    5A                        pop         dx 
27BB    59                        pop         cx 
27BC    5B                        pop         bx 
27BD    58                        pop         ax 
27BE    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
27C2    74 15                     je          L$354 
27C4    B8 01 00                  mov         ax,0x0001 
27C7    50                        push        ax 
27C8    FF 76 E8                  push        word ptr -0x18[bp] 
27CB    E8 00 00                  call        _print_boot_failure 
27CE    83 C4 04                  add         sp,0x0004 
27D1    89 EC                     mov         sp,bp 
27D3    5D                        pop         bp 
27D4    5F                        pop         di 
27D5    5E                        pop         si 
27D6    C3                        ret         
27D7                          L$353:
27D7    EB 68                     jmp         L$356 
27D9                          L$354:
27D9    B8 FE 01                  mov         ax,0x01fe 
27DC    50                        push        ax 
27DD    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
27E0    50                        push        ax 
27E1    E8 00 00                  call        _read_word 
27E4    83 C4 04                  add         sp,0x0004 
27E7    3D 55 AA                  cmp         ax,0xaa55 
27EA    74 12                     je          L$355 
27EC    31 C0                     xor         ax,ax 
27EE    50                        push        ax 
27EF    FF 76 E8                  push        word ptr -0x18[bp] 
27F2    E8 00 00                  call        _print_boot_failure 
27F5    83 C4 04                  add         sp,0x0004 
27F8    89 EC                     mov         sp,bp 
27FA    5D                        pop         bp 
27FB    5F                        pop         di 
27FC    5E                        pop         si 
27FD    C3                        ret         
27FE                          L$355:
27FE    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
2801    80 E4 0F                  and         ah,0x0f 
2804    B1 04                     mov         cl,0x04 
2806    D3 E0                     shl         ax,cl 
2808    89 46 F8                  mov         word ptr -0x8[bp],ax 
280B    81 66 FC 00 F0            and         word ptr -0x4[bp],0xf000 
2810    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
2813    50                        push        ax 
2814    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
2817    50                        push        ax 
2818    B8 34 04                  mov         ax,offset DGROUP:L$397 
281B    50                        push        ax 
281C    B8 04 00                  mov         ax,0x0004 
281F    50                        push        ax 
2820    E8 00 00                  call        _bios_printf 
2823    83 C4 08                  add         sp,0x0008 
2826    9C                        pushf       
2827    8B 86 FC FF               mov         ax,word ptr -0x4[bp] 
282B    50                        push        ax 
282C    8B 86 F8 FF               mov         ax,word ptr -0x8[bp] 
2830    50                        push        ax 
2831    B8 55 AA                  mov         ax,0xaa55 
2834    8A 96 FE FF               mov         dl,byte ptr -0x2[bp] 
2838    33 DB                     xor         bx,bx 
283A    8E DB                     mov         ds,bx 
283C    8E C3                     mov         es,bx 
283E    8B EB                     mov         bp,bx 
2840    CF                        iret        
2841                          L$356:
2841    89 EC                     mov         sp,bp 
2843    5D                        pop         bp 
2844    5F                        pop         di 
2845    5E                        pop         si 
2846    C3                        ret         
2847    FC                        cld         

Routine Size: 282 bytes,    Routine Base: _TEXT + 272E

2848                          _boot_halt:
2848    B8 48 04                  mov         ax,offset DGROUP:L$398 
284B    50                        push        ax 
284C    B8 02 00                  mov         ax,0x0002 
284F    50                        push        ax 
2850    E8 00 00                  call        _bios_printf 
2853    83 C4 04                  add         sp,0x0004 
2856    C3                        ret         
2857    FC                        cld         

Routine Size: 16 bytes,    Routine Base: _TEXT + 2848

2858                          _int1a_function:
2858    56                        push        si 
2859    57                        push        di 
285A    55                        push        bp 
285B    89 E5                     mov         bp,sp 
285D    83 EC 06                  sub         sp,0x0006 
2860    FB                        sti         
2861    8B 46 08                  mov         ax,word ptr 0x8[bp] 
2864    30 E4                     xor         ah,ah 
2866    85 C0                     test        ax,ax 
2868    75 65                     jne         L$357 
286A    FA                        cli         
286B    B8 6C 00                  mov         ax,0x006c 
286E    50                        push        ax 
286F    B8 40 00                  mov         ax,0x0040 
2872    50                        push        ax 
2873    E8 00 00                  call        _read_word 
2876    83 C4 04                  add         sp,0x0004 
2879    89 46 FA                  mov         word ptr -0x6[bp],ax 
287C    B8 6E 00                  mov         ax,0x006e 
287F    50                        push        ax 
2880    B8 40 00                  mov         ax,0x0040 
2883    50                        push        ax 
2884    E8 00 00                  call        _read_word 
2887    83 C4 04                  add         sp,0x0004 
288A    89 46 FC                  mov         word ptr -0x4[bp],ax 
288D    B8 70 00                  mov         ax,0x0070 
2890    50                        push        ax 
2891    B8 40 00                  mov         ax,0x0040 
2894    50                        push        ax 
2895    E8 00 00                  call        _read_byte 
2898    83 C4 04                  add         sp,0x0004 
289B    88 46 FE                  mov         byte ptr -0x2[bp],al 
289E    8B 86 FC FF               mov         ax,word ptr -0x4[bp] 
28A2    89 86 0A 00               mov         word ptr 0xa[bp],ax 
28A6    8B 86 FA FF               mov         ax,word ptr -0x6[bp] 
28AA    89 86 0C 00               mov         word ptr 0xc[bp],ax 
28AE    8A 86 FE FF               mov         al,byte ptr -0x2[bp] 
28B2    89 86 08 00               mov         word ptr 0x8[bp],ax 
28B6    31 C0                     xor         ax,ax 
28B8    50                        push        ax 
28B9    B8 70 00                  mov         ax,0x0070 
28BC    50                        push        ax 
28BD    B8 40 00                  mov         ax,0x0040 
28C0    50                        push        ax 
28C1    E8 00 00                  call        _write_byte 
28C4    83 C4 06                  add         sp,0x0006 
28C7    FB                        sti         
28C8    83 A6 1C 00 FE            and         word ptr 0x1c[bp],0xfffe 
28CD    EB 05                     jmp         L$358 
28CF                          L$357:
28CF    83 8E 1C 00 01            or          word ptr 0x1c[bp],0x0001 
28D4                          L$358:
28D4    89 EC                     mov         sp,bp 
28D6    5D                        pop         bp 
28D7    5F                        pop         di 
28D8    5E                        pop         si 
28D9    C3                        ret         

Routine Size: 130 bytes,    Routine Base: _TEXT + 2858

No disassembly errors

Segment: CONST WORD USE16 00000472 bytes
0000                          L$359:
0000    46 41 54 41 4C 3A 20 00                         FATAL: .
0008                          L$360:
0008    62 69 6F 73 5F 70 72 69 6E 74 66 3A 20 75 6E 6B bios_printf: unk
0018    6E 6F 77 6E 20 66 6F 72 6D 61 74 0A 00          nown format..
0025                          L$361:
0025    5A 65 74 20 54 65 73 74 20 42 49 4F 53 20 2D 20 Zet Test BIOS - 
0035    62 75 69 6C 64 20 64 61 74 65 3A 20 00          build date: .
0042                          L$362:
0042    30 35 2F 32 32 2F 32 30 31 30 0A 00             05/22/2010..
004E                          L$363:
004E    20 56 65 72 73 69 6F 6E 3A 20 53 70 65 63 69 61  Version: Specia
005E    6C 0A 00                                        l..
0061                          L$364:
0061    20 44 61 74 65 3A 20 35 2F 39 2F 32 30 31 30 0A  Date: 5/9/2010.
0071    0A 00                                           ..
0073                          L$365:
0073    45 72 72 6F 72 20 69 6E 69 74 69 61 6C 69 7A 69 Error initializi
0083    6E 67 20 53 44 20 63 61 72 64 20 63 6F 6E 74 72 ng SD card contr
0093    6F 6C 6C 65 72 20 28 61 74 20 73 74 61 67 65 20 oller (at stage 
00A3    25 64 29 0A 00                                  %d)..
00A8                          L$366:
00A8    42 61 64 20 64 72 69 76 65 20 74 79 70 65 0A 00 Bad drive type..
00B8                          L$367:
00B8    42 6F 6F 74 20 66 61 69 6C 65 64 00             Boot failed.
00C4                          L$368:
00C4    3A 20 6E 6F 74 20 61 20 62 6F 6F 74 61 62 6C 65 : not a bootable
00D4    20 64 69 73 6B 00                                disk.
00DA                          L$369:
00DA    3A 20 63 6F 75 6C 64 20 6E 6F 74 20 72 65 61 64 : could not read
00EA    20 74 68 65 20 62 6F 6F 74 20 64 69 73 6B 00     the boot disk.
00F9                          L$370:
00F9    0A 0A 00                                        ...
00FC                          L$371:
00FC    4B 42 44 3A 20 69 6E 74 31 36 68 3A 20 6F 75 74 KBD: int16h: out
010C    20 6F 66 20 6B 65 79 62 6F 61 72 64 20 69 6E 70  of keyboard inp
011C    75 74 0A 00                                     ut..
0120                          L$372:
0120    4B 42 44 3A 20 75 6E 73 75 70 70 6F 72 74 65 64 KBD: unsupported
0130    20 69 6E 74 20 31 36 68 20 66 75 6E 63 74 69 6F  int 16h functio
0140    6E 20 25 30 32 78 0A 00                         n %02x..
0148                          L$373:
0148    4B 42 44 3A 20 69 6E 74 30 39 20 68 61 6E 64 6C KBD: int09 handl
0158    65 72 3A 20 41 4C 3D 30 0A 00                   er: AL=0..
0162                          L$374:
0162    4B 42 44 3A 20 69 6E 74 30 39 68 5F 68 61 6E 64 KBD: int09h_hand
0172    6C 65 72 28 29 3A 20 75 6E 6B 6E 6F 77 6E 20 73 ler(): unknown s
0182    63 61 6E 63 6F 64 65 20 72 65 61 64 3A 20 30 78 cancode read: 0x
0192    25 30 32 78 21 0A 00                            %02x!..
0199                          L$375:
0199    4B 42 44 3A 20 69 6E 74 30 39 68 5F 68 61 6E 64 KBD: int09h_hand
01A9    6C 65 72 28 29 3A 20 73 63 61 6E 63 6F 64 65 20 ler(): scancode 
01B9    26 20 61 73 63 69 69 63 6F 64 65 20 61 72 65 20 & asciicode are 
01C9    7A 65 72 6F 3F 0A 00                            zero?..
01D0                          L$376:
01D0    69 6E 74 31 33 5F 68 61 72 64 64 69 73 6B 3A 20 int13_harddisk: 
01E0    66 75 6E 63 74 69 6F 6E 20 25 30 32 78 68 20 75 function %02xh u
01F0    6E 73 75 70 70 6F 72 74 65 64 2C 20 72 65 74 75 nsupported, retu
0200    72 6E 73 20 66 61 69 6C 0A 00                   rns fail..
020A                          L$377:
020A    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 3A 20 int13_diskette: 
021A    72 65 61 64 2F 77 72 69 74 65 2F 76 65 72 69 66 read/write/verif
022A    79 3A 20 70 61 72 61 6D 65 74 65 72 20 6F 75 74 y: parameter out
023A    20 6F 66 20 72 61 6E 67 65 0A 00                 of range..
0245                          L$378:
0245    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 20 2D int13_diskette -
0255    20 30 33 3A 20 36 34 4B 20 62 6F 75 6E 64 61 72  03: 64K boundar
0265    79 20 6F 76 65 72 72 75 6E 0A 00                y overrun..
0270                          L$379:
0270    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 20 2D int13_diskette -
0280    20 30 32 3A 20 41 63 63 65 73 73 69 6E 67 20 72  02: Accessing r
0290    61 6D 64 69 73 6B 0A 00                         amdisk..
0298                          L$380:
0298    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 20 2D int13_diskette -
02A8    20 30 38 3A 20 64 72 69 76 65 20 3E 31 0A 00     08: drive >1..
02B7                          L$381:
02B7    66 6C 6F 70 70 79 3A 20 69 6E 74 31 33 3A 20 62 floppy: int13: b
02C7    61 64 20 66 6C 6F 70 70 79 20 74 79 70 65 0A 00 ad floppy type..
02D7                          L$382:
02D7    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 20 2D int13_diskette -
02E7    20 31 35 3A 20 64 72 69 76 65 20 3E 31 0A 00     15: drive >1..
02F6                          L$383:
02F6    69 6E 74 31 33 5F 64 69 73 6B 65 74 74 65 3A 20 int13_diskette: 
0306    75 6E 73 75 70 70 6F 72 74 65 64 20 41 48 3D 25 unsupported AH=%
0316    30 32 78 0A 00                                  02x..
031B                          L$384:
031B    42 6F 6F 74 69 6E 67 20 66 72 6F 6D 20 25 73 00 Booting from %s.
032B                          L$385:
032B    20 5B 25 53 5D 00                                [%S].
0331                          L$386:
0331    2E 2E 2E 0A 0A 00                               ......
0337                          L$387:
0337    2A 2A 2A 20 69 6E 74 20 31 35 68 20 66 75 6E 63 *** int 15h func
0347    74 69 6F 6E 20 41 48 3D 62 66 20 6E 6F 74 20 79 tion AH=bf not y
0357    65 74 20 73 75 70 70 6F 72 74 65 64 21 0A 00    et supported!..
0366                          L$388:
0366    45 49 53 41 20 42 49 4F 53 20 6E 6F 74 20 70 72 EISA BIOS not pr
0376    65 73 65 6E 74 0A 00                            esent..
037D                          L$389:
037D    4D 6F 75 73 65 20 72 65 73 65 74 20 72 65 74 75 Mouse reset retu
038D    72 6E 65 64 20 25 30 32 78 20 28 73 68 6F 75 6C rned %02x (shoul
039D    64 20 62 65 20 61 63 6B 29 0A 00                d be ack)..
03A8                          L$390:
03A8    4D 6F 75 73 65 20 73 74 61 74 75 73 20 72 65 74 Mouse status ret
03B8    75 72 6E 65 64 20 25 30 32 78 20 28 73 68 6F 75 urned %02x (shou
03C8    6C 64 20 62 65 20 61 63 6B 29 0A 00             ld be ack)..
03D4                          L$391:
03D4    49 4E 54 20 31 35 68 20 43 32 20 41 4C 3D 36 2C INT 15h C2 AL=6,
03E4    20 42 48 3D 25 30 32 78 0A 00                    BH=%02x..
03EE                          L$392:
03EE    69 6E 68 69 62 6D 6F 75 73 65 00                inhibmouse.
03F9                          L$393:
03F9    73 65 74 6B 62 64 63 6F 6D 6D 00                setkbdcomm.
0404                          L$394:
0404    65 6E 61 62 6D 6F 75 73 65 00                   enabmouse.
040E                          L$395:
040E    73 65 6E 64 6D 6F 75 73 65 00                   sendmouse.
0418                          L$396:
0418    49 6E 76 61 6C 69 64 20 62 6F 6F 74 20 64 65 76 Invalid boot dev
0428    69 63 65 20 28 30 78 25 78 29 0A 00             ice (0x%x)..
0434                          L$397:
0434    42 6F 6F 74 69 6E 67 20 66 72 6F 6D 20 25 78 3A Booting from %x:
0444    25 78 0A 00                                     %x..
0448                          L$398:
0448    4E 6F 20 6D 6F 72 65 20 64 65 76 69 63 65 73 20 No more devices 
0458    74 6F 20 62 6F 6F 74 20 2D 20 53 79 73 74 65 6D to boot - System
0468    20 68 61 6C 74 65 64 2E 0A 00                    halted...

Segment: CONST2 WORD USE16 00000000 bytes

Segment: _DATA WORD USE16 000003D6 bytes
0000                          _scan_to_scanascii:
0000    00 00 00 00 00 00 00 00 00 00 1B 01 1B 01 1B 01 ................
0010    00 01 00 00 31 02 21 02 00 00 00 78 00 00 32 03 ....1.!....x..2.
0020    40 03 00 03 00 79 00 00 33 04 23 04 00 00 00 7A @....y..3.#....z
0030    00 00 34 05 24 05 00 00 00 7B 00 00 35 06 25 06 ..4.$....{..5.%.
0040    00 00 00 7C 00 00 36 07 5E 07 1E 07 00 7D 00 00 ...|..6.^....}..
0050    37 08 26 08 00 00 00 7E 00 00 38 09 2A 09 00 00 7.&....~..8.*...
0060    00 7F 00 00 39 0A 28 0A 00 00 00 80 00 00 30 0B ....9.(.......0.
0070    29 0B 00 00 00 81 00 00 2D 0C 5F 0C 1F 0C 00 82 ).......-._.....
0080    00 00 3D 0D 2B 0D 00 00 00 83 00 00 08 0E 08 0E ..=.+...........
0090    7F 0E 00 00 00 00 09 0F 00 0F 00 00 00 00 00 00 ................
00A0    71 10 51 10 11 10 00 10 40 00 77 11 57 11 17 11 q.Q.....@.w.W...
00B0    00 11 40 00 65 12 45 12 05 12 00 12 40 00 72 13 ..@.e.E.....@.r.
00C0    52 13 12 13 00 13 40 00 74 14 54 14 14 14 00 14 R.....@.t.T.....
00D0    40 00 79 15 59 15 19 15 00 15 40 00 75 16 55 16 @.y.Y.....@.u.U.
00E0    15 16 00 16 40 00 69 17 49 17 09 17 00 17 40 00 ....@.i.I.....@.
00F0    6F 18 4F 18 0F 18 00 18 40 00 70 19 50 19 10 19 o.O.....@.p.P...
0100    00 19 40 00 5B 1A 7B 1A 1B 1A 00 00 00 00 5D 1B ..@.[.{.......].
0110    7D 1B 1D 1B 00 00 00 00 0D 1C 0D 1C 0A 1C 00 00 }...............
0120    00 00 00 00 00 00 00 00 00 00 00 00 61 1E 41 1E ............a.A.
0130    01 1E 00 1E 40 00 73 1F 53 1F 13 1F 00 1F 40 00 ....@.s.S.....@.
0140    64 20 44 20 04 20 00 20 40 00 66 21 46 21 06 21 d D . . @.f!F!.!
0150    00 21 40 00 67 22 47 22 07 22 00 22 40 00 68 23 .!@.g"G"."."@.h#
0160    48 23 08 23 00 23 40 00 6A 24 4A 24 0A 24 00 24 H#.#.#@.j$J$.$.$
0170    40 00 6B 25 4B 25 0B 25 00 25 40 00 6C 26 4C 26 @.k%K%.%.%@.l&L&
0180    0C 26 00 26 40 00 3B 27 3A 27 00 00 00 00 00 00 .&.&@.;':'......
0190    27 28 22 28 00 00 00 00 00 00 60 29 7E 29 00 00 '("(......`)~)..
01A0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 5C 2B ..............\+
01B0    7C 2B 1C 2B 00 00 00 00 7A 2C 5A 2C 1A 2C 00 2C |+.+....z,Z,.,.,
01C0    40 00 78 2D 58 2D 18 2D 00 2D 40 00 63 2E 43 2E @.x-X-.-.-@.c.C.
01D0    03 2E 00 2E 40 00 76 2F 56 2F 16 2F 00 2F 40 00 ....@.v/V/././@.
01E0    62 30 42 30 02 30 00 30 40 00 6E 31 4E 31 0E 31 b0B0.0.0@.n1N1.1
01F0    00 31 40 00 6D 32 4D 32 0D 32 00 32 40 00 2C 33 .1@.m2M2.2.2@.,3
0200    3C 33 00 00 00 00 00 00 2E 34 3E 34 00 00 00 00 <3.......4>4....
0210    00 00 2F 35 3F 35 00 00 00 00 00 00 00 00 00 00 ../5?5..........
0220    00 00 00 00 00 00 2A 37 2A 37 00 00 00 00 00 00 ......*7*7......
0230    00 00 00 00 00 00 00 00 00 00 20 39 20 39 20 39 .......... 9 9 9
0240    20 39 00 00 00 00 00 00 00 00 00 00 00 00 00 3B  9.............;
0250    00 54 00 5E 00 68 00 00 00 3C 00 55 00 5F 00 69 .T.^.h...<.U._.i
0260    00 00 00 3D 00 56 00 60 00 6A 00 00 00 3E 00 57 ...=.V.`.j...>.W
0270    00 61 00 6B 00 00 00 3F 00 58 00 62 00 6C 00 00 .a.k...?.X.b.l..
0280    00 40 00 59 00 63 00 6D 00 00 00 41 00 5A 00 64 .@.Y.c.m...A.Z.d
0290    00 6E 00 00 00 42 00 5B 00 65 00 6F 00 00 00 43 .n...B.[.e.o...C
02A0    00 5C 00 66 00 70 00 00 00 44 00 5D 00 67 00 71 .\.f.p...D.].g.q
02B0    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
02C0    00 00 00 00 00 00 00 47 37 47 00 77 00 00 20 00 .......G7G.w.. .
02D0    00 48 38 48 00 00 00 00 20 00 00 49 39 49 00 84 .H8H.... ..I9I..
02E0    00 00 20 00 2D 4A 2D 4A 00 00 00 00 00 00 00 4B .. .-J-J.......K
02F0    34 4B 00 73 00 00 20 00 00 4C 35 4C 00 00 00 00 4K.s.. ..L5L....
0300    20 00 00 4D 36 4D 00 74 00 00 20 00 2B 4E 2B 4E  ..M6M.t.. .+N+N
0310    00 00 00 00 00 00 00 4F 31 4F 00 75 00 00 20 00 .......O1O.u.. .
0320    00 50 32 50 00 00 00 00 20 00 00 51 33 51 00 76 .P2P.... ..Q3Q.v
0330    00 00 20 00 00 52 30 52 00 00 00 00 20 00 00 53 .. ..R0R.... ..S
0340    2E 53 00 00 00 00 20 00 00 00 00 00 00 00 00 00 .S.... .........
0350    00 00 00 00 00 00 00 00 00 00 00 00 5C 56 7C 56 ............\V|V
0360    00 00 00 00 00 00 00 57 00 57 00 00 00 00 00 00 .......W.W......
0370    00 58 00 58 00 00 00 00 00 00                   .X.X......
037A                          _drivetypes:
037A    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
038A    00 00 00 00 46 6C 6F 70 70 79 20 66 6C 61 73 68 ....Floppy flash
039A    20 69 6D 61 67 65 00 00 53 44 20 63 61 72 64 00  image..SD card.
03AA    00 00 00 00 00 00 00 00 00 00 00 00             ............
03B6                          _panic_msg_keyb_buffer_full:
03B6    25 73 3A 20 6B 65 79 62 6F 61 72 64 20 69 6E 70 %s: keyboard inp
03C6    75 74 20 62 75 66 66 65 72 20 66 75 6C 6C 0A 00 ut buffer full..

